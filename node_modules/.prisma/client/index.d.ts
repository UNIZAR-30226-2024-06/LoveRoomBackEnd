
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model fotousuario
 * 
 */
export type fotousuario = $Result.DefaultSelection<Prisma.$fotousuarioPayload>
/**
 * Model localidad
 * 
 */
export type localidad = $Result.DefaultSelection<Prisma.$localidadPayload>
/**
 * Model match
 * 
 */
export type match = $Result.DefaultSelection<Prisma.$matchPayload>
/**
 * Model mensaje
 * 
 */
export type mensaje = $Result.DefaultSelection<Prisma.$mensajePayload>
/**
 * Model multimedia
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type multimedia = $Result.DefaultSelection<Prisma.$multimediaPayload>
/**
 * Model participa
 * 
 */
export type participa = $Result.DefaultSelection<Prisma.$participaPayload>
/**
 * Model sala
 * 
 */
export type sala = $Result.DefaultSelection<Prisma.$salaPayload>
/**
 * Model spatial_ref_sys
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type spatial_ref_sys = $Result.DefaultSelection<Prisma.$spatial_ref_sysPayload>
/**
 * Model usuario
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model videoviewer
 * 
 */
export type videoviewer = $Result.DefaultSelection<Prisma.$videoviewerPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fotousuarios
 * const fotousuarios = await prisma.fotousuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fotousuarios
   * const fotousuarios = await prisma.fotousuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.fotousuario`: Exposes CRUD operations for the **fotousuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fotousuarios
    * const fotousuarios = await prisma.fotousuario.findMany()
    * ```
    */
  get fotousuario(): Prisma.fotousuarioDelegate<ExtArgs>;

  /**
   * `prisma.localidad`: Exposes CRUD operations for the **localidad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Localidads
    * const localidads = await prisma.localidad.findMany()
    * ```
    */
  get localidad(): Prisma.localidadDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.matchDelegate<ExtArgs>;

  /**
   * `prisma.mensaje`: Exposes CRUD operations for the **mensaje** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensajes
    * const mensajes = await prisma.mensaje.findMany()
    * ```
    */
  get mensaje(): Prisma.mensajeDelegate<ExtArgs>;

  /**
   * `prisma.multimedia`: Exposes CRUD operations for the **multimedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Multimedias
    * const multimedias = await prisma.multimedia.findMany()
    * ```
    */
  get multimedia(): Prisma.multimediaDelegate<ExtArgs>;

  /**
   * `prisma.participa`: Exposes CRUD operations for the **participa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participas
    * const participas = await prisma.participa.findMany()
    * ```
    */
  get participa(): Prisma.participaDelegate<ExtArgs>;

  /**
   * `prisma.sala`: Exposes CRUD operations for the **sala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salas
    * const salas = await prisma.sala.findMany()
    * ```
    */
  get sala(): Prisma.salaDelegate<ExtArgs>;

  /**
   * `prisma.spatial_ref_sys`: Exposes CRUD operations for the **spatial_ref_sys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spatial_ref_sys
    * const spatial_ref_sys = await prisma.spatial_ref_sys.findMany()
    * ```
    */
  get spatial_ref_sys(): Prisma.spatial_ref_sysDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.videoviewer`: Exposes CRUD operations for the **videoviewer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videoviewers
    * const videoviewers = await prisma.videoviewer.findMany()
    * ```
    */
  get videoviewer(): Prisma.videoviewerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    fotousuario: 'fotousuario',
    localidad: 'localidad',
    match: 'match',
    mensaje: 'mensaje',
    multimedia: 'multimedia',
    participa: 'participa',
    sala: 'sala',
    spatial_ref_sys: 'spatial_ref_sys',
    usuario: 'usuario',
    videoviewer: 'videoviewer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'fotousuario' | 'localidad' | 'match' | 'mensaje' | 'multimedia' | 'participa' | 'sala' | 'spatial_ref_sys' | 'usuario' | 'videoviewer'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      fotousuario: {
        payload: Prisma.$fotousuarioPayload<ExtArgs>
        fields: Prisma.fotousuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fotousuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fotousuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          findFirst: {
            args: Prisma.fotousuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fotousuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          findMany: {
            args: Prisma.fotousuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>[]
          }
          create: {
            args: Prisma.fotousuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          createMany: {
            args: Prisma.fotousuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.fotousuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          update: {
            args: Prisma.fotousuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          deleteMany: {
            args: Prisma.fotousuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.fotousuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.fotousuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fotousuarioPayload>
          }
          aggregate: {
            args: Prisma.FotousuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFotousuario>
          }
          groupBy: {
            args: Prisma.fotousuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FotousuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.fotousuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<FotousuarioCountAggregateOutputType> | number
          }
        }
      }
      localidad: {
        payload: Prisma.$localidadPayload<ExtArgs>
        fields: Prisma.localidadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.localidadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.localidadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          findFirst: {
            args: Prisma.localidadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.localidadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          findMany: {
            args: Prisma.localidadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>[]
          }
          create: {
            args: Prisma.localidadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          createMany: {
            args: Prisma.localidadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.localidadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          update: {
            args: Prisma.localidadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          deleteMany: {
            args: Prisma.localidadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.localidadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.localidadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$localidadPayload>
          }
          aggregate: {
            args: Prisma.LocalidadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocalidad>
          }
          groupBy: {
            args: Prisma.localidadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocalidadGroupByOutputType>[]
          }
          count: {
            args: Prisma.localidadCountArgs<ExtArgs>,
            result: $Utils.Optional<LocalidadCountAggregateOutputType> | number
          }
        }
      }
      match: {
        payload: Prisma.$matchPayload<ExtArgs>
        fields: Prisma.matchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.matchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.matchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          findFirst: {
            args: Prisma.matchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.matchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          findMany: {
            args: Prisma.matchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>[]
          }
          create: {
            args: Prisma.matchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          createMany: {
            args: Prisma.matchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.matchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          update: {
            args: Prisma.matchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          deleteMany: {
            args: Prisma.matchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.matchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.matchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$matchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.matchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.matchCountArgs<ExtArgs>,
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      mensaje: {
        payload: Prisma.$mensajePayload<ExtArgs>
        fields: Prisma.mensajeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mensajeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mensajeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          findFirst: {
            args: Prisma.mensajeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mensajeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          findMany: {
            args: Prisma.mensajeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>[]
          }
          create: {
            args: Prisma.mensajeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          createMany: {
            args: Prisma.mensajeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.mensajeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          update: {
            args: Prisma.mensajeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          deleteMany: {
            args: Prisma.mensajeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.mensajeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.mensajeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          aggregate: {
            args: Prisma.MensajeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMensaje>
          }
          groupBy: {
            args: Prisma.mensajeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MensajeGroupByOutputType>[]
          }
          count: {
            args: Prisma.mensajeCountArgs<ExtArgs>,
            result: $Utils.Optional<MensajeCountAggregateOutputType> | number
          }
        }
      }
      multimedia: {
        payload: Prisma.$multimediaPayload<ExtArgs>
        fields: Prisma.multimediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.multimediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.multimediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          findFirst: {
            args: Prisma.multimediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.multimediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          findMany: {
            args: Prisma.multimediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>[]
          }
          create: {
            args: Prisma.multimediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          createMany: {
            args: Prisma.multimediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.multimediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          update: {
            args: Prisma.multimediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          deleteMany: {
            args: Prisma.multimediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.multimediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.multimediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          aggregate: {
            args: Prisma.MultimediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMultimedia>
          }
          groupBy: {
            args: Prisma.multimediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MultimediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.multimediaCountArgs<ExtArgs>,
            result: $Utils.Optional<MultimediaCountAggregateOutputType> | number
          }
        }
      }
      participa: {
        payload: Prisma.$participaPayload<ExtArgs>
        fields: Prisma.participaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.participaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.participaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          findFirst: {
            args: Prisma.participaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.participaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          findMany: {
            args: Prisma.participaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>[]
          }
          create: {
            args: Prisma.participaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          createMany: {
            args: Prisma.participaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.participaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          update: {
            args: Prisma.participaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          deleteMany: {
            args: Prisma.participaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.participaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.participaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          aggregate: {
            args: Prisma.ParticipaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParticipa>
          }
          groupBy: {
            args: Prisma.participaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParticipaGroupByOutputType>[]
          }
          count: {
            args: Prisma.participaCountArgs<ExtArgs>,
            result: $Utils.Optional<ParticipaCountAggregateOutputType> | number
          }
        }
      }
      sala: {
        payload: Prisma.$salaPayload<ExtArgs>
        fields: Prisma.salaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.salaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.salaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          findFirst: {
            args: Prisma.salaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.salaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          findMany: {
            args: Prisma.salaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>[]
          }
          create: {
            args: Prisma.salaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          createMany: {
            args: Prisma.salaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.salaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          update: {
            args: Prisma.salaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          deleteMany: {
            args: Prisma.salaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.salaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.salaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          aggregate: {
            args: Prisma.SalaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSala>
          }
          groupBy: {
            args: Prisma.salaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalaGroupByOutputType>[]
          }
          count: {
            args: Prisma.salaCountArgs<ExtArgs>,
            result: $Utils.Optional<SalaCountAggregateOutputType> | number
          }
        }
      }
      spatial_ref_sys: {
        payload: Prisma.$spatial_ref_sysPayload<ExtArgs>
        fields: Prisma.spatial_ref_sysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.spatial_ref_sysFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.spatial_ref_sysFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          findFirst: {
            args: Prisma.spatial_ref_sysFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.spatial_ref_sysFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          findMany: {
            args: Prisma.spatial_ref_sysFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>[]
          }
          create: {
            args: Prisma.spatial_ref_sysCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          createMany: {
            args: Prisma.spatial_ref_sysCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.spatial_ref_sysDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          update: {
            args: Prisma.spatial_ref_sysUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          deleteMany: {
            args: Prisma.spatial_ref_sysDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.spatial_ref_sysUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.spatial_ref_sysUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$spatial_ref_sysPayload>
          }
          aggregate: {
            args: Prisma.Spatial_ref_sysAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpatial_ref_sys>
          }
          groupBy: {
            args: Prisma.spatial_ref_sysGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Spatial_ref_sysGroupByOutputType>[]
          }
          count: {
            args: Prisma.spatial_ref_sysCountArgs<ExtArgs>,
            result: $Utils.Optional<Spatial_ref_sysCountAggregateOutputType> | number
          }
        }
      }
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      videoviewer: {
        payload: Prisma.$videoviewerPayload<ExtArgs>
        fields: Prisma.videoviewerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.videoviewerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.videoviewerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          findFirst: {
            args: Prisma.videoviewerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.videoviewerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          findMany: {
            args: Prisma.videoviewerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>[]
          }
          create: {
            args: Prisma.videoviewerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          createMany: {
            args: Prisma.videoviewerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.videoviewerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          update: {
            args: Prisma.videoviewerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          deleteMany: {
            args: Prisma.videoviewerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.videoviewerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.videoviewerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoviewerPayload>
          }
          aggregate: {
            args: Prisma.VideoviewerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideoviewer>
          }
          groupBy: {
            args: Prisma.videoviewerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideoviewerGroupByOutputType>[]
          }
          count: {
            args: Prisma.videoviewerCountArgs<ExtArgs>,
            result: $Utils.Optional<VideoviewerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LocalidadCountOutputType
   */

  export type LocalidadCountOutputType = {
    usuario: number
  }

  export type LocalidadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | LocalidadCountOutputTypeCountUsuarioArgs
  }

  // Custom InputTypes

  /**
   * LocalidadCountOutputType without action
   */
  export type LocalidadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalidadCountOutputType
     */
    select?: LocalidadCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LocalidadCountOutputType without action
   */
  export type LocalidadCountOutputTypeCountUsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
  }



  /**
   * Count Type MultimediaCountOutputType
   */

  export type MultimediaCountOutputType = {
    fotousuario: number
    mensaje: number
    usuario: number
  }

  export type MultimediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotousuario?: boolean | MultimediaCountOutputTypeCountFotousuarioArgs
    mensaje?: boolean | MultimediaCountOutputTypeCountMensajeArgs
    usuario?: boolean | MultimediaCountOutputTypeCountUsuarioArgs
  }

  // Custom InputTypes

  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MultimediaCountOutputType
     */
    select?: MultimediaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeCountFotousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fotousuarioWhereInput
  }


  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeCountMensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
  }


  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeCountUsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
  }



  /**
   * Count Type ParticipaCountOutputType
   */

  export type ParticipaCountOutputType = {
    mensaje: number
  }

  export type ParticipaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | ParticipaCountOutputTypeCountMensajeArgs
  }

  // Custom InputTypes

  /**
   * ParticipaCountOutputType without action
   */
  export type ParticipaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipaCountOutputType
     */
    select?: ParticipaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParticipaCountOutputType without action
   */
  export type ParticipaCountOutputTypeCountMensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
  }



  /**
   * Count Type SalaCountOutputType
   */

  export type SalaCountOutputType = {
    participa: number
  }

  export type SalaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participa?: boolean | SalaCountOutputTypeCountParticipaArgs
  }

  // Custom InputTypes

  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaCountOutputType
     */
    select?: SalaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeCountParticipaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
  }



  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    fotousuario: number
    match_match_idusuario1Tousuario: number
    match_match_idusuario2Tousuario: number
    participa: number
    videoviewer: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotousuario?: boolean | UsuarioCountOutputTypeCountFotousuarioArgs
    match_match_idusuario1Tousuario?: boolean | UsuarioCountOutputTypeCountMatch_match_idusuario1TousuarioArgs
    match_match_idusuario2Tousuario?: boolean | UsuarioCountOutputTypeCountMatch_match_idusuario2TousuarioArgs
    participa?: boolean | UsuarioCountOutputTypeCountParticipaArgs
    videoviewer?: boolean | UsuarioCountOutputTypeCountVideoviewerArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountFotousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fotousuarioWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountMatch_match_idusuario1TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountMatch_match_idusuario2TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountParticipaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountVideoviewerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videoviewerWhereInput
  }



  /**
   * Models
   */

  /**
   * Model fotousuario
   */

  export type AggregateFotousuario = {
    _count: FotousuarioCountAggregateOutputType | null
    _avg: FotousuarioAvgAggregateOutputType | null
    _sum: FotousuarioSumAggregateOutputType | null
    _min: FotousuarioMinAggregateOutputType | null
    _max: FotousuarioMaxAggregateOutputType | null
  }

  export type FotousuarioAvgAggregateOutputType = {
    idusuario: number | null
  }

  export type FotousuarioSumAggregateOutputType = {
    idusuario: number | null
  }

  export type FotousuarioMinAggregateOutputType = {
    rutafoto: string | null
    idusuario: number | null
  }

  export type FotousuarioMaxAggregateOutputType = {
    rutafoto: string | null
    idusuario: number | null
  }

  export type FotousuarioCountAggregateOutputType = {
    rutafoto: number
    idusuario: number
    _all: number
  }


  export type FotousuarioAvgAggregateInputType = {
    idusuario?: true
  }

  export type FotousuarioSumAggregateInputType = {
    idusuario?: true
  }

  export type FotousuarioMinAggregateInputType = {
    rutafoto?: true
    idusuario?: true
  }

  export type FotousuarioMaxAggregateInputType = {
    rutafoto?: true
    idusuario?: true
  }

  export type FotousuarioCountAggregateInputType = {
    rutafoto?: true
    idusuario?: true
    _all?: true
  }

  export type FotousuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fotousuario to aggregate.
     */
    where?: fotousuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fotousuarios to fetch.
     */
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fotousuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fotousuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fotousuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fotousuarios
    **/
    _count?: true | FotousuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FotousuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FotousuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FotousuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FotousuarioMaxAggregateInputType
  }

  export type GetFotousuarioAggregateType<T extends FotousuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateFotousuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFotousuario[P]>
      : GetScalarType<T[P], AggregateFotousuario[P]>
  }




  export type fotousuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fotousuarioWhereInput
    orderBy?: fotousuarioOrderByWithAggregationInput | fotousuarioOrderByWithAggregationInput[]
    by: FotousuarioScalarFieldEnum[] | FotousuarioScalarFieldEnum
    having?: fotousuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FotousuarioCountAggregateInputType | true
    _avg?: FotousuarioAvgAggregateInputType
    _sum?: FotousuarioSumAggregateInputType
    _min?: FotousuarioMinAggregateInputType
    _max?: FotousuarioMaxAggregateInputType
  }

  export type FotousuarioGroupByOutputType = {
    rutafoto: string
    idusuario: number
    _count: FotousuarioCountAggregateOutputType | null
    _avg: FotousuarioAvgAggregateOutputType | null
    _sum: FotousuarioSumAggregateOutputType | null
    _min: FotousuarioMinAggregateOutputType | null
    _max: FotousuarioMaxAggregateOutputType | null
  }

  type GetFotousuarioGroupByPayload<T extends fotousuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FotousuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FotousuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FotousuarioGroupByOutputType[P]>
            : GetScalarType<T[P], FotousuarioGroupByOutputType[P]>
        }
      >
    >


  export type fotousuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rutafoto?: boolean
    idusuario?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fotousuario"]>

  export type fotousuarioSelectScalar = {
    rutafoto?: boolean
    idusuario?: boolean
  }

  export type fotousuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
  }


  export type $fotousuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "fotousuario"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
      multimedia: Prisma.$multimediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      rutafoto: string
      idusuario: number
    }, ExtArgs["result"]["fotousuario"]>
    composites: {}
  }


  type fotousuarioGetPayload<S extends boolean | null | undefined | fotousuarioDefaultArgs> = $Result.GetResult<Prisma.$fotousuarioPayload, S>

  type fotousuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<fotousuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FotousuarioCountAggregateInputType | true
    }

  export interface fotousuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fotousuario'], meta: { name: 'fotousuario' } }
    /**
     * Find zero or one Fotousuario that matches the filter.
     * @param {fotousuarioFindUniqueArgs} args - Arguments to find a Fotousuario
     * @example
     * // Get one Fotousuario
     * const fotousuario = await prisma.fotousuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends fotousuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fotousuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {fotousuarioFindUniqueOrThrowArgs} args - Arguments to find a Fotousuario
     * @example
     * // Get one Fotousuario
     * const fotousuario = await prisma.fotousuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends fotousuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fotousuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioFindFirstArgs} args - Arguments to find a Fotousuario
     * @example
     * // Get one Fotousuario
     * const fotousuario = await prisma.fotousuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends fotousuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioFindFirstArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fotousuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioFindFirstOrThrowArgs} args - Arguments to find a Fotousuario
     * @example
     * // Get one Fotousuario
     * const fotousuario = await prisma.fotousuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends fotousuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fotousuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fotousuarios
     * const fotousuarios = await prisma.fotousuario.findMany()
     * 
     * // Get first 10 Fotousuarios
     * const fotousuarios = await prisma.fotousuario.findMany({ take: 10 })
     * 
     * // Only select the `rutafoto`
     * const fotousuarioWithRutafotoOnly = await prisma.fotousuario.findMany({ select: { rutafoto: true } })
     * 
    **/
    findMany<T extends fotousuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fotousuario.
     * @param {fotousuarioCreateArgs} args - Arguments to create a Fotousuario.
     * @example
     * // Create one Fotousuario
     * const Fotousuario = await prisma.fotousuario.create({
     *   data: {
     *     // ... data to create a Fotousuario
     *   }
     * })
     * 
    **/
    create<T extends fotousuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioCreateArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fotousuarios.
     *     @param {fotousuarioCreateManyArgs} args - Arguments to create many Fotousuarios.
     *     @example
     *     // Create many Fotousuarios
     *     const fotousuario = await prisma.fotousuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends fotousuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fotousuario.
     * @param {fotousuarioDeleteArgs} args - Arguments to delete one Fotousuario.
     * @example
     * // Delete one Fotousuario
     * const Fotousuario = await prisma.fotousuario.delete({
     *   where: {
     *     // ... filter to delete one Fotousuario
     *   }
     * })
     * 
    **/
    delete<T extends fotousuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioDeleteArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fotousuario.
     * @param {fotousuarioUpdateArgs} args - Arguments to update one Fotousuario.
     * @example
     * // Update one Fotousuario
     * const fotousuario = await prisma.fotousuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends fotousuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioUpdateArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fotousuarios.
     * @param {fotousuarioDeleteManyArgs} args - Arguments to filter Fotousuarios to delete.
     * @example
     * // Delete a few Fotousuarios
     * const { count } = await prisma.fotousuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends fotousuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fotousuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fotousuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fotousuarios
     * const fotousuario = await prisma.fotousuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends fotousuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fotousuario.
     * @param {fotousuarioUpsertArgs} args - Arguments to update or create a Fotousuario.
     * @example
     * // Update or create a Fotousuario
     * const fotousuario = await prisma.fotousuario.upsert({
     *   create: {
     *     // ... data to create a Fotousuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fotousuario we want to update
     *   }
     * })
    **/
    upsert<T extends fotousuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, fotousuarioUpsertArgs<ExtArgs>>
    ): Prisma__fotousuarioClient<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fotousuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioCountArgs} args - Arguments to filter Fotousuarios to count.
     * @example
     * // Count the number of Fotousuarios
     * const count = await prisma.fotousuario.count({
     *   where: {
     *     // ... the filter for the Fotousuarios we want to count
     *   }
     * })
    **/
    count<T extends fotousuarioCountArgs>(
      args?: Subset<T, fotousuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FotousuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fotousuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotousuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FotousuarioAggregateArgs>(args: Subset<T, FotousuarioAggregateArgs>): Prisma.PrismaPromise<GetFotousuarioAggregateType<T>>

    /**
     * Group by Fotousuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fotousuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fotousuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fotousuarioGroupByArgs['orderBy'] }
        : { orderBy?: fotousuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fotousuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFotousuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fotousuario model
   */
  readonly fields: fotousuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fotousuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fotousuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    multimedia<T extends multimediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, multimediaDefaultArgs<ExtArgs>>): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the fotousuario model
   */ 
  interface fotousuarioFieldRefs {
    readonly rutafoto: FieldRef<"fotousuario", 'String'>
    readonly idusuario: FieldRef<"fotousuario", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * fotousuario findUnique
   */
  export type fotousuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter, which fotousuario to fetch.
     */
    where: fotousuarioWhereUniqueInput
  }


  /**
   * fotousuario findUniqueOrThrow
   */
  export type fotousuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter, which fotousuario to fetch.
     */
    where: fotousuarioWhereUniqueInput
  }


  /**
   * fotousuario findFirst
   */
  export type fotousuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter, which fotousuario to fetch.
     */
    where?: fotousuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fotousuarios to fetch.
     */
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fotousuarios.
     */
    cursor?: fotousuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fotousuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fotousuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fotousuarios.
     */
    distinct?: FotousuarioScalarFieldEnum | FotousuarioScalarFieldEnum[]
  }


  /**
   * fotousuario findFirstOrThrow
   */
  export type fotousuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter, which fotousuario to fetch.
     */
    where?: fotousuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fotousuarios to fetch.
     */
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fotousuarios.
     */
    cursor?: fotousuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fotousuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fotousuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fotousuarios.
     */
    distinct?: FotousuarioScalarFieldEnum | FotousuarioScalarFieldEnum[]
  }


  /**
   * fotousuario findMany
   */
  export type fotousuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter, which fotousuarios to fetch.
     */
    where?: fotousuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fotousuarios to fetch.
     */
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fotousuarios.
     */
    cursor?: fotousuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fotousuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fotousuarios.
     */
    skip?: number
    distinct?: FotousuarioScalarFieldEnum | FotousuarioScalarFieldEnum[]
  }


  /**
   * fotousuario create
   */
  export type fotousuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a fotousuario.
     */
    data: XOR<fotousuarioCreateInput, fotousuarioUncheckedCreateInput>
  }


  /**
   * fotousuario createMany
   */
  export type fotousuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fotousuarios.
     */
    data: fotousuarioCreateManyInput | fotousuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * fotousuario update
   */
  export type fotousuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a fotousuario.
     */
    data: XOR<fotousuarioUpdateInput, fotousuarioUncheckedUpdateInput>
    /**
     * Choose, which fotousuario to update.
     */
    where: fotousuarioWhereUniqueInput
  }


  /**
   * fotousuario updateMany
   */
  export type fotousuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fotousuarios.
     */
    data: XOR<fotousuarioUpdateManyMutationInput, fotousuarioUncheckedUpdateManyInput>
    /**
     * Filter which fotousuarios to update
     */
    where?: fotousuarioWhereInput
  }


  /**
   * fotousuario upsert
   */
  export type fotousuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the fotousuario to update in case it exists.
     */
    where: fotousuarioWhereUniqueInput
    /**
     * In case the fotousuario found by the `where` argument doesn't exist, create a new fotousuario with this data.
     */
    create: XOR<fotousuarioCreateInput, fotousuarioUncheckedCreateInput>
    /**
     * In case the fotousuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fotousuarioUpdateInput, fotousuarioUncheckedUpdateInput>
  }


  /**
   * fotousuario delete
   */
  export type fotousuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    /**
     * Filter which fotousuario to delete.
     */
    where: fotousuarioWhereUniqueInput
  }


  /**
   * fotousuario deleteMany
   */
  export type fotousuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fotousuarios to delete
     */
    where?: fotousuarioWhereInput
  }


  /**
   * fotousuario without action
   */
  export type fotousuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
  }



  /**
   * Model localidad
   */

  export type AggregateLocalidad = {
    _count: LocalidadCountAggregateOutputType | null
    _avg: LocalidadAvgAggregateOutputType | null
    _sum: LocalidadSumAggregateOutputType | null
    _min: LocalidadMinAggregateOutputType | null
    _max: LocalidadMaxAggregateOutputType | null
  }

  export type LocalidadAvgAggregateOutputType = {
    id: number | null
  }

  export type LocalidadSumAggregateOutputType = {
    id: number | null
  }

  export type LocalidadMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type LocalidadMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type LocalidadCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type LocalidadAvgAggregateInputType = {
    id?: true
  }

  export type LocalidadSumAggregateInputType = {
    id?: true
  }

  export type LocalidadMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type LocalidadMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type LocalidadCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type LocalidadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which localidad to aggregate.
     */
    where?: localidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of localidads to fetch.
     */
    orderBy?: localidadOrderByWithRelationInput | localidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: localidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned localidads
    **/
    _count?: true | LocalidadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocalidadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocalidadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocalidadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocalidadMaxAggregateInputType
  }

  export type GetLocalidadAggregateType<T extends LocalidadAggregateArgs> = {
        [P in keyof T & keyof AggregateLocalidad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocalidad[P]>
      : GetScalarType<T[P], AggregateLocalidad[P]>
  }




  export type localidadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: localidadWhereInput
    orderBy?: localidadOrderByWithAggregationInput | localidadOrderByWithAggregationInput[]
    by: LocalidadScalarFieldEnum[] | LocalidadScalarFieldEnum
    having?: localidadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocalidadCountAggregateInputType | true
    _avg?: LocalidadAvgAggregateInputType
    _sum?: LocalidadSumAggregateInputType
    _min?: LocalidadMinAggregateInputType
    _max?: LocalidadMaxAggregateInputType
  }

  export type LocalidadGroupByOutputType = {
    id: number
    nombre: string
    _count: LocalidadCountAggregateOutputType | null
    _avg: LocalidadAvgAggregateOutputType | null
    _sum: LocalidadSumAggregateOutputType | null
    _min: LocalidadMinAggregateOutputType | null
    _max: LocalidadMaxAggregateOutputType | null
  }

  type GetLocalidadGroupByPayload<T extends localidadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocalidadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocalidadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocalidadGroupByOutputType[P]>
            : GetScalarType<T[P], LocalidadGroupByOutputType[P]>
        }
      >
    >


  export type localidadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    usuario?: boolean | localidad$usuarioArgs<ExtArgs>
    _count?: boolean | LocalidadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["localidad"]>

  export type localidadSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type localidadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | localidad$usuarioArgs<ExtArgs>
    _count?: boolean | LocalidadCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $localidadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "localidad"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["localidad"]>
    composites: {}
  }


  type localidadGetPayload<S extends boolean | null | undefined | localidadDefaultArgs> = $Result.GetResult<Prisma.$localidadPayload, S>

  type localidadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<localidadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocalidadCountAggregateInputType | true
    }

  export interface localidadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['localidad'], meta: { name: 'localidad' } }
    /**
     * Find zero or one Localidad that matches the filter.
     * @param {localidadFindUniqueArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends localidadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, localidadFindUniqueArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Localidad that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {localidadFindUniqueOrThrowArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends localidadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Localidad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadFindFirstArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends localidadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadFindFirstArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Localidad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadFindFirstOrThrowArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends localidadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Localidads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Localidads
     * const localidads = await prisma.localidad.findMany()
     * 
     * // Get first 10 Localidads
     * const localidads = await prisma.localidad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const localidadWithIdOnly = await prisma.localidad.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends localidadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Localidad.
     * @param {localidadCreateArgs} args - Arguments to create a Localidad.
     * @example
     * // Create one Localidad
     * const Localidad = await prisma.localidad.create({
     *   data: {
     *     // ... data to create a Localidad
     *   }
     * })
     * 
    **/
    create<T extends localidadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, localidadCreateArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Localidads.
     *     @param {localidadCreateManyArgs} args - Arguments to create many Localidads.
     *     @example
     *     // Create many Localidads
     *     const localidad = await prisma.localidad.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends localidadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Localidad.
     * @param {localidadDeleteArgs} args - Arguments to delete one Localidad.
     * @example
     * // Delete one Localidad
     * const Localidad = await prisma.localidad.delete({
     *   where: {
     *     // ... filter to delete one Localidad
     *   }
     * })
     * 
    **/
    delete<T extends localidadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, localidadDeleteArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Localidad.
     * @param {localidadUpdateArgs} args - Arguments to update one Localidad.
     * @example
     * // Update one Localidad
     * const localidad = await prisma.localidad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends localidadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, localidadUpdateArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Localidads.
     * @param {localidadDeleteManyArgs} args - Arguments to filter Localidads to delete.
     * @example
     * // Delete a few Localidads
     * const { count } = await prisma.localidad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends localidadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, localidadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Localidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Localidads
     * const localidad = await prisma.localidad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends localidadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, localidadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Localidad.
     * @param {localidadUpsertArgs} args - Arguments to update or create a Localidad.
     * @example
     * // Update or create a Localidad
     * const localidad = await prisma.localidad.upsert({
     *   create: {
     *     // ... data to create a Localidad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Localidad we want to update
     *   }
     * })
    **/
    upsert<T extends localidadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, localidadUpsertArgs<ExtArgs>>
    ): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Localidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadCountArgs} args - Arguments to filter Localidads to count.
     * @example
     * // Count the number of Localidads
     * const count = await prisma.localidad.count({
     *   where: {
     *     // ... the filter for the Localidads we want to count
     *   }
     * })
    **/
    count<T extends localidadCountArgs>(
      args?: Subset<T, localidadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocalidadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Localidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocalidadAggregateArgs>(args: Subset<T, LocalidadAggregateArgs>): Prisma.PrismaPromise<GetLocalidadAggregateType<T>>

    /**
     * Group by Localidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {localidadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends localidadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: localidadGroupByArgs['orderBy'] }
        : { orderBy?: localidadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, localidadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocalidadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the localidad model
   */
  readonly fields: localidadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for localidad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__localidadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends localidad$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, localidad$usuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the localidad model
   */ 
  interface localidadFieldRefs {
    readonly id: FieldRef<"localidad", 'Int'>
    readonly nombre: FieldRef<"localidad", 'String'>
  }
    

  // Custom InputTypes

  /**
   * localidad findUnique
   */
  export type localidadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter, which localidad to fetch.
     */
    where: localidadWhereUniqueInput
  }


  /**
   * localidad findUniqueOrThrow
   */
  export type localidadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter, which localidad to fetch.
     */
    where: localidadWhereUniqueInput
  }


  /**
   * localidad findFirst
   */
  export type localidadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter, which localidad to fetch.
     */
    where?: localidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of localidads to fetch.
     */
    orderBy?: localidadOrderByWithRelationInput | localidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for localidads.
     */
    cursor?: localidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of localidads.
     */
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * localidad findFirstOrThrow
   */
  export type localidadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter, which localidad to fetch.
     */
    where?: localidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of localidads to fetch.
     */
    orderBy?: localidadOrderByWithRelationInput | localidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for localidads.
     */
    cursor?: localidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of localidads.
     */
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * localidad findMany
   */
  export type localidadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter, which localidads to fetch.
     */
    where?: localidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of localidads to fetch.
     */
    orderBy?: localidadOrderByWithRelationInput | localidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing localidads.
     */
    cursor?: localidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` localidads.
     */
    skip?: number
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * localidad create
   */
  export type localidadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * The data needed to create a localidad.
     */
    data: XOR<localidadCreateInput, localidadUncheckedCreateInput>
  }


  /**
   * localidad createMany
   */
  export type localidadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many localidads.
     */
    data: localidadCreateManyInput | localidadCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * localidad update
   */
  export type localidadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * The data needed to update a localidad.
     */
    data: XOR<localidadUpdateInput, localidadUncheckedUpdateInput>
    /**
     * Choose, which localidad to update.
     */
    where: localidadWhereUniqueInput
  }


  /**
   * localidad updateMany
   */
  export type localidadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update localidads.
     */
    data: XOR<localidadUpdateManyMutationInput, localidadUncheckedUpdateManyInput>
    /**
     * Filter which localidads to update
     */
    where?: localidadWhereInput
  }


  /**
   * localidad upsert
   */
  export type localidadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * The filter to search for the localidad to update in case it exists.
     */
    where: localidadWhereUniqueInput
    /**
     * In case the localidad found by the `where` argument doesn't exist, create a new localidad with this data.
     */
    create: XOR<localidadCreateInput, localidadUncheckedCreateInput>
    /**
     * In case the localidad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<localidadUpdateInput, localidadUncheckedUpdateInput>
  }


  /**
   * localidad delete
   */
  export type localidadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
    /**
     * Filter which localidad to delete.
     */
    where: localidadWhereUniqueInput
  }


  /**
   * localidad deleteMany
   */
  export type localidadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which localidads to delete
     */
    where?: localidadWhereInput
  }


  /**
   * localidad.usuario
   */
  export type localidad$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    cursor?: usuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * localidad without action
   */
  export type localidadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the localidad
     */
    select?: localidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: localidadInclude<ExtArgs> | null
  }



  /**
   * Model match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    idusuario1: number | null
    idusuario2: number | null
  }

  export type MatchSumAggregateOutputType = {
    idusuario1: number | null
    idusuario2: number | null
  }

  export type MatchMinAggregateOutputType = {
    idusuario1: number | null
    idusuario2: number | null
  }

  export type MatchMaxAggregateOutputType = {
    idusuario1: number | null
    idusuario2: number | null
  }

  export type MatchCountAggregateOutputType = {
    idusuario1: number
    idusuario2: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    idusuario1?: true
    idusuario2?: true
  }

  export type MatchSumAggregateInputType = {
    idusuario1?: true
    idusuario2?: true
  }

  export type MatchMinAggregateInputType = {
    idusuario1?: true
    idusuario2?: true
  }

  export type MatchMaxAggregateInputType = {
    idusuario1?: true
    idusuario2?: true
  }

  export type MatchCountAggregateInputType = {
    idusuario1?: true
    idusuario2?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which match to aggregate.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type matchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matchWhereInput
    orderBy?: matchOrderByWithAggregationInput | matchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: matchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    idusuario1: number
    idusuario2: number
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends matchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type matchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idusuario1?: boolean
    idusuario2?: boolean
    usuario_match_idusuario1Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    usuario_match_idusuario2Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type matchSelectScalar = {
    idusuario1?: boolean
    idusuario2?: boolean
  }

  export type matchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_match_idusuario1Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    usuario_match_idusuario2Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $matchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "match"
    objects: {
      usuario_match_idusuario1Tousuario: Prisma.$usuarioPayload<ExtArgs>
      usuario_match_idusuario2Tousuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idusuario1: number
      idusuario2: number
    }, ExtArgs["result"]["match"]>
    composites: {}
  }


  type matchGetPayload<S extends boolean | null | undefined | matchDefaultArgs> = $Result.GetResult<Prisma.$matchPayload, S>

  type matchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<matchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface matchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['match'], meta: { name: 'match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {matchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends matchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, matchFindUniqueArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {matchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends matchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends matchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindFirstArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends matchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `idusuario1`
     * const matchWithIdusuario1Only = await prisma.match.findMany({ select: { idusuario1: true } })
     * 
    **/
    findMany<T extends matchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Match.
     * @param {matchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends matchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, matchCreateArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Matches.
     *     @param {matchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends matchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {matchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends matchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, matchDeleteArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Match.
     * @param {matchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends matchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpdateArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {matchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends matchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, matchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends matchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {matchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends matchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, matchUpsertArgs<ExtArgs>>
    ): Prisma__matchClient<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends matchCountArgs>(
      args?: Subset<T, matchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends matchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: matchGroupByArgs['orderBy'] }
        : { orderBy?: matchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, matchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the match model
   */
  readonly fields: matchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__matchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario_match_idusuario1Tousuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuario_match_idusuario2Tousuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the match model
   */ 
  interface matchFieldRefs {
    readonly idusuario1: FieldRef<"match", 'Int'>
    readonly idusuario2: FieldRef<"match", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * match findUnique
   */
  export type matchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match findUniqueOrThrow
   */
  export type matchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match findFirst
   */
  export type matchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match findFirstOrThrow
   */
  export type matchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which match to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match findMany
   */
  export type matchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter, which matches to fetch.
     */
    where?: matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matches to fetch.
     */
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing matches.
     */
    cursor?: matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * match create
   */
  export type matchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The data needed to create a match.
     */
    data: XOR<matchCreateInput, matchUncheckedCreateInput>
  }


  /**
   * match createMany
   */
  export type matchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many matches.
     */
    data: matchCreateManyInput | matchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * match update
   */
  export type matchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The data needed to update a match.
     */
    data: XOR<matchUpdateInput, matchUncheckedUpdateInput>
    /**
     * Choose, which match to update.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match updateMany
   */
  export type matchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update matches.
     */
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyInput>
    /**
     * Filter which matches to update
     */
    where?: matchWhereInput
  }


  /**
   * match upsert
   */
  export type matchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * The filter to search for the match to update in case it exists.
     */
    where: matchWhereUniqueInput
    /**
     * In case the match found by the `where` argument doesn't exist, create a new match with this data.
     */
    create: XOR<matchCreateInput, matchUncheckedCreateInput>
    /**
     * In case the match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<matchUpdateInput, matchUncheckedUpdateInput>
  }


  /**
   * match delete
   */
  export type matchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    /**
     * Filter which match to delete.
     */
    where: matchWhereUniqueInput
  }


  /**
   * match deleteMany
   */
  export type matchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which matches to delete
     */
    where?: matchWhereInput
  }


  /**
   * match without action
   */
  export type matchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
  }



  /**
   * Model mensaje
   */

  export type AggregateMensaje = {
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  export type MensajeAvgAggregateOutputType = {
    id: number | null
    idsala: number | null
    idusuario: number | null
  }

  export type MensajeSumAggregateOutputType = {
    id: number | null
    idsala: number | null
    idusuario: number | null
  }

  export type MensajeMinAggregateOutputType = {
    id: number | null
    idsala: number | null
    idusuario: number | null
    texto: string | null
    fechahora: Date | null
    rutamultimedia: string | null
  }

  export type MensajeMaxAggregateOutputType = {
    id: number | null
    idsala: number | null
    idusuario: number | null
    texto: string | null
    fechahora: Date | null
    rutamultimedia: string | null
  }

  export type MensajeCountAggregateOutputType = {
    id: number
    idsala: number
    idusuario: number
    texto: number
    fechahora: number
    rutamultimedia: number
    _all: number
  }


  export type MensajeAvgAggregateInputType = {
    id?: true
    idsala?: true
    idusuario?: true
  }

  export type MensajeSumAggregateInputType = {
    id?: true
    idsala?: true
    idusuario?: true
  }

  export type MensajeMinAggregateInputType = {
    id?: true
    idsala?: true
    idusuario?: true
    texto?: true
    fechahora?: true
    rutamultimedia?: true
  }

  export type MensajeMaxAggregateInputType = {
    id?: true
    idsala?: true
    idusuario?: true
    texto?: true
    fechahora?: true
    rutamultimedia?: true
  }

  export type MensajeCountAggregateInputType = {
    id?: true
    idsala?: true
    idusuario?: true
    texto?: true
    fechahora?: true
    rutamultimedia?: true
    _all?: true
  }

  export type MensajeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensaje to aggregate.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mensajes
    **/
    _count?: true | MensajeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensajeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensajeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensajeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensajeMaxAggregateInputType
  }

  export type GetMensajeAggregateType<T extends MensajeAggregateArgs> = {
        [P in keyof T & keyof AggregateMensaje]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensaje[P]>
      : GetScalarType<T[P], AggregateMensaje[P]>
  }




  export type mensajeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithAggregationInput | mensajeOrderByWithAggregationInput[]
    by: MensajeScalarFieldEnum[] | MensajeScalarFieldEnum
    having?: mensajeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensajeCountAggregateInputType | true
    _avg?: MensajeAvgAggregateInputType
    _sum?: MensajeSumAggregateInputType
    _min?: MensajeMinAggregateInputType
    _max?: MensajeMaxAggregateInputType
  }

  export type MensajeGroupByOutputType = {
    id: number
    idsala: number
    idusuario: number
    texto: string
    fechahora: Date
    rutamultimedia: string | null
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  type GetMensajeGroupByPayload<T extends mensajeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensajeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensajeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensajeGroupByOutputType[P]>
            : GetScalarType<T[P], MensajeGroupByOutputType[P]>
        }
      >
    >


  export type mensajeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idsala?: boolean
    idusuario?: boolean
    texto?: boolean
    fechahora?: boolean
    rutamultimedia?: boolean
    participa?: boolean | participaDefaultArgs<ExtArgs>
    multimedia?: boolean | mensaje$multimediaArgs<ExtArgs>
  }, ExtArgs["result"]["mensaje"]>

  export type mensajeSelectScalar = {
    id?: boolean
    idsala?: boolean
    idusuario?: boolean
    texto?: boolean
    fechahora?: boolean
    rutamultimedia?: boolean
  }

  export type mensajeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participa?: boolean | participaDefaultArgs<ExtArgs>
    multimedia?: boolean | mensaje$multimediaArgs<ExtArgs>
  }


  export type $mensajePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mensaje"
    objects: {
      participa: Prisma.$participaPayload<ExtArgs>
      multimedia: Prisma.$multimediaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idsala: number
      idusuario: number
      texto: string
      fechahora: Date
      rutamultimedia: string | null
    }, ExtArgs["result"]["mensaje"]>
    composites: {}
  }


  type mensajeGetPayload<S extends boolean | null | undefined | mensajeDefaultArgs> = $Result.GetResult<Prisma.$mensajePayload, S>

  type mensajeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<mensajeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensajeCountAggregateInputType | true
    }

  export interface mensajeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mensaje'], meta: { name: 'mensaje' } }
    /**
     * Find zero or one Mensaje that matches the filter.
     * @param {mensajeFindUniqueArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mensajeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeFindUniqueArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mensaje that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {mensajeFindUniqueOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends mensajeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mensaje that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindFirstArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mensajeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindFirstArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mensaje that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindFirstOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends mensajeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mensajes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensajes
     * const mensajes = await prisma.mensaje.findMany()
     * 
     * // Get first 10 Mensajes
     * const mensajes = await prisma.mensaje.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensajeWithIdOnly = await prisma.mensaje.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mensajeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mensaje.
     * @param {mensajeCreateArgs} args - Arguments to create a Mensaje.
     * @example
     * // Create one Mensaje
     * const Mensaje = await prisma.mensaje.create({
     *   data: {
     *     // ... data to create a Mensaje
     *   }
     * })
     * 
    **/
    create<T extends mensajeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeCreateArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mensajes.
     *     @param {mensajeCreateManyArgs} args - Arguments to create many Mensajes.
     *     @example
     *     // Create many Mensajes
     *     const mensaje = await prisma.mensaje.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mensajeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mensaje.
     * @param {mensajeDeleteArgs} args - Arguments to delete one Mensaje.
     * @example
     * // Delete one Mensaje
     * const Mensaje = await prisma.mensaje.delete({
     *   where: {
     *     // ... filter to delete one Mensaje
     *   }
     * })
     * 
    **/
    delete<T extends mensajeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeDeleteArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mensaje.
     * @param {mensajeUpdateArgs} args - Arguments to update one Mensaje.
     * @example
     * // Update one Mensaje
     * const mensaje = await prisma.mensaje.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mensajeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpdateArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mensajes.
     * @param {mensajeDeleteManyArgs} args - Arguments to filter Mensajes to delete.
     * @example
     * // Delete a few Mensajes
     * const { count } = await prisma.mensaje.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mensajeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensajes
     * const mensaje = await prisma.mensaje.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mensajeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensaje.
     * @param {mensajeUpsertArgs} args - Arguments to update or create a Mensaje.
     * @example
     * // Update or create a Mensaje
     * const mensaje = await prisma.mensaje.upsert({
     *   create: {
     *     // ... data to create a Mensaje
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensaje we want to update
     *   }
     * })
    **/
    upsert<T extends mensajeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpsertArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeCountArgs} args - Arguments to filter Mensajes to count.
     * @example
     * // Count the number of Mensajes
     * const count = await prisma.mensaje.count({
     *   where: {
     *     // ... the filter for the Mensajes we want to count
     *   }
     * })
    **/
    count<T extends mensajeCountArgs>(
      args?: Subset<T, mensajeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensajeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensajeAggregateArgs>(args: Subset<T, MensajeAggregateArgs>): Prisma.PrismaPromise<GetMensajeAggregateType<T>>

    /**
     * Group by Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mensajeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mensajeGroupByArgs['orderBy'] }
        : { orderBy?: mensajeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mensajeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensajeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mensaje model
   */
  readonly fields: mensajeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mensaje.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mensajeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    participa<T extends participaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, participaDefaultArgs<ExtArgs>>): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    multimedia<T extends mensaje$multimediaArgs<ExtArgs> = {}>(args?: Subset<T, mensaje$multimediaArgs<ExtArgs>>): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the mensaje model
   */ 
  interface mensajeFieldRefs {
    readonly id: FieldRef<"mensaje", 'Int'>
    readonly idsala: FieldRef<"mensaje", 'Int'>
    readonly idusuario: FieldRef<"mensaje", 'Int'>
    readonly texto: FieldRef<"mensaje", 'String'>
    readonly fechahora: FieldRef<"mensaje", 'DateTime'>
    readonly rutamultimedia: FieldRef<"mensaje", 'String'>
  }
    

  // Custom InputTypes

  /**
   * mensaje findUnique
   */
  export type mensajeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje findUniqueOrThrow
   */
  export type mensajeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje findFirst
   */
  export type mensajeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensajes.
     */
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje findFirstOrThrow
   */
  export type mensajeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensajes.
     */
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje findMany
   */
  export type mensajeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensajes to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje create
   */
  export type mensajeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The data needed to create a mensaje.
     */
    data: XOR<mensajeCreateInput, mensajeUncheckedCreateInput>
  }


  /**
   * mensaje createMany
   */
  export type mensajeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mensajes.
     */
    data: mensajeCreateManyInput | mensajeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * mensaje update
   */
  export type mensajeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The data needed to update a mensaje.
     */
    data: XOR<mensajeUpdateInput, mensajeUncheckedUpdateInput>
    /**
     * Choose, which mensaje to update.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje updateMany
   */
  export type mensajeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mensajes.
     */
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyInput>
    /**
     * Filter which mensajes to update
     */
    where?: mensajeWhereInput
  }


  /**
   * mensaje upsert
   */
  export type mensajeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The filter to search for the mensaje to update in case it exists.
     */
    where: mensajeWhereUniqueInput
    /**
     * In case the mensaje found by the `where` argument doesn't exist, create a new mensaje with this data.
     */
    create: XOR<mensajeCreateInput, mensajeUncheckedCreateInput>
    /**
     * In case the mensaje was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mensajeUpdateInput, mensajeUncheckedUpdateInput>
  }


  /**
   * mensaje delete
   */
  export type mensajeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter which mensaje to delete.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje deleteMany
   */
  export type mensajeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensajes to delete
     */
    where?: mensajeWhereInput
  }


  /**
   * mensaje.multimedia
   */
  export type mensaje$multimediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    where?: multimediaWhereInput
  }


  /**
   * mensaje without action
   */
  export type mensajeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
  }



  /**
   * Model multimedia
   */

  export type AggregateMultimedia = {
    _count: MultimediaCountAggregateOutputType | null
    _min: MultimediaMinAggregateOutputType | null
    _max: MultimediaMaxAggregateOutputType | null
  }

  export type MultimediaMinAggregateOutputType = {
    ruta: string | null
    tipomultimedia: string | null
  }

  export type MultimediaMaxAggregateOutputType = {
    ruta: string | null
    tipomultimedia: string | null
  }

  export type MultimediaCountAggregateOutputType = {
    ruta: number
    tipomultimedia: number
    _all: number
  }


  export type MultimediaMinAggregateInputType = {
    ruta?: true
    tipomultimedia?: true
  }

  export type MultimediaMaxAggregateInputType = {
    ruta?: true
    tipomultimedia?: true
  }

  export type MultimediaCountAggregateInputType = {
    ruta?: true
    tipomultimedia?: true
    _all?: true
  }

  export type MultimediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which multimedia to aggregate.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned multimedias
    **/
    _count?: true | MultimediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MultimediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MultimediaMaxAggregateInputType
  }

  export type GetMultimediaAggregateType<T extends MultimediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMultimedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMultimedia[P]>
      : GetScalarType<T[P], AggregateMultimedia[P]>
  }




  export type multimediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: multimediaWhereInput
    orderBy?: multimediaOrderByWithAggregationInput | multimediaOrderByWithAggregationInput[]
    by: MultimediaScalarFieldEnum[] | MultimediaScalarFieldEnum
    having?: multimediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MultimediaCountAggregateInputType | true
    _min?: MultimediaMinAggregateInputType
    _max?: MultimediaMaxAggregateInputType
  }

  export type MultimediaGroupByOutputType = {
    ruta: string
    tipomultimedia: string
    _count: MultimediaCountAggregateOutputType | null
    _min: MultimediaMinAggregateOutputType | null
    _max: MultimediaMaxAggregateOutputType | null
  }

  type GetMultimediaGroupByPayload<T extends multimediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MultimediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MultimediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MultimediaGroupByOutputType[P]>
            : GetScalarType<T[P], MultimediaGroupByOutputType[P]>
        }
      >
    >


  export type multimediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ruta?: boolean
    tipomultimedia?: boolean
    fotousuario?: boolean | multimedia$fotousuarioArgs<ExtArgs>
    mensaje?: boolean | multimedia$mensajeArgs<ExtArgs>
    usuario?: boolean | multimedia$usuarioArgs<ExtArgs>
    _count?: boolean | MultimediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["multimedia"]>

  export type multimediaSelectScalar = {
    ruta?: boolean
    tipomultimedia?: boolean
  }

  export type multimediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotousuario?: boolean | multimedia$fotousuarioArgs<ExtArgs>
    mensaje?: boolean | multimedia$mensajeArgs<ExtArgs>
    usuario?: boolean | multimedia$usuarioArgs<ExtArgs>
    _count?: boolean | MultimediaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $multimediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "multimedia"
    objects: {
      fotousuario: Prisma.$fotousuarioPayload<ExtArgs>[]
      mensaje: Prisma.$mensajePayload<ExtArgs>[]
      usuario: Prisma.$usuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ruta: string
      tipomultimedia: string
    }, ExtArgs["result"]["multimedia"]>
    composites: {}
  }


  type multimediaGetPayload<S extends boolean | null | undefined | multimediaDefaultArgs> = $Result.GetResult<Prisma.$multimediaPayload, S>

  type multimediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<multimediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MultimediaCountAggregateInputType | true
    }

  export interface multimediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['multimedia'], meta: { name: 'multimedia' } }
    /**
     * Find zero or one Multimedia that matches the filter.
     * @param {multimediaFindUniqueArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends multimediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaFindUniqueArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Multimedia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {multimediaFindUniqueOrThrowArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends multimediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Multimedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindFirstArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends multimediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindFirstArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Multimedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindFirstOrThrowArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends multimediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Multimedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Multimedias
     * const multimedias = await prisma.multimedia.findMany()
     * 
     * // Get first 10 Multimedias
     * const multimedias = await prisma.multimedia.findMany({ take: 10 })
     * 
     * // Only select the `ruta`
     * const multimediaWithRutaOnly = await prisma.multimedia.findMany({ select: { ruta: true } })
     * 
    **/
    findMany<T extends multimediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Multimedia.
     * @param {multimediaCreateArgs} args - Arguments to create a Multimedia.
     * @example
     * // Create one Multimedia
     * const Multimedia = await prisma.multimedia.create({
     *   data: {
     *     // ... data to create a Multimedia
     *   }
     * })
     * 
    **/
    create<T extends multimediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaCreateArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Multimedias.
     *     @param {multimediaCreateManyArgs} args - Arguments to create many Multimedias.
     *     @example
     *     // Create many Multimedias
     *     const multimedia = await prisma.multimedia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends multimediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Multimedia.
     * @param {multimediaDeleteArgs} args - Arguments to delete one Multimedia.
     * @example
     * // Delete one Multimedia
     * const Multimedia = await prisma.multimedia.delete({
     *   where: {
     *     // ... filter to delete one Multimedia
     *   }
     * })
     * 
    **/
    delete<T extends multimediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaDeleteArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Multimedia.
     * @param {multimediaUpdateArgs} args - Arguments to update one Multimedia.
     * @example
     * // Update one Multimedia
     * const multimedia = await prisma.multimedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends multimediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpdateArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Multimedias.
     * @param {multimediaDeleteManyArgs} args - Arguments to filter Multimedias to delete.
     * @example
     * // Delete a few Multimedias
     * const { count } = await prisma.multimedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends multimediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Multimedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Multimedias
     * const multimedia = await prisma.multimedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends multimediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Multimedia.
     * @param {multimediaUpsertArgs} args - Arguments to update or create a Multimedia.
     * @example
     * // Update or create a Multimedia
     * const multimedia = await prisma.multimedia.upsert({
     *   create: {
     *     // ... data to create a Multimedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Multimedia we want to update
     *   }
     * })
    **/
    upsert<T extends multimediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpsertArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Multimedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaCountArgs} args - Arguments to filter Multimedias to count.
     * @example
     * // Count the number of Multimedias
     * const count = await prisma.multimedia.count({
     *   where: {
     *     // ... the filter for the Multimedias we want to count
     *   }
     * })
    **/
    count<T extends multimediaCountArgs>(
      args?: Subset<T, multimediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MultimediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Multimedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MultimediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MultimediaAggregateArgs>(args: Subset<T, MultimediaAggregateArgs>): Prisma.PrismaPromise<GetMultimediaAggregateType<T>>

    /**
     * Group by Multimedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends multimediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: multimediaGroupByArgs['orderBy'] }
        : { orderBy?: multimediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, multimediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMultimediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the multimedia model
   */
  readonly fields: multimediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for multimedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__multimediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fotousuario<T extends multimedia$fotousuarioArgs<ExtArgs> = {}>(args?: Subset<T, multimedia$fotousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    mensaje<T extends multimedia$mensajeArgs<ExtArgs> = {}>(args?: Subset<T, multimedia$mensajeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'> | Null>;

    usuario<T extends multimedia$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, multimedia$usuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the multimedia model
   */ 
  interface multimediaFieldRefs {
    readonly ruta: FieldRef<"multimedia", 'String'>
    readonly tipomultimedia: FieldRef<"multimedia", 'String'>
  }
    

  // Custom InputTypes

  /**
   * multimedia findUnique
   */
  export type multimediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia findUniqueOrThrow
   */
  export type multimediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia findFirst
   */
  export type multimediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of multimedias.
     */
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia findFirstOrThrow
   */
  export type multimediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of multimedias.
     */
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia findMany
   */
  export type multimediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedias to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia create
   */
  export type multimediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The data needed to create a multimedia.
     */
    data: XOR<multimediaCreateInput, multimediaUncheckedCreateInput>
  }


  /**
   * multimedia createMany
   */
  export type multimediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many multimedias.
     */
    data: multimediaCreateManyInput | multimediaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * multimedia update
   */
  export type multimediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The data needed to update a multimedia.
     */
    data: XOR<multimediaUpdateInput, multimediaUncheckedUpdateInput>
    /**
     * Choose, which multimedia to update.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia updateMany
   */
  export type multimediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update multimedias.
     */
    data: XOR<multimediaUpdateManyMutationInput, multimediaUncheckedUpdateManyInput>
    /**
     * Filter which multimedias to update
     */
    where?: multimediaWhereInput
  }


  /**
   * multimedia upsert
   */
  export type multimediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The filter to search for the multimedia to update in case it exists.
     */
    where: multimediaWhereUniqueInput
    /**
     * In case the multimedia found by the `where` argument doesn't exist, create a new multimedia with this data.
     */
    create: XOR<multimediaCreateInput, multimediaUncheckedCreateInput>
    /**
     * In case the multimedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<multimediaUpdateInput, multimediaUncheckedUpdateInput>
  }


  /**
   * multimedia delete
   */
  export type multimediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter which multimedia to delete.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia deleteMany
   */
  export type multimediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which multimedias to delete
     */
    where?: multimediaWhereInput
  }


  /**
   * multimedia.fotousuario
   */
  export type multimedia$fotousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    where?: fotousuarioWhereInput
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    cursor?: fotousuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FotousuarioScalarFieldEnum | FotousuarioScalarFieldEnum[]
  }


  /**
   * multimedia.mensaje
   */
  export type multimedia$mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    cursor?: mensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * multimedia.usuario
   */
  export type multimedia$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    cursor?: usuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * multimedia without action
   */
  export type multimediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
  }



  /**
   * Model participa
   */

  export type AggregateParticipa = {
    _count: ParticipaCountAggregateOutputType | null
    _avg: ParticipaAvgAggregateOutputType | null
    _sum: ParticipaSumAggregateOutputType | null
    _min: ParticipaMinAggregateOutputType | null
    _max: ParticipaMaxAggregateOutputType | null
  }

  export type ParticipaAvgAggregateOutputType = {
    idsala: number | null
    idusuario: number | null
  }

  export type ParticipaSumAggregateOutputType = {
    idsala: number | null
    idusuario: number | null
  }

  export type ParticipaMinAggregateOutputType = {
    idsala: number | null
    idusuario: number | null
    estado: string | null
  }

  export type ParticipaMaxAggregateOutputType = {
    idsala: number | null
    idusuario: number | null
    estado: string | null
  }

  export type ParticipaCountAggregateOutputType = {
    idsala: number
    idusuario: number
    estado: number
    _all: number
  }


  export type ParticipaAvgAggregateInputType = {
    idsala?: true
    idusuario?: true
  }

  export type ParticipaSumAggregateInputType = {
    idsala?: true
    idusuario?: true
  }

  export type ParticipaMinAggregateInputType = {
    idsala?: true
    idusuario?: true
    estado?: true
  }

  export type ParticipaMaxAggregateInputType = {
    idsala?: true
    idusuario?: true
    estado?: true
  }

  export type ParticipaCountAggregateInputType = {
    idsala?: true
    idusuario?: true
    estado?: true
    _all?: true
  }

  export type ParticipaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participa to aggregate.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned participas
    **/
    _count?: true | ParticipaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipaMaxAggregateInputType
  }

  export type GetParticipaAggregateType<T extends ParticipaAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipa[P]>
      : GetScalarType<T[P], AggregateParticipa[P]>
  }




  export type participaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
    orderBy?: participaOrderByWithAggregationInput | participaOrderByWithAggregationInput[]
    by: ParticipaScalarFieldEnum[] | ParticipaScalarFieldEnum
    having?: participaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipaCountAggregateInputType | true
    _avg?: ParticipaAvgAggregateInputType
    _sum?: ParticipaSumAggregateInputType
    _min?: ParticipaMinAggregateInputType
    _max?: ParticipaMaxAggregateInputType
  }

  export type ParticipaGroupByOutputType = {
    idsala: number
    idusuario: number
    estado: string
    _count: ParticipaCountAggregateOutputType | null
    _avg: ParticipaAvgAggregateOutputType | null
    _sum: ParticipaSumAggregateOutputType | null
    _min: ParticipaMinAggregateOutputType | null
    _max: ParticipaMaxAggregateOutputType | null
  }

  type GetParticipaGroupByPayload<T extends participaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParticipaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipaGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipaGroupByOutputType[P]>
        }
      >
    >


  export type participaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idsala?: boolean
    idusuario?: boolean
    estado?: boolean
    mensaje?: boolean | participa$mensajeArgs<ExtArgs>
    sala?: boolean | salaDefaultArgs<ExtArgs>
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    _count?: boolean | ParticipaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participa"]>

  export type participaSelectScalar = {
    idsala?: boolean
    idusuario?: boolean
    estado?: boolean
  }

  export type participaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | participa$mensajeArgs<ExtArgs>
    sala?: boolean | salaDefaultArgs<ExtArgs>
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    _count?: boolean | ParticipaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $participaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "participa"
    objects: {
      mensaje: Prisma.$mensajePayload<ExtArgs>[]
      sala: Prisma.$salaPayload<ExtArgs>
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idsala: number
      idusuario: number
      estado: string
    }, ExtArgs["result"]["participa"]>
    composites: {}
  }


  type participaGetPayload<S extends boolean | null | undefined | participaDefaultArgs> = $Result.GetResult<Prisma.$participaPayload, S>

  type participaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<participaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParticipaCountAggregateInputType | true
    }

  export interface participaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['participa'], meta: { name: 'participa' } }
    /**
     * Find zero or one Participa that matches the filter.
     * @param {participaFindUniqueArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends participaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, participaFindUniqueArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Participa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {participaFindUniqueOrThrowArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends participaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Participa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindFirstArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends participaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindFirstArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Participa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindFirstOrThrowArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends participaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Participas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participas
     * const participas = await prisma.participa.findMany()
     * 
     * // Get first 10 Participas
     * const participas = await prisma.participa.findMany({ take: 10 })
     * 
     * // Only select the `idsala`
     * const participaWithIdsalaOnly = await prisma.participa.findMany({ select: { idsala: true } })
     * 
    **/
    findMany<T extends participaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Participa.
     * @param {participaCreateArgs} args - Arguments to create a Participa.
     * @example
     * // Create one Participa
     * const Participa = await prisma.participa.create({
     *   data: {
     *     // ... data to create a Participa
     *   }
     * })
     * 
    **/
    create<T extends participaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, participaCreateArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Participas.
     *     @param {participaCreateManyArgs} args - Arguments to create many Participas.
     *     @example
     *     // Create many Participas
     *     const participa = await prisma.participa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends participaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Participa.
     * @param {participaDeleteArgs} args - Arguments to delete one Participa.
     * @example
     * // Delete one Participa
     * const Participa = await prisma.participa.delete({
     *   where: {
     *     // ... filter to delete one Participa
     *   }
     * })
     * 
    **/
    delete<T extends participaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, participaDeleteArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Participa.
     * @param {participaUpdateArgs} args - Arguments to update one Participa.
     * @example
     * // Update one Participa
     * const participa = await prisma.participa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends participaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpdateArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Participas.
     * @param {participaDeleteManyArgs} args - Arguments to filter Participas to delete.
     * @example
     * // Delete a few Participas
     * const { count } = await prisma.participa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends participaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participas
     * const participa = await prisma.participa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends participaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Participa.
     * @param {participaUpsertArgs} args - Arguments to update or create a Participa.
     * @example
     * // Update or create a Participa
     * const participa = await prisma.participa.upsert({
     *   create: {
     *     // ... data to create a Participa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participa we want to update
     *   }
     * })
    **/
    upsert<T extends participaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpsertArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Participas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaCountArgs} args - Arguments to filter Participas to count.
     * @example
     * // Count the number of Participas
     * const count = await prisma.participa.count({
     *   where: {
     *     // ... the filter for the Participas we want to count
     *   }
     * })
    **/
    count<T extends participaCountArgs>(
      args?: Subset<T, participaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipaAggregateArgs>(args: Subset<T, ParticipaAggregateArgs>): Prisma.PrismaPromise<GetParticipaAggregateType<T>>

    /**
     * Group by Participa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends participaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: participaGroupByArgs['orderBy'] }
        : { orderBy?: participaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, participaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the participa model
   */
  readonly fields: participaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for participa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__participaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mensaje<T extends participa$mensajeArgs<ExtArgs> = {}>(args?: Subset<T, participa$mensajeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'> | Null>;

    sala<T extends salaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, salaDefaultArgs<ExtArgs>>): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the participa model
   */ 
  interface participaFieldRefs {
    readonly idsala: FieldRef<"participa", 'Int'>
    readonly idusuario: FieldRef<"participa", 'Int'>
    readonly estado: FieldRef<"participa", 'String'>
  }
    

  // Custom InputTypes

  /**
   * participa findUnique
   */
  export type participaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa findUniqueOrThrow
   */
  export type participaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa findFirst
   */
  export type participaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participas.
     */
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa findFirstOrThrow
   */
  export type participaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participas.
     */
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa findMany
   */
  export type participaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participas to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa create
   */
  export type participaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The data needed to create a participa.
     */
    data: XOR<participaCreateInput, participaUncheckedCreateInput>
  }


  /**
   * participa createMany
   */
  export type participaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many participas.
     */
    data: participaCreateManyInput | participaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * participa update
   */
  export type participaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The data needed to update a participa.
     */
    data: XOR<participaUpdateInput, participaUncheckedUpdateInput>
    /**
     * Choose, which participa to update.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa updateMany
   */
  export type participaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update participas.
     */
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyInput>
    /**
     * Filter which participas to update
     */
    where?: participaWhereInput
  }


  /**
   * participa upsert
   */
  export type participaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The filter to search for the participa to update in case it exists.
     */
    where: participaWhereUniqueInput
    /**
     * In case the participa found by the `where` argument doesn't exist, create a new participa with this data.
     */
    create: XOR<participaCreateInput, participaUncheckedCreateInput>
    /**
     * In case the participa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<participaUpdateInput, participaUncheckedUpdateInput>
  }


  /**
   * participa delete
   */
  export type participaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter which participa to delete.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa deleteMany
   */
  export type participaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participas to delete
     */
    where?: participaWhereInput
  }


  /**
   * participa.mensaje
   */
  export type participa$mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    cursor?: mensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * participa without action
   */
  export type participaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
  }



  /**
   * Model sala
   */

  export type AggregateSala = {
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  export type SalaAvgAggregateOutputType = {
    id: number | null
  }

  export type SalaSumAggregateOutputType = {
    id: number | null
  }

  export type SalaMinAggregateOutputType = {
    id: number | null
    idvideo: string | null
  }

  export type SalaMaxAggregateOutputType = {
    id: number | null
    idvideo: string | null
  }

  export type SalaCountAggregateOutputType = {
    id: number
    idvideo: number
    _all: number
  }


  export type SalaAvgAggregateInputType = {
    id?: true
  }

  export type SalaSumAggregateInputType = {
    id?: true
  }

  export type SalaMinAggregateInputType = {
    id?: true
    idvideo?: true
  }

  export type SalaMaxAggregateInputType = {
    id?: true
    idvideo?: true
  }

  export type SalaCountAggregateInputType = {
    id?: true
    idvideo?: true
    _all?: true
  }

  export type SalaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sala to aggregate.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned salas
    **/
    _count?: true | SalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaMaxAggregateInputType
  }

  export type GetSalaAggregateType<T extends SalaAggregateArgs> = {
        [P in keyof T & keyof AggregateSala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSala[P]>
      : GetScalarType<T[P], AggregateSala[P]>
  }




  export type salaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: salaWhereInput
    orderBy?: salaOrderByWithAggregationInput | salaOrderByWithAggregationInput[]
    by: SalaScalarFieldEnum[] | SalaScalarFieldEnum
    having?: salaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaCountAggregateInputType | true
    _avg?: SalaAvgAggregateInputType
    _sum?: SalaSumAggregateInputType
    _min?: SalaMinAggregateInputType
    _max?: SalaMaxAggregateInputType
  }

  export type SalaGroupByOutputType = {
    id: number
    idvideo: string
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  type GetSalaGroupByPayload<T extends salaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaGroupByOutputType[P]>
            : GetScalarType<T[P], SalaGroupByOutputType[P]>
        }
      >
    >


  export type salaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idvideo?: boolean
    participa?: boolean | sala$participaArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sala"]>

  export type salaSelectScalar = {
    id?: boolean
    idvideo?: boolean
  }

  export type salaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participa?: boolean | sala$participaArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $salaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sala"
    objects: {
      participa: Prisma.$participaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idvideo: string
    }, ExtArgs["result"]["sala"]>
    composites: {}
  }


  type salaGetPayload<S extends boolean | null | undefined | salaDefaultArgs> = $Result.GetResult<Prisma.$salaPayload, S>

  type salaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<salaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalaCountAggregateInputType | true
    }

  export interface salaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sala'], meta: { name: 'sala' } }
    /**
     * Find zero or one Sala that matches the filter.
     * @param {salaFindUniqueArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, salaFindUniqueArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sala that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {salaFindUniqueOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends salaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindFirstArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sala that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends salaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Salas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salas
     * const salas = await prisma.sala.findMany()
     * 
     * // Get first 10 Salas
     * const salas = await prisma.sala.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaWithIdOnly = await prisma.sala.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends salaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sala.
     * @param {salaCreateArgs} args - Arguments to create a Sala.
     * @example
     * // Create one Sala
     * const Sala = await prisma.sala.create({
     *   data: {
     *     // ... data to create a Sala
     *   }
     * })
     * 
    **/
    create<T extends salaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, salaCreateArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Salas.
     *     @param {salaCreateManyArgs} args - Arguments to create many Salas.
     *     @example
     *     // Create many Salas
     *     const sala = await prisma.sala.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sala.
     * @param {salaDeleteArgs} args - Arguments to delete one Sala.
     * @example
     * // Delete one Sala
     * const Sala = await prisma.sala.delete({
     *   where: {
     *     // ... filter to delete one Sala
     *   }
     * })
     * 
    **/
    delete<T extends salaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, salaDeleteArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sala.
     * @param {salaUpdateArgs} args - Arguments to update one Sala.
     * @example
     * // Update one Sala
     * const sala = await prisma.sala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpdateArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Salas.
     * @param {salaDeleteManyArgs} args - Arguments to filter Salas to delete.
     * @example
     * // Delete a few Salas
     * const { count } = await prisma.sala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salas
     * const sala = await prisma.sala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sala.
     * @param {salaUpsertArgs} args - Arguments to update or create a Sala.
     * @example
     * // Update or create a Sala
     * const sala = await prisma.sala.upsert({
     *   create: {
     *     // ... data to create a Sala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sala we want to update
     *   }
     * })
    **/
    upsert<T extends salaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpsertArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaCountArgs} args - Arguments to filter Salas to count.
     * @example
     * // Count the number of Salas
     * const count = await prisma.sala.count({
     *   where: {
     *     // ... the filter for the Salas we want to count
     *   }
     * })
    **/
    count<T extends salaCountArgs>(
      args?: Subset<T, salaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaAggregateArgs>(args: Subset<T, SalaAggregateArgs>): Prisma.PrismaPromise<GetSalaAggregateType<T>>

    /**
     * Group by Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends salaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: salaGroupByArgs['orderBy'] }
        : { orderBy?: salaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, salaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sala model
   */
  readonly fields: salaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__salaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    participa<T extends sala$participaArgs<ExtArgs> = {}>(args?: Subset<T, sala$participaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sala model
   */ 
  interface salaFieldRefs {
    readonly id: FieldRef<"sala", 'Int'>
    readonly idvideo: FieldRef<"sala", 'String'>
  }
    

  // Custom InputTypes

  /**
   * sala findUnique
   */
  export type salaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala findUniqueOrThrow
   */
  export type salaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala findFirst
   */
  export type salaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala findFirstOrThrow
   */
  export type salaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala findMany
   */
  export type salaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which salas to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala create
   */
  export type salaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The data needed to create a sala.
     */
    data: XOR<salaCreateInput, salaUncheckedCreateInput>
  }


  /**
   * sala createMany
   */
  export type salaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many salas.
     */
    data: salaCreateManyInput | salaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sala update
   */
  export type salaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The data needed to update a sala.
     */
    data: XOR<salaUpdateInput, salaUncheckedUpdateInput>
    /**
     * Choose, which sala to update.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala updateMany
   */
  export type salaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update salas.
     */
    data: XOR<salaUpdateManyMutationInput, salaUncheckedUpdateManyInput>
    /**
     * Filter which salas to update
     */
    where?: salaWhereInput
  }


  /**
   * sala upsert
   */
  export type salaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The filter to search for the sala to update in case it exists.
     */
    where: salaWhereUniqueInput
    /**
     * In case the sala found by the `where` argument doesn't exist, create a new sala with this data.
     */
    create: XOR<salaCreateInput, salaUncheckedCreateInput>
    /**
     * In case the sala was found with the provided `where` argument, update it with this data.
     */
    update: XOR<salaUpdateInput, salaUncheckedUpdateInput>
  }


  /**
   * sala delete
   */
  export type salaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter which sala to delete.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala deleteMany
   */
  export type salaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which salas to delete
     */
    where?: salaWhereInput
  }


  /**
   * sala.participa
   */
  export type sala$participaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    where?: participaWhereInput
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    cursor?: participaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * sala without action
   */
  export type salaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
  }



  /**
   * Model spatial_ref_sys
   */

  export type AggregateSpatial_ref_sys = {
    _count: Spatial_ref_sysCountAggregateOutputType | null
    _avg: Spatial_ref_sysAvgAggregateOutputType | null
    _sum: Spatial_ref_sysSumAggregateOutputType | null
    _min: Spatial_ref_sysMinAggregateOutputType | null
    _max: Spatial_ref_sysMaxAggregateOutputType | null
  }

  export type Spatial_ref_sysAvgAggregateOutputType = {
    srid: number | null
    auth_srid: number | null
  }

  export type Spatial_ref_sysSumAggregateOutputType = {
    srid: number | null
    auth_srid: number | null
  }

  export type Spatial_ref_sysMinAggregateOutputType = {
    srid: number | null
    auth_name: string | null
    auth_srid: number | null
    srtext: string | null
    proj4text: string | null
  }

  export type Spatial_ref_sysMaxAggregateOutputType = {
    srid: number | null
    auth_name: string | null
    auth_srid: number | null
    srtext: string | null
    proj4text: string | null
  }

  export type Spatial_ref_sysCountAggregateOutputType = {
    srid: number
    auth_name: number
    auth_srid: number
    srtext: number
    proj4text: number
    _all: number
  }


  export type Spatial_ref_sysAvgAggregateInputType = {
    srid?: true
    auth_srid?: true
  }

  export type Spatial_ref_sysSumAggregateInputType = {
    srid?: true
    auth_srid?: true
  }

  export type Spatial_ref_sysMinAggregateInputType = {
    srid?: true
    auth_name?: true
    auth_srid?: true
    srtext?: true
    proj4text?: true
  }

  export type Spatial_ref_sysMaxAggregateInputType = {
    srid?: true
    auth_name?: true
    auth_srid?: true
    srtext?: true
    proj4text?: true
  }

  export type Spatial_ref_sysCountAggregateInputType = {
    srid?: true
    auth_name?: true
    auth_srid?: true
    srtext?: true
    proj4text?: true
    _all?: true
  }

  export type Spatial_ref_sysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which spatial_ref_sys to aggregate.
     */
    where?: spatial_ref_sysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of spatial_ref_sys to fetch.
     */
    orderBy?: spatial_ref_sysOrderByWithRelationInput | spatial_ref_sysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: spatial_ref_sysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` spatial_ref_sys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` spatial_ref_sys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned spatial_ref_sys
    **/
    _count?: true | Spatial_ref_sysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Spatial_ref_sysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Spatial_ref_sysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Spatial_ref_sysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Spatial_ref_sysMaxAggregateInputType
  }

  export type GetSpatial_ref_sysAggregateType<T extends Spatial_ref_sysAggregateArgs> = {
        [P in keyof T & keyof AggregateSpatial_ref_sys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpatial_ref_sys[P]>
      : GetScalarType<T[P], AggregateSpatial_ref_sys[P]>
  }




  export type spatial_ref_sysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: spatial_ref_sysWhereInput
    orderBy?: spatial_ref_sysOrderByWithAggregationInput | spatial_ref_sysOrderByWithAggregationInput[]
    by: Spatial_ref_sysScalarFieldEnum[] | Spatial_ref_sysScalarFieldEnum
    having?: spatial_ref_sysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Spatial_ref_sysCountAggregateInputType | true
    _avg?: Spatial_ref_sysAvgAggregateInputType
    _sum?: Spatial_ref_sysSumAggregateInputType
    _min?: Spatial_ref_sysMinAggregateInputType
    _max?: Spatial_ref_sysMaxAggregateInputType
  }

  export type Spatial_ref_sysGroupByOutputType = {
    srid: number
    auth_name: string | null
    auth_srid: number | null
    srtext: string | null
    proj4text: string | null
    _count: Spatial_ref_sysCountAggregateOutputType | null
    _avg: Spatial_ref_sysAvgAggregateOutputType | null
    _sum: Spatial_ref_sysSumAggregateOutputType | null
    _min: Spatial_ref_sysMinAggregateOutputType | null
    _max: Spatial_ref_sysMaxAggregateOutputType | null
  }

  type GetSpatial_ref_sysGroupByPayload<T extends spatial_ref_sysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Spatial_ref_sysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Spatial_ref_sysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Spatial_ref_sysGroupByOutputType[P]>
            : GetScalarType<T[P], Spatial_ref_sysGroupByOutputType[P]>
        }
      >
    >


  export type spatial_ref_sysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    srid?: boolean
    auth_name?: boolean
    auth_srid?: boolean
    srtext?: boolean
    proj4text?: boolean
  }, ExtArgs["result"]["spatial_ref_sys"]>

  export type spatial_ref_sysSelectScalar = {
    srid?: boolean
    auth_name?: boolean
    auth_srid?: boolean
    srtext?: boolean
    proj4text?: boolean
  }


  export type $spatial_ref_sysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "spatial_ref_sys"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      srid: number
      auth_name: string | null
      auth_srid: number | null
      srtext: string | null
      proj4text: string | null
    }, ExtArgs["result"]["spatial_ref_sys"]>
    composites: {}
  }


  type spatial_ref_sysGetPayload<S extends boolean | null | undefined | spatial_ref_sysDefaultArgs> = $Result.GetResult<Prisma.$spatial_ref_sysPayload, S>

  type spatial_ref_sysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<spatial_ref_sysFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Spatial_ref_sysCountAggregateInputType | true
    }

  export interface spatial_ref_sysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['spatial_ref_sys'], meta: { name: 'spatial_ref_sys' } }
    /**
     * Find zero or one Spatial_ref_sys that matches the filter.
     * @param {spatial_ref_sysFindUniqueArgs} args - Arguments to find a Spatial_ref_sys
     * @example
     * // Get one Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends spatial_ref_sysFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysFindUniqueArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Spatial_ref_sys that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {spatial_ref_sysFindUniqueOrThrowArgs} args - Arguments to find a Spatial_ref_sys
     * @example
     * // Get one Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends spatial_ref_sysFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Spatial_ref_sys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysFindFirstArgs} args - Arguments to find a Spatial_ref_sys
     * @example
     * // Get one Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends spatial_ref_sysFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysFindFirstArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Spatial_ref_sys that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysFindFirstOrThrowArgs} args - Arguments to find a Spatial_ref_sys
     * @example
     * // Get one Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends spatial_ref_sysFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Spatial_ref_sys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findMany()
     * 
     * // Get first 10 Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.findMany({ take: 10 })
     * 
     * // Only select the `srid`
     * const spatial_ref_sysWithSridOnly = await prisma.spatial_ref_sys.findMany({ select: { srid: true } })
     * 
    **/
    findMany<T extends spatial_ref_sysFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Spatial_ref_sys.
     * @param {spatial_ref_sysCreateArgs} args - Arguments to create a Spatial_ref_sys.
     * @example
     * // Create one Spatial_ref_sys
     * const Spatial_ref_sys = await prisma.spatial_ref_sys.create({
     *   data: {
     *     // ... data to create a Spatial_ref_sys
     *   }
     * })
     * 
    **/
    create<T extends spatial_ref_sysCreateArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysCreateArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Spatial_ref_sys.
     *     @param {spatial_ref_sysCreateManyArgs} args - Arguments to create many Spatial_ref_sys.
     *     @example
     *     // Create many Spatial_ref_sys
     *     const spatial_ref_sys = await prisma.spatial_ref_sys.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends spatial_ref_sysCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Spatial_ref_sys.
     * @param {spatial_ref_sysDeleteArgs} args - Arguments to delete one Spatial_ref_sys.
     * @example
     * // Delete one Spatial_ref_sys
     * const Spatial_ref_sys = await prisma.spatial_ref_sys.delete({
     *   where: {
     *     // ... filter to delete one Spatial_ref_sys
     *   }
     * })
     * 
    **/
    delete<T extends spatial_ref_sysDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysDeleteArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Spatial_ref_sys.
     * @param {spatial_ref_sysUpdateArgs} args - Arguments to update one Spatial_ref_sys.
     * @example
     * // Update one Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends spatial_ref_sysUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysUpdateArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Spatial_ref_sys.
     * @param {spatial_ref_sysDeleteManyArgs} args - Arguments to filter Spatial_ref_sys to delete.
     * @example
     * // Delete a few Spatial_ref_sys
     * const { count } = await prisma.spatial_ref_sys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends spatial_ref_sysDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, spatial_ref_sysDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spatial_ref_sys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends spatial_ref_sysUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Spatial_ref_sys.
     * @param {spatial_ref_sysUpsertArgs} args - Arguments to update or create a Spatial_ref_sys.
     * @example
     * // Update or create a Spatial_ref_sys
     * const spatial_ref_sys = await prisma.spatial_ref_sys.upsert({
     *   create: {
     *     // ... data to create a Spatial_ref_sys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spatial_ref_sys we want to update
     *   }
     * })
    **/
    upsert<T extends spatial_ref_sysUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, spatial_ref_sysUpsertArgs<ExtArgs>>
    ): Prisma__spatial_ref_sysClient<$Result.GetResult<Prisma.$spatial_ref_sysPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Spatial_ref_sys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysCountArgs} args - Arguments to filter Spatial_ref_sys to count.
     * @example
     * // Count the number of Spatial_ref_sys
     * const count = await prisma.spatial_ref_sys.count({
     *   where: {
     *     // ... the filter for the Spatial_ref_sys we want to count
     *   }
     * })
    **/
    count<T extends spatial_ref_sysCountArgs>(
      args?: Subset<T, spatial_ref_sysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Spatial_ref_sysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spatial_ref_sys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Spatial_ref_sysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Spatial_ref_sysAggregateArgs>(args: Subset<T, Spatial_ref_sysAggregateArgs>): Prisma.PrismaPromise<GetSpatial_ref_sysAggregateType<T>>

    /**
     * Group by Spatial_ref_sys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {spatial_ref_sysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends spatial_ref_sysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: spatial_ref_sysGroupByArgs['orderBy'] }
        : { orderBy?: spatial_ref_sysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, spatial_ref_sysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpatial_ref_sysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the spatial_ref_sys model
   */
  readonly fields: spatial_ref_sysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for spatial_ref_sys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__spatial_ref_sysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the spatial_ref_sys model
   */ 
  interface spatial_ref_sysFieldRefs {
    readonly srid: FieldRef<"spatial_ref_sys", 'Int'>
    readonly auth_name: FieldRef<"spatial_ref_sys", 'String'>
    readonly auth_srid: FieldRef<"spatial_ref_sys", 'Int'>
    readonly srtext: FieldRef<"spatial_ref_sys", 'String'>
    readonly proj4text: FieldRef<"spatial_ref_sys", 'String'>
  }
    

  // Custom InputTypes

  /**
   * spatial_ref_sys findUnique
   */
  export type spatial_ref_sysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter, which spatial_ref_sys to fetch.
     */
    where: spatial_ref_sysWhereUniqueInput
  }


  /**
   * spatial_ref_sys findUniqueOrThrow
   */
  export type spatial_ref_sysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter, which spatial_ref_sys to fetch.
     */
    where: spatial_ref_sysWhereUniqueInput
  }


  /**
   * spatial_ref_sys findFirst
   */
  export type spatial_ref_sysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter, which spatial_ref_sys to fetch.
     */
    where?: spatial_ref_sysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of spatial_ref_sys to fetch.
     */
    orderBy?: spatial_ref_sysOrderByWithRelationInput | spatial_ref_sysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for spatial_ref_sys.
     */
    cursor?: spatial_ref_sysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` spatial_ref_sys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` spatial_ref_sys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of spatial_ref_sys.
     */
    distinct?: Spatial_ref_sysScalarFieldEnum | Spatial_ref_sysScalarFieldEnum[]
  }


  /**
   * spatial_ref_sys findFirstOrThrow
   */
  export type spatial_ref_sysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter, which spatial_ref_sys to fetch.
     */
    where?: spatial_ref_sysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of spatial_ref_sys to fetch.
     */
    orderBy?: spatial_ref_sysOrderByWithRelationInput | spatial_ref_sysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for spatial_ref_sys.
     */
    cursor?: spatial_ref_sysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` spatial_ref_sys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` spatial_ref_sys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of spatial_ref_sys.
     */
    distinct?: Spatial_ref_sysScalarFieldEnum | Spatial_ref_sysScalarFieldEnum[]
  }


  /**
   * spatial_ref_sys findMany
   */
  export type spatial_ref_sysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter, which spatial_ref_sys to fetch.
     */
    where?: spatial_ref_sysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of spatial_ref_sys to fetch.
     */
    orderBy?: spatial_ref_sysOrderByWithRelationInput | spatial_ref_sysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing spatial_ref_sys.
     */
    cursor?: spatial_ref_sysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` spatial_ref_sys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` spatial_ref_sys.
     */
    skip?: number
    distinct?: Spatial_ref_sysScalarFieldEnum | Spatial_ref_sysScalarFieldEnum[]
  }


  /**
   * spatial_ref_sys create
   */
  export type spatial_ref_sysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * The data needed to create a spatial_ref_sys.
     */
    data: XOR<spatial_ref_sysCreateInput, spatial_ref_sysUncheckedCreateInput>
  }


  /**
   * spatial_ref_sys createMany
   */
  export type spatial_ref_sysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many spatial_ref_sys.
     */
    data: spatial_ref_sysCreateManyInput | spatial_ref_sysCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * spatial_ref_sys update
   */
  export type spatial_ref_sysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * The data needed to update a spatial_ref_sys.
     */
    data: XOR<spatial_ref_sysUpdateInput, spatial_ref_sysUncheckedUpdateInput>
    /**
     * Choose, which spatial_ref_sys to update.
     */
    where: spatial_ref_sysWhereUniqueInput
  }


  /**
   * spatial_ref_sys updateMany
   */
  export type spatial_ref_sysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update spatial_ref_sys.
     */
    data: XOR<spatial_ref_sysUpdateManyMutationInput, spatial_ref_sysUncheckedUpdateManyInput>
    /**
     * Filter which spatial_ref_sys to update
     */
    where?: spatial_ref_sysWhereInput
  }


  /**
   * spatial_ref_sys upsert
   */
  export type spatial_ref_sysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * The filter to search for the spatial_ref_sys to update in case it exists.
     */
    where: spatial_ref_sysWhereUniqueInput
    /**
     * In case the spatial_ref_sys found by the `where` argument doesn't exist, create a new spatial_ref_sys with this data.
     */
    create: XOR<spatial_ref_sysCreateInput, spatial_ref_sysUncheckedCreateInput>
    /**
     * In case the spatial_ref_sys was found with the provided `where` argument, update it with this data.
     */
    update: XOR<spatial_ref_sysUpdateInput, spatial_ref_sysUncheckedUpdateInput>
  }


  /**
   * spatial_ref_sys delete
   */
  export type spatial_ref_sysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
    /**
     * Filter which spatial_ref_sys to delete.
     */
    where: spatial_ref_sysWhereUniqueInput
  }


  /**
   * spatial_ref_sys deleteMany
   */
  export type spatial_ref_sysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which spatial_ref_sys to delete
     */
    where?: spatial_ref_sysWhereInput
  }


  /**
   * spatial_ref_sys without action
   */
  export type spatial_ref_sysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the spatial_ref_sys
     */
    select?: spatial_ref_sysSelect<ExtArgs> | null
  }



  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    edad: number | null
    idlocalidad: number | null
    buscaedadmin: number | null
    buscaedadmax: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    edad: number | null
    idlocalidad: number | null
    buscaedadmin: number | null
    buscaedadmax: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    correo: string | null
    contrasena: string | null
    nombre: string | null
    sexo: string | null
    edad: number | null
    idlocalidad: number | null
    buscaedadmin: number | null
    buscaedadmax: number | null
    buscasexo: string | null
    fotoperfil: string | null
    descripcion: string | null
    tipousuario: string | null
    baneado: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    correo: string | null
    contrasena: string | null
    nombre: string | null
    sexo: string | null
    edad: number | null
    idlocalidad: number | null
    buscaedadmin: number | null
    buscaedadmax: number | null
    buscasexo: string | null
    fotoperfil: string | null
    descripcion: string | null
    tipousuario: string | null
    baneado: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    correo: number
    contrasena: number
    nombre: number
    sexo: number
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: number
    fotoperfil: number
    descripcion: number
    tipousuario: number
    baneado: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    edad?: true
    idlocalidad?: true
    buscaedadmin?: true
    buscaedadmax?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    edad?: true
    idlocalidad?: true
    buscaedadmin?: true
    buscaedadmax?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    nombre?: true
    sexo?: true
    edad?: true
    idlocalidad?: true
    buscaedadmin?: true
    buscaedadmax?: true
    buscasexo?: true
    fotoperfil?: true
    descripcion?: true
    tipousuario?: true
    baneado?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    nombre?: true
    sexo?: true
    edad?: true
    idlocalidad?: true
    buscaedadmin?: true
    buscaedadmax?: true
    buscasexo?: true
    fotoperfil?: true
    descripcion?: true
    tipousuario?: true
    baneado?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    nombre?: true
    sexo?: true
    edad?: true
    idlocalidad?: true
    buscaedadmin?: true
    buscaedadmax?: true
    buscasexo?: true
    fotoperfil?: true
    descripcion?: true
    tipousuario?: true
    baneado?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    nombre?: boolean
    sexo?: boolean
    edad?: boolean
    idlocalidad?: boolean
    buscaedadmin?: boolean
    buscaedadmax?: boolean
    buscasexo?: boolean
    fotoperfil?: boolean
    descripcion?: boolean
    tipousuario?: boolean
    baneado?: boolean
    fotousuario?: boolean | usuario$fotousuarioArgs<ExtArgs>
    match_match_idusuario1Tousuario?: boolean | usuario$match_match_idusuario1TousuarioArgs<ExtArgs>
    match_match_idusuario2Tousuario?: boolean | usuario$match_match_idusuario2TousuarioArgs<ExtArgs>
    participa?: boolean | usuario$participaArgs<ExtArgs>
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
    localidad?: boolean | localidadDefaultArgs<ExtArgs>
    videoviewer?: boolean | usuario$videoviewerArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    nombre?: boolean
    sexo?: boolean
    edad?: boolean
    idlocalidad?: boolean
    buscaedadmin?: boolean
    buscaedadmax?: boolean
    buscasexo?: boolean
    fotoperfil?: boolean
    descripcion?: boolean
    tipousuario?: boolean
    baneado?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotousuario?: boolean | usuario$fotousuarioArgs<ExtArgs>
    match_match_idusuario1Tousuario?: boolean | usuario$match_match_idusuario1TousuarioArgs<ExtArgs>
    match_match_idusuario2Tousuario?: boolean | usuario$match_match_idusuario2TousuarioArgs<ExtArgs>
    participa?: boolean | usuario$participaArgs<ExtArgs>
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
    localidad?: boolean | localidadDefaultArgs<ExtArgs>
    videoviewer?: boolean | usuario$videoviewerArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      fotousuario: Prisma.$fotousuarioPayload<ExtArgs>[]
      match_match_idusuario1Tousuario: Prisma.$matchPayload<ExtArgs>[]
      match_match_idusuario2Tousuario: Prisma.$matchPayload<ExtArgs>[]
      participa: Prisma.$participaPayload<ExtArgs>[]
      multimedia: Prisma.$multimediaPayload<ExtArgs>
      localidad: Prisma.$localidadPayload<ExtArgs>
      videoviewer: Prisma.$videoviewerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      correo: string
      contrasena: string
      nombre: string
      sexo: string
      edad: number
      idlocalidad: number
      buscaedadmin: number
      buscaedadmax: number
      buscasexo: string
      fotoperfil: string
      descripcion: string
      tipousuario: string
      baneado: boolean
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fotousuario<T extends usuario$fotousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$fotousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fotousuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    match_match_idusuario1Tousuario<T extends usuario$match_match_idusuario1TousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$match_match_idusuario1TousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findMany'> | Null>;

    match_match_idusuario2Tousuario<T extends usuario$match_match_idusuario2TousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$match_match_idusuario2TousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matchPayload<ExtArgs>, T, 'findMany'> | Null>;

    participa<T extends usuario$participaArgs<ExtArgs> = {}>(args?: Subset<T, usuario$participaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'> | Null>;

    multimedia<T extends multimediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, multimediaDefaultArgs<ExtArgs>>): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    localidad<T extends localidadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, localidadDefaultArgs<ExtArgs>>): Prisma__localidadClient<$Result.GetResult<Prisma.$localidadPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    videoviewer<T extends usuario$videoviewerArgs<ExtArgs> = {}>(args?: Subset<T, usuario$videoviewerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id: FieldRef<"usuario", 'Int'>
    readonly correo: FieldRef<"usuario", 'String'>
    readonly contrasena: FieldRef<"usuario", 'String'>
    readonly nombre: FieldRef<"usuario", 'String'>
    readonly sexo: FieldRef<"usuario", 'String'>
    readonly edad: FieldRef<"usuario", 'Int'>
    readonly idlocalidad: FieldRef<"usuario", 'Int'>
    readonly buscaedadmin: FieldRef<"usuario", 'Int'>
    readonly buscaedadmax: FieldRef<"usuario", 'Int'>
    readonly buscasexo: FieldRef<"usuario", 'String'>
    readonly fotoperfil: FieldRef<"usuario", 'String'>
    readonly descripcion: FieldRef<"usuario", 'String'>
    readonly tipousuario: FieldRef<"usuario", 'String'>
    readonly baneado: FieldRef<"usuario", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario.fotousuario
   */
  export type usuario$fotousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fotousuario
     */
    select?: fotousuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fotousuarioInclude<ExtArgs> | null
    where?: fotousuarioWhereInput
    orderBy?: fotousuarioOrderByWithRelationInput | fotousuarioOrderByWithRelationInput[]
    cursor?: fotousuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FotousuarioScalarFieldEnum | FotousuarioScalarFieldEnum[]
  }


  /**
   * usuario.match_match_idusuario1Tousuario
   */
  export type usuario$match_match_idusuario1TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    where?: matchWhereInput
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    cursor?: matchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * usuario.match_match_idusuario2Tousuario
   */
  export type usuario$match_match_idusuario2TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the match
     */
    select?: matchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: matchInclude<ExtArgs> | null
    where?: matchWhereInput
    orderBy?: matchOrderByWithRelationInput | matchOrderByWithRelationInput[]
    cursor?: matchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }


  /**
   * usuario.participa
   */
  export type usuario$participaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    where?: participaWhereInput
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    cursor?: participaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * usuario.videoviewer
   */
  export type usuario$videoviewerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    where?: videoviewerWhereInput
    orderBy?: videoviewerOrderByWithRelationInput | videoviewerOrderByWithRelationInput[]
    cursor?: videoviewerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoviewerScalarFieldEnum | VideoviewerScalarFieldEnum[]
  }


  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
  }



  /**
   * Model videoviewer
   */

  export type AggregateVideoviewer = {
    _count: VideoviewerCountAggregateOutputType | null
    _avg: VideoviewerAvgAggregateOutputType | null
    _sum: VideoviewerSumAggregateOutputType | null
    _min: VideoviewerMinAggregateOutputType | null
    _max: VideoviewerMaxAggregateOutputType | null
  }

  export type VideoviewerAvgAggregateOutputType = {
    idusuario: number | null
  }

  export type VideoviewerSumAggregateOutputType = {
    idusuario: number | null
  }

  export type VideoviewerMinAggregateOutputType = {
    idvideo: string | null
    idusuario: number | null
  }

  export type VideoviewerMaxAggregateOutputType = {
    idvideo: string | null
    idusuario: number | null
  }

  export type VideoviewerCountAggregateOutputType = {
    idvideo: number
    idusuario: number
    _all: number
  }


  export type VideoviewerAvgAggregateInputType = {
    idusuario?: true
  }

  export type VideoviewerSumAggregateInputType = {
    idusuario?: true
  }

  export type VideoviewerMinAggregateInputType = {
    idvideo?: true
    idusuario?: true
  }

  export type VideoviewerMaxAggregateInputType = {
    idvideo?: true
    idusuario?: true
  }

  export type VideoviewerCountAggregateInputType = {
    idvideo?: true
    idusuario?: true
    _all?: true
  }

  export type VideoviewerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videoviewer to aggregate.
     */
    where?: videoviewerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoviewers to fetch.
     */
    orderBy?: videoviewerOrderByWithRelationInput | videoviewerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: videoviewerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoviewers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoviewers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned videoviewers
    **/
    _count?: true | VideoviewerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoviewerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoviewerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoviewerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoviewerMaxAggregateInputType
  }

  export type GetVideoviewerAggregateType<T extends VideoviewerAggregateArgs> = {
        [P in keyof T & keyof AggregateVideoviewer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideoviewer[P]>
      : GetScalarType<T[P], AggregateVideoviewer[P]>
  }




  export type videoviewerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videoviewerWhereInput
    orderBy?: videoviewerOrderByWithAggregationInput | videoviewerOrderByWithAggregationInput[]
    by: VideoviewerScalarFieldEnum[] | VideoviewerScalarFieldEnum
    having?: videoviewerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoviewerCountAggregateInputType | true
    _avg?: VideoviewerAvgAggregateInputType
    _sum?: VideoviewerSumAggregateInputType
    _min?: VideoviewerMinAggregateInputType
    _max?: VideoviewerMaxAggregateInputType
  }

  export type VideoviewerGroupByOutputType = {
    idvideo: string
    idusuario: number
    _count: VideoviewerCountAggregateOutputType | null
    _avg: VideoviewerAvgAggregateOutputType | null
    _sum: VideoviewerSumAggregateOutputType | null
    _min: VideoviewerMinAggregateOutputType | null
    _max: VideoviewerMaxAggregateOutputType | null
  }

  type GetVideoviewerGroupByPayload<T extends videoviewerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoviewerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoviewerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoviewerGroupByOutputType[P]>
            : GetScalarType<T[P], VideoviewerGroupByOutputType[P]>
        }
      >
    >


  export type videoviewerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idvideo?: boolean
    idusuario?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoviewer"]>

  export type videoviewerSelectScalar = {
    idvideo?: boolean
    idusuario?: boolean
  }

  export type videoviewerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $videoviewerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "videoviewer"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idvideo: string
      idusuario: number
    }, ExtArgs["result"]["videoviewer"]>
    composites: {}
  }


  type videoviewerGetPayload<S extends boolean | null | undefined | videoviewerDefaultArgs> = $Result.GetResult<Prisma.$videoviewerPayload, S>

  type videoviewerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<videoviewerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VideoviewerCountAggregateInputType | true
    }

  export interface videoviewerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['videoviewer'], meta: { name: 'videoviewer' } }
    /**
     * Find zero or one Videoviewer that matches the filter.
     * @param {videoviewerFindUniqueArgs} args - Arguments to find a Videoviewer
     * @example
     * // Get one Videoviewer
     * const videoviewer = await prisma.videoviewer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends videoviewerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerFindUniqueArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Videoviewer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {videoviewerFindUniqueOrThrowArgs} args - Arguments to find a Videoviewer
     * @example
     * // Get one Videoviewer
     * const videoviewer = await prisma.videoviewer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends videoviewerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Videoviewer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerFindFirstArgs} args - Arguments to find a Videoviewer
     * @example
     * // Get one Videoviewer
     * const videoviewer = await prisma.videoviewer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends videoviewerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerFindFirstArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Videoviewer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerFindFirstOrThrowArgs} args - Arguments to find a Videoviewer
     * @example
     * // Get one Videoviewer
     * const videoviewer = await prisma.videoviewer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends videoviewerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Videoviewers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videoviewers
     * const videoviewers = await prisma.videoviewer.findMany()
     * 
     * // Get first 10 Videoviewers
     * const videoviewers = await prisma.videoviewer.findMany({ take: 10 })
     * 
     * // Only select the `idvideo`
     * const videoviewerWithIdvideoOnly = await prisma.videoviewer.findMany({ select: { idvideo: true } })
     * 
    **/
    findMany<T extends videoviewerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Videoviewer.
     * @param {videoviewerCreateArgs} args - Arguments to create a Videoviewer.
     * @example
     * // Create one Videoviewer
     * const Videoviewer = await prisma.videoviewer.create({
     *   data: {
     *     // ... data to create a Videoviewer
     *   }
     * })
     * 
    **/
    create<T extends videoviewerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerCreateArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Videoviewers.
     *     @param {videoviewerCreateManyArgs} args - Arguments to create many Videoviewers.
     *     @example
     *     // Create many Videoviewers
     *     const videoviewer = await prisma.videoviewer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends videoviewerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Videoviewer.
     * @param {videoviewerDeleteArgs} args - Arguments to delete one Videoviewer.
     * @example
     * // Delete one Videoviewer
     * const Videoviewer = await prisma.videoviewer.delete({
     *   where: {
     *     // ... filter to delete one Videoviewer
     *   }
     * })
     * 
    **/
    delete<T extends videoviewerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerDeleteArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Videoviewer.
     * @param {videoviewerUpdateArgs} args - Arguments to update one Videoviewer.
     * @example
     * // Update one Videoviewer
     * const videoviewer = await prisma.videoviewer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends videoviewerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerUpdateArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Videoviewers.
     * @param {videoviewerDeleteManyArgs} args - Arguments to filter Videoviewers to delete.
     * @example
     * // Delete a few Videoviewers
     * const { count } = await prisma.videoviewer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends videoviewerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoviewerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videoviewers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videoviewers
     * const videoviewer = await prisma.videoviewer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends videoviewerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Videoviewer.
     * @param {videoviewerUpsertArgs} args - Arguments to update or create a Videoviewer.
     * @example
     * // Update or create a Videoviewer
     * const videoviewer = await prisma.videoviewer.upsert({
     *   create: {
     *     // ... data to create a Videoviewer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Videoviewer we want to update
     *   }
     * })
    **/
    upsert<T extends videoviewerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, videoviewerUpsertArgs<ExtArgs>>
    ): Prisma__videoviewerClient<$Result.GetResult<Prisma.$videoviewerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Videoviewers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerCountArgs} args - Arguments to filter Videoviewers to count.
     * @example
     * // Count the number of Videoviewers
     * const count = await prisma.videoviewer.count({
     *   where: {
     *     // ... the filter for the Videoviewers we want to count
     *   }
     * })
    **/
    count<T extends videoviewerCountArgs>(
      args?: Subset<T, videoviewerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoviewerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Videoviewer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoviewerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoviewerAggregateArgs>(args: Subset<T, VideoviewerAggregateArgs>): Prisma.PrismaPromise<GetVideoviewerAggregateType<T>>

    /**
     * Group by Videoviewer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoviewerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends videoviewerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: videoviewerGroupByArgs['orderBy'] }
        : { orderBy?: videoviewerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, videoviewerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoviewerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the videoviewer model
   */
  readonly fields: videoviewerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for videoviewer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__videoviewerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the videoviewer model
   */ 
  interface videoviewerFieldRefs {
    readonly idvideo: FieldRef<"videoviewer", 'String'>
    readonly idusuario: FieldRef<"videoviewer", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * videoviewer findUnique
   */
  export type videoviewerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter, which videoviewer to fetch.
     */
    where: videoviewerWhereUniqueInput
  }


  /**
   * videoviewer findUniqueOrThrow
   */
  export type videoviewerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter, which videoviewer to fetch.
     */
    where: videoviewerWhereUniqueInput
  }


  /**
   * videoviewer findFirst
   */
  export type videoviewerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter, which videoviewer to fetch.
     */
    where?: videoviewerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoviewers to fetch.
     */
    orderBy?: videoviewerOrderByWithRelationInput | videoviewerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videoviewers.
     */
    cursor?: videoviewerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoviewers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoviewers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videoviewers.
     */
    distinct?: VideoviewerScalarFieldEnum | VideoviewerScalarFieldEnum[]
  }


  /**
   * videoviewer findFirstOrThrow
   */
  export type videoviewerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter, which videoviewer to fetch.
     */
    where?: videoviewerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoviewers to fetch.
     */
    orderBy?: videoviewerOrderByWithRelationInput | videoviewerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videoviewers.
     */
    cursor?: videoviewerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoviewers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoviewers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videoviewers.
     */
    distinct?: VideoviewerScalarFieldEnum | VideoviewerScalarFieldEnum[]
  }


  /**
   * videoviewer findMany
   */
  export type videoviewerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter, which videoviewers to fetch.
     */
    where?: videoviewerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoviewers to fetch.
     */
    orderBy?: videoviewerOrderByWithRelationInput | videoviewerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing videoviewers.
     */
    cursor?: videoviewerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoviewers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoviewers.
     */
    skip?: number
    distinct?: VideoviewerScalarFieldEnum | VideoviewerScalarFieldEnum[]
  }


  /**
   * videoviewer create
   */
  export type videoviewerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * The data needed to create a videoviewer.
     */
    data: XOR<videoviewerCreateInput, videoviewerUncheckedCreateInput>
  }


  /**
   * videoviewer createMany
   */
  export type videoviewerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many videoviewers.
     */
    data: videoviewerCreateManyInput | videoviewerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * videoviewer update
   */
  export type videoviewerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * The data needed to update a videoviewer.
     */
    data: XOR<videoviewerUpdateInput, videoviewerUncheckedUpdateInput>
    /**
     * Choose, which videoviewer to update.
     */
    where: videoviewerWhereUniqueInput
  }


  /**
   * videoviewer updateMany
   */
  export type videoviewerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update videoviewers.
     */
    data: XOR<videoviewerUpdateManyMutationInput, videoviewerUncheckedUpdateManyInput>
    /**
     * Filter which videoviewers to update
     */
    where?: videoviewerWhereInput
  }


  /**
   * videoviewer upsert
   */
  export type videoviewerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * The filter to search for the videoviewer to update in case it exists.
     */
    where: videoviewerWhereUniqueInput
    /**
     * In case the videoviewer found by the `where` argument doesn't exist, create a new videoviewer with this data.
     */
    create: XOR<videoviewerCreateInput, videoviewerUncheckedCreateInput>
    /**
     * In case the videoviewer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<videoviewerUpdateInput, videoviewerUncheckedUpdateInput>
  }


  /**
   * videoviewer delete
   */
  export type videoviewerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
    /**
     * Filter which videoviewer to delete.
     */
    where: videoviewerWhereUniqueInput
  }


  /**
   * videoviewer deleteMany
   */
  export type videoviewerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videoviewers to delete
     */
    where?: videoviewerWhereInput
  }


  /**
   * videoviewer without action
   */
  export type videoviewerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoviewer
     */
    select?: videoviewerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoviewerInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FotousuarioScalarFieldEnum: {
    rutafoto: 'rutafoto',
    idusuario: 'idusuario'
  };

  export type FotousuarioScalarFieldEnum = (typeof FotousuarioScalarFieldEnum)[keyof typeof FotousuarioScalarFieldEnum]


  export const LocalidadScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type LocalidadScalarFieldEnum = (typeof LocalidadScalarFieldEnum)[keyof typeof LocalidadScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    idusuario1: 'idusuario1',
    idusuario2: 'idusuario2'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const MensajeScalarFieldEnum: {
    id: 'id',
    idsala: 'idsala',
    idusuario: 'idusuario',
    texto: 'texto',
    fechahora: 'fechahora',
    rutamultimedia: 'rutamultimedia'
  };

  export type MensajeScalarFieldEnum = (typeof MensajeScalarFieldEnum)[keyof typeof MensajeScalarFieldEnum]


  export const MultimediaScalarFieldEnum: {
    ruta: 'ruta',
    tipomultimedia: 'tipomultimedia'
  };

  export type MultimediaScalarFieldEnum = (typeof MultimediaScalarFieldEnum)[keyof typeof MultimediaScalarFieldEnum]


  export const ParticipaScalarFieldEnum: {
    idsala: 'idsala',
    idusuario: 'idusuario',
    estado: 'estado'
  };

  export type ParticipaScalarFieldEnum = (typeof ParticipaScalarFieldEnum)[keyof typeof ParticipaScalarFieldEnum]


  export const SalaScalarFieldEnum: {
    id: 'id',
    idvideo: 'idvideo'
  };

  export type SalaScalarFieldEnum = (typeof SalaScalarFieldEnum)[keyof typeof SalaScalarFieldEnum]


  export const Spatial_ref_sysScalarFieldEnum: {
    srid: 'srid',
    auth_name: 'auth_name',
    auth_srid: 'auth_srid',
    srtext: 'srtext',
    proj4text: 'proj4text'
  };

  export type Spatial_ref_sysScalarFieldEnum = (typeof Spatial_ref_sysScalarFieldEnum)[keyof typeof Spatial_ref_sysScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    correo: 'correo',
    contrasena: 'contrasena',
    nombre: 'nombre',
    sexo: 'sexo',
    edad: 'edad',
    idlocalidad: 'idlocalidad',
    buscaedadmin: 'buscaedadmin',
    buscaedadmax: 'buscaedadmax',
    buscasexo: 'buscasexo',
    fotoperfil: 'fotoperfil',
    descripcion: 'descripcion',
    tipousuario: 'tipousuario',
    baneado: 'baneado'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const VideoviewerScalarFieldEnum: {
    idvideo: 'idvideo',
    idusuario: 'idusuario'
  };

  export type VideoviewerScalarFieldEnum = (typeof VideoviewerScalarFieldEnum)[keyof typeof VideoviewerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type fotousuarioWhereInput = {
    AND?: fotousuarioWhereInput | fotousuarioWhereInput[]
    OR?: fotousuarioWhereInput[]
    NOT?: fotousuarioWhereInput | fotousuarioWhereInput[]
    rutafoto?: StringFilter<"fotousuario"> | string
    idusuario?: IntFilter<"fotousuario"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
  }

  export type fotousuarioOrderByWithRelationInput = {
    rutafoto?: SortOrder
    idusuario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
    multimedia?: multimediaOrderByWithRelationInput
  }

  export type fotousuarioWhereUniqueInput = Prisma.AtLeast<{
    rutafoto_idusuario?: fotousuarioRutafotoIdusuarioCompoundUniqueInput
    AND?: fotousuarioWhereInput | fotousuarioWhereInput[]
    OR?: fotousuarioWhereInput[]
    NOT?: fotousuarioWhereInput | fotousuarioWhereInput[]
    rutafoto?: StringFilter<"fotousuario"> | string
    idusuario?: IntFilter<"fotousuario"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
  }, "rutafoto_idusuario">

  export type fotousuarioOrderByWithAggregationInput = {
    rutafoto?: SortOrder
    idusuario?: SortOrder
    _count?: fotousuarioCountOrderByAggregateInput
    _avg?: fotousuarioAvgOrderByAggregateInput
    _max?: fotousuarioMaxOrderByAggregateInput
    _min?: fotousuarioMinOrderByAggregateInput
    _sum?: fotousuarioSumOrderByAggregateInput
  }

  export type fotousuarioScalarWhereWithAggregatesInput = {
    AND?: fotousuarioScalarWhereWithAggregatesInput | fotousuarioScalarWhereWithAggregatesInput[]
    OR?: fotousuarioScalarWhereWithAggregatesInput[]
    NOT?: fotousuarioScalarWhereWithAggregatesInput | fotousuarioScalarWhereWithAggregatesInput[]
    rutafoto?: StringWithAggregatesFilter<"fotousuario"> | string
    idusuario?: IntWithAggregatesFilter<"fotousuario"> | number
  }

  export type localidadWhereInput = {
    AND?: localidadWhereInput | localidadWhereInput[]
    OR?: localidadWhereInput[]
    NOT?: localidadWhereInput | localidadWhereInput[]
    id?: IntFilter<"localidad"> | number
    nombre?: StringFilter<"localidad"> | string
    usuario?: UsuarioListRelationFilter
  }

  export type localidadOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    usuario?: usuarioOrderByRelationAggregateInput
  }

  export type localidadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: localidadWhereInput | localidadWhereInput[]
    OR?: localidadWhereInput[]
    NOT?: localidadWhereInput | localidadWhereInput[]
    nombre?: StringFilter<"localidad"> | string
    usuario?: UsuarioListRelationFilter
  }, "id">

  export type localidadOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: localidadCountOrderByAggregateInput
    _avg?: localidadAvgOrderByAggregateInput
    _max?: localidadMaxOrderByAggregateInput
    _min?: localidadMinOrderByAggregateInput
    _sum?: localidadSumOrderByAggregateInput
  }

  export type localidadScalarWhereWithAggregatesInput = {
    AND?: localidadScalarWhereWithAggregatesInput | localidadScalarWhereWithAggregatesInput[]
    OR?: localidadScalarWhereWithAggregatesInput[]
    NOT?: localidadScalarWhereWithAggregatesInput | localidadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"localidad"> | number
    nombre?: StringWithAggregatesFilter<"localidad"> | string
  }

  export type matchWhereInput = {
    AND?: matchWhereInput | matchWhereInput[]
    OR?: matchWhereInput[]
    NOT?: matchWhereInput | matchWhereInput[]
    idusuario1?: IntFilter<"match"> | number
    idusuario2?: IntFilter<"match"> | number
    usuario_match_idusuario1Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    usuario_match_idusuario2Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type matchOrderByWithRelationInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
    usuario_match_idusuario1Tousuario?: usuarioOrderByWithRelationInput
    usuario_match_idusuario2Tousuario?: usuarioOrderByWithRelationInput
  }

  export type matchWhereUniqueInput = Prisma.AtLeast<{
    idusuario1_idusuario2?: matchIdusuario1Idusuario2CompoundUniqueInput
    AND?: matchWhereInput | matchWhereInput[]
    OR?: matchWhereInput[]
    NOT?: matchWhereInput | matchWhereInput[]
    idusuario1?: IntFilter<"match"> | number
    idusuario2?: IntFilter<"match"> | number
    usuario_match_idusuario1Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    usuario_match_idusuario2Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "idusuario1_idusuario2">

  export type matchOrderByWithAggregationInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
    _count?: matchCountOrderByAggregateInput
    _avg?: matchAvgOrderByAggregateInput
    _max?: matchMaxOrderByAggregateInput
    _min?: matchMinOrderByAggregateInput
    _sum?: matchSumOrderByAggregateInput
  }

  export type matchScalarWhereWithAggregatesInput = {
    AND?: matchScalarWhereWithAggregatesInput | matchScalarWhereWithAggregatesInput[]
    OR?: matchScalarWhereWithAggregatesInput[]
    NOT?: matchScalarWhereWithAggregatesInput | matchScalarWhereWithAggregatesInput[]
    idusuario1?: IntWithAggregatesFilter<"match"> | number
    idusuario2?: IntWithAggregatesFilter<"match"> | number
  }

  export type mensajeWhereInput = {
    AND?: mensajeWhereInput | mensajeWhereInput[]
    OR?: mensajeWhereInput[]
    NOT?: mensajeWhereInput | mensajeWhereInput[]
    id?: IntFilter<"mensaje"> | number
    idsala?: IntFilter<"mensaje"> | number
    idusuario?: IntFilter<"mensaje"> | number
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeFilter<"mensaje"> | Date | string
    rutamultimedia?: StringNullableFilter<"mensaje"> | string | null
    participa?: XOR<ParticipaRelationFilter, participaWhereInput>
    multimedia?: XOR<MultimediaNullableRelationFilter, multimediaWhereInput> | null
  }

  export type mensajeOrderByWithRelationInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    rutamultimedia?: SortOrderInput | SortOrder
    participa?: participaOrderByWithRelationInput
    multimedia?: multimediaOrderByWithRelationInput
  }

  export type mensajeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: mensajeWhereInput | mensajeWhereInput[]
    OR?: mensajeWhereInput[]
    NOT?: mensajeWhereInput | mensajeWhereInput[]
    idsala?: IntFilter<"mensaje"> | number
    idusuario?: IntFilter<"mensaje"> | number
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeFilter<"mensaje"> | Date | string
    rutamultimedia?: StringNullableFilter<"mensaje"> | string | null
    participa?: XOR<ParticipaRelationFilter, participaWhereInput>
    multimedia?: XOR<MultimediaNullableRelationFilter, multimediaWhereInput> | null
  }, "id">

  export type mensajeOrderByWithAggregationInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    rutamultimedia?: SortOrderInput | SortOrder
    _count?: mensajeCountOrderByAggregateInput
    _avg?: mensajeAvgOrderByAggregateInput
    _max?: mensajeMaxOrderByAggregateInput
    _min?: mensajeMinOrderByAggregateInput
    _sum?: mensajeSumOrderByAggregateInput
  }

  export type mensajeScalarWhereWithAggregatesInput = {
    AND?: mensajeScalarWhereWithAggregatesInput | mensajeScalarWhereWithAggregatesInput[]
    OR?: mensajeScalarWhereWithAggregatesInput[]
    NOT?: mensajeScalarWhereWithAggregatesInput | mensajeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"mensaje"> | number
    idsala?: IntWithAggregatesFilter<"mensaje"> | number
    idusuario?: IntWithAggregatesFilter<"mensaje"> | number
    texto?: StringWithAggregatesFilter<"mensaje"> | string
    fechahora?: DateTimeWithAggregatesFilter<"mensaje"> | Date | string
    rutamultimedia?: StringNullableWithAggregatesFilter<"mensaje"> | string | null
  }

  export type multimediaWhereInput = {
    AND?: multimediaWhereInput | multimediaWhereInput[]
    OR?: multimediaWhereInput[]
    NOT?: multimediaWhereInput | multimediaWhereInput[]
    ruta?: StringFilter<"multimedia"> | string
    tipomultimedia?: StringFilter<"multimedia"> | string
    fotousuario?: FotousuarioListRelationFilter
    mensaje?: MensajeListRelationFilter
    usuario?: UsuarioListRelationFilter
  }

  export type multimediaOrderByWithRelationInput = {
    ruta?: SortOrder
    tipomultimedia?: SortOrder
    fotousuario?: fotousuarioOrderByRelationAggregateInput
    mensaje?: mensajeOrderByRelationAggregateInput
    usuario?: usuarioOrderByRelationAggregateInput
  }

  export type multimediaWhereUniqueInput = Prisma.AtLeast<{
    ruta?: string
    AND?: multimediaWhereInput | multimediaWhereInput[]
    OR?: multimediaWhereInput[]
    NOT?: multimediaWhereInput | multimediaWhereInput[]
    tipomultimedia?: StringFilter<"multimedia"> | string
    fotousuario?: FotousuarioListRelationFilter
    mensaje?: MensajeListRelationFilter
    usuario?: UsuarioListRelationFilter
  }, "ruta">

  export type multimediaOrderByWithAggregationInput = {
    ruta?: SortOrder
    tipomultimedia?: SortOrder
    _count?: multimediaCountOrderByAggregateInput
    _max?: multimediaMaxOrderByAggregateInput
    _min?: multimediaMinOrderByAggregateInput
  }

  export type multimediaScalarWhereWithAggregatesInput = {
    AND?: multimediaScalarWhereWithAggregatesInput | multimediaScalarWhereWithAggregatesInput[]
    OR?: multimediaScalarWhereWithAggregatesInput[]
    NOT?: multimediaScalarWhereWithAggregatesInput | multimediaScalarWhereWithAggregatesInput[]
    ruta?: StringWithAggregatesFilter<"multimedia"> | string
    tipomultimedia?: StringWithAggregatesFilter<"multimedia"> | string
  }

  export type participaWhereInput = {
    AND?: participaWhereInput | participaWhereInput[]
    OR?: participaWhereInput[]
    NOT?: participaWhereInput | participaWhereInput[]
    idsala?: IntFilter<"participa"> | number
    idusuario?: IntFilter<"participa"> | number
    estado?: StringFilter<"participa"> | string
    mensaje?: MensajeListRelationFilter
    sala?: XOR<SalaRelationFilter, salaWhereInput>
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type participaOrderByWithRelationInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
    estado?: SortOrder
    mensaje?: mensajeOrderByRelationAggregateInput
    sala?: salaOrderByWithRelationInput
    usuario?: usuarioOrderByWithRelationInput
  }

  export type participaWhereUniqueInput = Prisma.AtLeast<{
    idsala_idusuario?: participaIdsalaIdusuarioCompoundUniqueInput
    AND?: participaWhereInput | participaWhereInput[]
    OR?: participaWhereInput[]
    NOT?: participaWhereInput | participaWhereInput[]
    idsala?: IntFilter<"participa"> | number
    idusuario?: IntFilter<"participa"> | number
    estado?: StringFilter<"participa"> | string
    mensaje?: MensajeListRelationFilter
    sala?: XOR<SalaRelationFilter, salaWhereInput>
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "idsala_idusuario">

  export type participaOrderByWithAggregationInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
    estado?: SortOrder
    _count?: participaCountOrderByAggregateInput
    _avg?: participaAvgOrderByAggregateInput
    _max?: participaMaxOrderByAggregateInput
    _min?: participaMinOrderByAggregateInput
    _sum?: participaSumOrderByAggregateInput
  }

  export type participaScalarWhereWithAggregatesInput = {
    AND?: participaScalarWhereWithAggregatesInput | participaScalarWhereWithAggregatesInput[]
    OR?: participaScalarWhereWithAggregatesInput[]
    NOT?: participaScalarWhereWithAggregatesInput | participaScalarWhereWithAggregatesInput[]
    idsala?: IntWithAggregatesFilter<"participa"> | number
    idusuario?: IntWithAggregatesFilter<"participa"> | number
    estado?: StringWithAggregatesFilter<"participa"> | string
  }

  export type salaWhereInput = {
    AND?: salaWhereInput | salaWhereInput[]
    OR?: salaWhereInput[]
    NOT?: salaWhereInput | salaWhereInput[]
    id?: IntFilter<"sala"> | number
    idvideo?: StringFilter<"sala"> | string
    participa?: ParticipaListRelationFilter
  }

  export type salaOrderByWithRelationInput = {
    id?: SortOrder
    idvideo?: SortOrder
    participa?: participaOrderByRelationAggregateInput
  }

  export type salaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: salaWhereInput | salaWhereInput[]
    OR?: salaWhereInput[]
    NOT?: salaWhereInput | salaWhereInput[]
    idvideo?: StringFilter<"sala"> | string
    participa?: ParticipaListRelationFilter
  }, "id">

  export type salaOrderByWithAggregationInput = {
    id?: SortOrder
    idvideo?: SortOrder
    _count?: salaCountOrderByAggregateInput
    _avg?: salaAvgOrderByAggregateInput
    _max?: salaMaxOrderByAggregateInput
    _min?: salaMinOrderByAggregateInput
    _sum?: salaSumOrderByAggregateInput
  }

  export type salaScalarWhereWithAggregatesInput = {
    AND?: salaScalarWhereWithAggregatesInput | salaScalarWhereWithAggregatesInput[]
    OR?: salaScalarWhereWithAggregatesInput[]
    NOT?: salaScalarWhereWithAggregatesInput | salaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sala"> | number
    idvideo?: StringWithAggregatesFilter<"sala"> | string
  }

  export type spatial_ref_sysWhereInput = {
    AND?: spatial_ref_sysWhereInput | spatial_ref_sysWhereInput[]
    OR?: spatial_ref_sysWhereInput[]
    NOT?: spatial_ref_sysWhereInput | spatial_ref_sysWhereInput[]
    srid?: IntFilter<"spatial_ref_sys"> | number
    auth_name?: StringNullableFilter<"spatial_ref_sys"> | string | null
    auth_srid?: IntNullableFilter<"spatial_ref_sys"> | number | null
    srtext?: StringNullableFilter<"spatial_ref_sys"> | string | null
    proj4text?: StringNullableFilter<"spatial_ref_sys"> | string | null
  }

  export type spatial_ref_sysOrderByWithRelationInput = {
    srid?: SortOrder
    auth_name?: SortOrderInput | SortOrder
    auth_srid?: SortOrderInput | SortOrder
    srtext?: SortOrderInput | SortOrder
    proj4text?: SortOrderInput | SortOrder
  }

  export type spatial_ref_sysWhereUniqueInput = Prisma.AtLeast<{
    srid?: number
    AND?: spatial_ref_sysWhereInput | spatial_ref_sysWhereInput[]
    OR?: spatial_ref_sysWhereInput[]
    NOT?: spatial_ref_sysWhereInput | spatial_ref_sysWhereInput[]
    auth_name?: StringNullableFilter<"spatial_ref_sys"> | string | null
    auth_srid?: IntNullableFilter<"spatial_ref_sys"> | number | null
    srtext?: StringNullableFilter<"spatial_ref_sys"> | string | null
    proj4text?: StringNullableFilter<"spatial_ref_sys"> | string | null
  }, "srid">

  export type spatial_ref_sysOrderByWithAggregationInput = {
    srid?: SortOrder
    auth_name?: SortOrderInput | SortOrder
    auth_srid?: SortOrderInput | SortOrder
    srtext?: SortOrderInput | SortOrder
    proj4text?: SortOrderInput | SortOrder
    _count?: spatial_ref_sysCountOrderByAggregateInput
    _avg?: spatial_ref_sysAvgOrderByAggregateInput
    _max?: spatial_ref_sysMaxOrderByAggregateInput
    _min?: spatial_ref_sysMinOrderByAggregateInput
    _sum?: spatial_ref_sysSumOrderByAggregateInput
  }

  export type spatial_ref_sysScalarWhereWithAggregatesInput = {
    AND?: spatial_ref_sysScalarWhereWithAggregatesInput | spatial_ref_sysScalarWhereWithAggregatesInput[]
    OR?: spatial_ref_sysScalarWhereWithAggregatesInput[]
    NOT?: spatial_ref_sysScalarWhereWithAggregatesInput | spatial_ref_sysScalarWhereWithAggregatesInput[]
    srid?: IntWithAggregatesFilter<"spatial_ref_sys"> | number
    auth_name?: StringNullableWithAggregatesFilter<"spatial_ref_sys"> | string | null
    auth_srid?: IntNullableWithAggregatesFilter<"spatial_ref_sys"> | number | null
    srtext?: StringNullableWithAggregatesFilter<"spatial_ref_sys"> | string | null
    proj4text?: StringNullableWithAggregatesFilter<"spatial_ref_sys"> | string | null
  }

  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id?: IntFilter<"usuario"> | number
    correo?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    nombre?: StringFilter<"usuario"> | string
    sexo?: StringFilter<"usuario"> | string
    edad?: IntFilter<"usuario"> | number
    idlocalidad?: IntFilter<"usuario"> | number
    buscaedadmin?: IntFilter<"usuario"> | number
    buscaedadmax?: IntFilter<"usuario"> | number
    buscasexo?: StringFilter<"usuario"> | string
    fotoperfil?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    tipousuario?: StringFilter<"usuario"> | string
    baneado?: BoolFilter<"usuario"> | boolean
    fotousuario?: FotousuarioListRelationFilter
    match_match_idusuario1Tousuario?: MatchListRelationFilter
    match_match_idusuario2Tousuario?: MatchListRelationFilter
    participa?: ParticipaListRelationFilter
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
    localidad?: XOR<LocalidadRelationFilter, localidadWhereInput>
    videoviewer?: VideoviewerListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    nombre?: SortOrder
    sexo?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
    buscasexo?: SortOrder
    fotoperfil?: SortOrder
    descripcion?: SortOrder
    tipousuario?: SortOrder
    baneado?: SortOrder
    fotousuario?: fotousuarioOrderByRelationAggregateInput
    match_match_idusuario1Tousuario?: matchOrderByRelationAggregateInput
    match_match_idusuario2Tousuario?: matchOrderByRelationAggregateInput
    participa?: participaOrderByRelationAggregateInput
    multimedia?: multimediaOrderByWithRelationInput
    localidad?: localidadOrderByWithRelationInput
    videoviewer?: videoviewerOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    contrasena?: StringFilter<"usuario"> | string
    nombre?: StringFilter<"usuario"> | string
    sexo?: StringFilter<"usuario"> | string
    edad?: IntFilter<"usuario"> | number
    idlocalidad?: IntFilter<"usuario"> | number
    buscaedadmin?: IntFilter<"usuario"> | number
    buscaedadmax?: IntFilter<"usuario"> | number
    buscasexo?: StringFilter<"usuario"> | string
    fotoperfil?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    tipousuario?: StringFilter<"usuario"> | string
    baneado?: BoolFilter<"usuario"> | boolean
    fotousuario?: FotousuarioListRelationFilter
    match_match_idusuario1Tousuario?: MatchListRelationFilter
    match_match_idusuario2Tousuario?: MatchListRelationFilter
    participa?: ParticipaListRelationFilter
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
    localidad?: XOR<LocalidadRelationFilter, localidadWhereInput>
    videoviewer?: VideoviewerListRelationFilter
  }, "id" | "correo">

  export type usuarioOrderByWithAggregationInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    nombre?: SortOrder
    sexo?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
    buscasexo?: SortOrder
    fotoperfil?: SortOrder
    descripcion?: SortOrder
    tipousuario?: SortOrder
    baneado?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuario"> | number
    correo?: StringWithAggregatesFilter<"usuario"> | string
    contrasena?: StringWithAggregatesFilter<"usuario"> | string
    nombre?: StringWithAggregatesFilter<"usuario"> | string
    sexo?: StringWithAggregatesFilter<"usuario"> | string
    edad?: IntWithAggregatesFilter<"usuario"> | number
    idlocalidad?: IntWithAggregatesFilter<"usuario"> | number
    buscaedadmin?: IntWithAggregatesFilter<"usuario"> | number
    buscaedadmax?: IntWithAggregatesFilter<"usuario"> | number
    buscasexo?: StringWithAggregatesFilter<"usuario"> | string
    fotoperfil?: StringWithAggregatesFilter<"usuario"> | string
    descripcion?: StringWithAggregatesFilter<"usuario"> | string
    tipousuario?: StringWithAggregatesFilter<"usuario"> | string
    baneado?: BoolWithAggregatesFilter<"usuario"> | boolean
  }

  export type videoviewerWhereInput = {
    AND?: videoviewerWhereInput | videoviewerWhereInput[]
    OR?: videoviewerWhereInput[]
    NOT?: videoviewerWhereInput | videoviewerWhereInput[]
    idvideo?: StringFilter<"videoviewer"> | string
    idusuario?: IntFilter<"videoviewer"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type videoviewerOrderByWithRelationInput = {
    idvideo?: SortOrder
    idusuario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type videoviewerWhereUniqueInput = Prisma.AtLeast<{
    idvideo_idusuario?: videoviewerIdvideoIdusuarioCompoundUniqueInput
    AND?: videoviewerWhereInput | videoviewerWhereInput[]
    OR?: videoviewerWhereInput[]
    NOT?: videoviewerWhereInput | videoviewerWhereInput[]
    idvideo?: StringFilter<"videoviewer"> | string
    idusuario?: IntFilter<"videoviewer"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "idvideo_idusuario">

  export type videoviewerOrderByWithAggregationInput = {
    idvideo?: SortOrder
    idusuario?: SortOrder
    _count?: videoviewerCountOrderByAggregateInput
    _avg?: videoviewerAvgOrderByAggregateInput
    _max?: videoviewerMaxOrderByAggregateInput
    _min?: videoviewerMinOrderByAggregateInput
    _sum?: videoviewerSumOrderByAggregateInput
  }

  export type videoviewerScalarWhereWithAggregatesInput = {
    AND?: videoviewerScalarWhereWithAggregatesInput | videoviewerScalarWhereWithAggregatesInput[]
    OR?: videoviewerScalarWhereWithAggregatesInput[]
    NOT?: videoviewerScalarWhereWithAggregatesInput | videoviewerScalarWhereWithAggregatesInput[]
    idvideo?: StringWithAggregatesFilter<"videoviewer"> | string
    idusuario?: IntWithAggregatesFilter<"videoviewer"> | number
  }

  export type fotousuarioCreateInput = {
    usuario: usuarioCreateNestedOneWithoutFotousuarioInput
    multimedia: multimediaCreateNestedOneWithoutFotousuarioInput
  }

  export type fotousuarioUncheckedCreateInput = {
    rutafoto: string
    idusuario: number
  }

  export type fotousuarioUpdateInput = {
    usuario?: usuarioUpdateOneRequiredWithoutFotousuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutFotousuarioNestedInput
  }

  export type fotousuarioUncheckedUpdateInput = {
    rutafoto?: StringFieldUpdateOperationsInput | string
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type fotousuarioCreateManyInput = {
    rutafoto: string
    idusuario: number
  }

  export type fotousuarioUpdateManyMutationInput = {

  }

  export type fotousuarioUncheckedUpdateManyInput = {
    rutafoto?: StringFieldUpdateOperationsInput | string
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type localidadCreateInput = {
    nombre: string
    usuario?: usuarioCreateNestedManyWithoutLocalidadInput
  }

  export type localidadUncheckedCreateInput = {
    id?: number
    nombre: string
    usuario?: usuarioUncheckedCreateNestedManyWithoutLocalidadInput
  }

  export type localidadUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateManyWithoutLocalidadNestedInput
  }

  export type localidadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUncheckedUpdateManyWithoutLocalidadNestedInput
  }

  export type localidadCreateManyInput = {
    id?: number
    nombre: string
  }

  export type localidadUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type localidadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type matchCreateInput = {
    usuario_match_idusuario1Tousuario: usuarioCreateNestedOneWithoutMatch_match_idusuario1TousuarioInput
    usuario_match_idusuario2Tousuario: usuarioCreateNestedOneWithoutMatch_match_idusuario2TousuarioInput
  }

  export type matchUncheckedCreateInput = {
    idusuario1: number
    idusuario2: number
  }

  export type matchUpdateInput = {
    usuario_match_idusuario1Tousuario?: usuarioUpdateOneRequiredWithoutMatch_match_idusuario1TousuarioNestedInput
    usuario_match_idusuario2Tousuario?: usuarioUpdateOneRequiredWithoutMatch_match_idusuario2TousuarioNestedInput
  }

  export type matchUncheckedUpdateInput = {
    idusuario1?: IntFieldUpdateOperationsInput | number
    idusuario2?: IntFieldUpdateOperationsInput | number
  }

  export type matchCreateManyInput = {
    idusuario1: number
    idusuario2: number
  }

  export type matchUpdateManyMutationInput = {

  }

  export type matchUncheckedUpdateManyInput = {
    idusuario1?: IntFieldUpdateOperationsInput | number
    idusuario2?: IntFieldUpdateOperationsInput | number
  }

  export type mensajeCreateInput = {
    texto: string
    fechahora: Date | string
    participa: participaCreateNestedOneWithoutMensajeInput
    multimedia?: multimediaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateInput = {
    id?: number
    idsala: number
    idusuario: number
    texto: string
    fechahora: Date | string
    rutamultimedia?: string | null
  }

  export type mensajeUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    participa?: participaUpdateOneRequiredWithoutMensajeNestedInput
    multimedia?: multimediaUpdateOneWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    rutamultimedia?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type mensajeCreateManyInput = {
    id?: number
    idsala: number
    idusuario: number
    texto: string
    fechahora: Date | string
    rutamultimedia?: string | null
  }

  export type mensajeUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mensajeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    rutamultimedia?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type multimediaCreateInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioCreateNestedManyWithoutMultimediaInput
    mensaje?: mensajeCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUncheckedCreateInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutMultimediaInput
    mensaje?: mensajeUncheckedCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioUncheckedCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUpdateInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUpdateManyWithoutMultimediaNestedInput
    mensaje?: mensajeUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaUncheckedUpdateInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutMultimediaNestedInput
    mensaje?: mensajeUncheckedUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUncheckedUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaCreateManyInput = {
    ruta: string
    tipomultimedia: string
  }

  export type multimediaUpdateManyMutationInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type multimediaUncheckedUpdateManyInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type participaCreateInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    sala: salaCreateNestedOneWithoutParticipaInput
    usuario: usuarioCreateNestedOneWithoutParticipaInput
  }

  export type participaUncheckedCreateInput = {
    idsala: number
    idusuario: number
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaUpdateInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    sala?: salaUpdateOneRequiredWithoutParticipaNestedInput
    usuario?: usuarioUpdateOneRequiredWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaCreateManyInput = {
    idsala: number
    idusuario: number
    estado: string
  }

  export type participaUpdateManyMutationInput = {
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type participaUncheckedUpdateManyInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type salaCreateInput = {
    idvideo: string
    participa?: participaCreateNestedManyWithoutSalaInput
  }

  export type salaUncheckedCreateInput = {
    id?: number
    idvideo: string
    participa?: participaUncheckedCreateNestedManyWithoutSalaInput
  }

  export type salaUpdateInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
    participa?: participaUpdateManyWithoutSalaNestedInput
  }

  export type salaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idvideo?: StringFieldUpdateOperationsInput | string
    participa?: participaUncheckedUpdateManyWithoutSalaNestedInput
  }

  export type salaCreateManyInput = {
    id?: number
    idvideo: string
  }

  export type salaUpdateManyMutationInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type salaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type spatial_ref_sysCreateInput = {
    srid: number
    auth_name?: string | null
    auth_srid?: number | null
    srtext?: string | null
    proj4text?: string | null
  }

  export type spatial_ref_sysUncheckedCreateInput = {
    srid: number
    auth_name?: string | null
    auth_srid?: number | null
    srtext?: string | null
    proj4text?: string | null
  }

  export type spatial_ref_sysUpdateInput = {
    srid?: IntFieldUpdateOperationsInput | number
    auth_name?: NullableStringFieldUpdateOperationsInput | string | null
    auth_srid?: NullableIntFieldUpdateOperationsInput | number | null
    srtext?: NullableStringFieldUpdateOperationsInput | string | null
    proj4text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type spatial_ref_sysUncheckedUpdateInput = {
    srid?: IntFieldUpdateOperationsInput | number
    auth_name?: NullableStringFieldUpdateOperationsInput | string | null
    auth_srid?: NullableIntFieldUpdateOperationsInput | number | null
    srtext?: NullableStringFieldUpdateOperationsInput | string | null
    proj4text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type spatial_ref_sysCreateManyInput = {
    srid: number
    auth_name?: string | null
    auth_srid?: number | null
    srtext?: string | null
    proj4text?: string | null
  }

  export type spatial_ref_sysUpdateManyMutationInput = {
    srid?: IntFieldUpdateOperationsInput | number
    auth_name?: NullableStringFieldUpdateOperationsInput | string | null
    auth_srid?: NullableIntFieldUpdateOperationsInput | number | null
    srtext?: NullableStringFieldUpdateOperationsInput | string | null
    proj4text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type spatial_ref_sysUncheckedUpdateManyInput = {
    srid?: IntFieldUpdateOperationsInput | number
    auth_name?: NullableStringFieldUpdateOperationsInput | string | null
    auth_srid?: NullableIntFieldUpdateOperationsInput | number | null
    srtext?: NullableStringFieldUpdateOperationsInput | string | null
    proj4text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usuarioCreateInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
  }

  export type usuarioUpdateManyMutationInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type videoviewerCreateInput = {
    idvideo: string
    usuario: usuarioCreateNestedOneWithoutVideoviewerInput
  }

  export type videoviewerUncheckedCreateInput = {
    idvideo: string
    idusuario: number
  }

  export type videoviewerUpdateInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutVideoviewerNestedInput
  }

  export type videoviewerUncheckedUpdateInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type videoviewerCreateManyInput = {
    idvideo: string
    idusuario: number
  }

  export type videoviewerUpdateManyMutationInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoviewerUncheckedUpdateManyInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type MultimediaRelationFilter = {
    is?: multimediaWhereInput
    isNot?: multimediaWhereInput
  }

  export type fotousuarioRutafotoIdusuarioCompoundUniqueInput = {
    rutafoto: string
    idusuario: number
  }

  export type fotousuarioCountOrderByAggregateInput = {
    rutafoto?: SortOrder
    idusuario?: SortOrder
  }

  export type fotousuarioAvgOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type fotousuarioMaxOrderByAggregateInput = {
    rutafoto?: SortOrder
    idusuario?: SortOrder
  }

  export type fotousuarioMinOrderByAggregateInput = {
    rutafoto?: SortOrder
    idusuario?: SortOrder
  }

  export type fotousuarioSumOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UsuarioListRelationFilter = {
    every?: usuarioWhereInput
    some?: usuarioWhereInput
    none?: usuarioWhereInput
  }

  export type usuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type localidadCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type localidadAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type localidadMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type localidadMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type localidadSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type matchIdusuario1Idusuario2CompoundUniqueInput = {
    idusuario1: number
    idusuario2: number
  }

  export type matchCountOrderByAggregateInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
  }

  export type matchAvgOrderByAggregateInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
  }

  export type matchMaxOrderByAggregateInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
  }

  export type matchMinOrderByAggregateInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
  }

  export type matchSumOrderByAggregateInput = {
    idusuario1?: SortOrder
    idusuario2?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ParticipaRelationFilter = {
    is?: participaWhereInput
    isNot?: participaWhereInput
  }

  export type MultimediaNullableRelationFilter = {
    is?: multimediaWhereInput | null
    isNot?: multimediaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type mensajeCountOrderByAggregateInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    rutamultimedia?: SortOrder
  }

  export type mensajeAvgOrderByAggregateInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
  }

  export type mensajeMaxOrderByAggregateInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    rutamultimedia?: SortOrder
  }

  export type mensajeMinOrderByAggregateInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    rutamultimedia?: SortOrder
  }

  export type mensajeSumOrderByAggregateInput = {
    id?: SortOrder
    idsala?: SortOrder
    idusuario?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FotousuarioListRelationFilter = {
    every?: fotousuarioWhereInput
    some?: fotousuarioWhereInput
    none?: fotousuarioWhereInput
  }

  export type MensajeListRelationFilter = {
    every?: mensajeWhereInput
    some?: mensajeWhereInput
    none?: mensajeWhereInput
  }

  export type fotousuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mensajeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type multimediaCountOrderByAggregateInput = {
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type multimediaMaxOrderByAggregateInput = {
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type multimediaMinOrderByAggregateInput = {
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type SalaRelationFilter = {
    is?: salaWhereInput
    isNot?: salaWhereInput
  }

  export type participaIdsalaIdusuarioCompoundUniqueInput = {
    idsala: number
    idusuario: number
  }

  export type participaCountOrderByAggregateInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
    estado?: SortOrder
  }

  export type participaAvgOrderByAggregateInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
  }

  export type participaMaxOrderByAggregateInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
    estado?: SortOrder
  }

  export type participaMinOrderByAggregateInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
    estado?: SortOrder
  }

  export type participaSumOrderByAggregateInput = {
    idsala?: SortOrder
    idusuario?: SortOrder
  }

  export type ParticipaListRelationFilter = {
    every?: participaWhereInput
    some?: participaWhereInput
    none?: participaWhereInput
  }

  export type participaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type salaCountOrderByAggregateInput = {
    id?: SortOrder
    idvideo?: SortOrder
  }

  export type salaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type salaMaxOrderByAggregateInput = {
    id?: SortOrder
    idvideo?: SortOrder
  }

  export type salaMinOrderByAggregateInput = {
    id?: SortOrder
    idvideo?: SortOrder
  }

  export type salaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type spatial_ref_sysCountOrderByAggregateInput = {
    srid?: SortOrder
    auth_name?: SortOrder
    auth_srid?: SortOrder
    srtext?: SortOrder
    proj4text?: SortOrder
  }

  export type spatial_ref_sysAvgOrderByAggregateInput = {
    srid?: SortOrder
    auth_srid?: SortOrder
  }

  export type spatial_ref_sysMaxOrderByAggregateInput = {
    srid?: SortOrder
    auth_name?: SortOrder
    auth_srid?: SortOrder
    srtext?: SortOrder
    proj4text?: SortOrder
  }

  export type spatial_ref_sysMinOrderByAggregateInput = {
    srid?: SortOrder
    auth_name?: SortOrder
    auth_srid?: SortOrder
    srtext?: SortOrder
    proj4text?: SortOrder
  }

  export type spatial_ref_sysSumOrderByAggregateInput = {
    srid?: SortOrder
    auth_srid?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MatchListRelationFilter = {
    every?: matchWhereInput
    some?: matchWhereInput
    none?: matchWhereInput
  }

  export type LocalidadRelationFilter = {
    is?: localidadWhereInput
    isNot?: localidadWhereInput
  }

  export type VideoviewerListRelationFilter = {
    every?: videoviewerWhereInput
    some?: videoviewerWhereInput
    none?: videoviewerWhereInput
  }

  export type matchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type videoviewerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    nombre?: SortOrder
    sexo?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
    buscasexo?: SortOrder
    fotoperfil?: SortOrder
    descripcion?: SortOrder
    tipousuario?: SortOrder
    baneado?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    nombre?: SortOrder
    sexo?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
    buscasexo?: SortOrder
    fotoperfil?: SortOrder
    descripcion?: SortOrder
    tipousuario?: SortOrder
    baneado?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    nombre?: SortOrder
    sexo?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
    buscasexo?: SortOrder
    fotoperfil?: SortOrder
    descripcion?: SortOrder
    tipousuario?: SortOrder
    baneado?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    id?: SortOrder
    edad?: SortOrder
    idlocalidad?: SortOrder
    buscaedadmin?: SortOrder
    buscaedadmax?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type videoviewerIdvideoIdusuarioCompoundUniqueInput = {
    idvideo: string
    idusuario: number
  }

  export type videoviewerCountOrderByAggregateInput = {
    idvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type videoviewerAvgOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type videoviewerMaxOrderByAggregateInput = {
    idvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type videoviewerMinOrderByAggregateInput = {
    idvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type videoviewerSumOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type usuarioCreateNestedOneWithoutFotousuarioInput = {
    create?: XOR<usuarioCreateWithoutFotousuarioInput, usuarioUncheckedCreateWithoutFotousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutFotousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type multimediaCreateNestedOneWithoutFotousuarioInput = {
    create?: XOR<multimediaCreateWithoutFotousuarioInput, multimediaUncheckedCreateWithoutFotousuarioInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutFotousuarioInput
    connect?: multimediaWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutFotousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutFotousuarioInput, usuarioUncheckedCreateWithoutFotousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutFotousuarioInput
    upsert?: usuarioUpsertWithoutFotousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutFotousuarioInput, usuarioUpdateWithoutFotousuarioInput>, usuarioUncheckedUpdateWithoutFotousuarioInput>
  }

  export type multimediaUpdateOneRequiredWithoutFotousuarioNestedInput = {
    create?: XOR<multimediaCreateWithoutFotousuarioInput, multimediaUncheckedCreateWithoutFotousuarioInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutFotousuarioInput
    upsert?: multimediaUpsertWithoutFotousuarioInput
    connect?: multimediaWhereUniqueInput
    update?: XOR<XOR<multimediaUpdateToOneWithWhereWithoutFotousuarioInput, multimediaUpdateWithoutFotousuarioInput>, multimediaUncheckedUpdateWithoutFotousuarioInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usuarioCreateNestedManyWithoutLocalidadInput = {
    create?: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput> | usuarioCreateWithoutLocalidadInput[] | usuarioUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutLocalidadInput | usuarioCreateOrConnectWithoutLocalidadInput[]
    createMany?: usuarioCreateManyLocalidadInputEnvelope
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type usuarioUncheckedCreateNestedManyWithoutLocalidadInput = {
    create?: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput> | usuarioCreateWithoutLocalidadInput[] | usuarioUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutLocalidadInput | usuarioCreateOrConnectWithoutLocalidadInput[]
    createMany?: usuarioCreateManyLocalidadInputEnvelope
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type usuarioUpdateManyWithoutLocalidadNestedInput = {
    create?: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput> | usuarioCreateWithoutLocalidadInput[] | usuarioUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutLocalidadInput | usuarioCreateOrConnectWithoutLocalidadInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutLocalidadInput | usuarioUpsertWithWhereUniqueWithoutLocalidadInput[]
    createMany?: usuarioCreateManyLocalidadInputEnvelope
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutLocalidadInput | usuarioUpdateWithWhereUniqueWithoutLocalidadInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutLocalidadInput | usuarioUpdateManyWithWhereWithoutLocalidadInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type usuarioUncheckedUpdateManyWithoutLocalidadNestedInput = {
    create?: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput> | usuarioCreateWithoutLocalidadInput[] | usuarioUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutLocalidadInput | usuarioCreateOrConnectWithoutLocalidadInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutLocalidadInput | usuarioUpsertWithWhereUniqueWithoutLocalidadInput[]
    createMany?: usuarioCreateManyLocalidadInputEnvelope
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutLocalidadInput | usuarioUpdateWithWhereUniqueWithoutLocalidadInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutLocalidadInput | usuarioUpdateManyWithWhereWithoutLocalidadInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutMatch_match_idusuario1TousuarioInput = {
    create?: XOR<usuarioCreateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario1TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutMatch_match_idusuario1TousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioCreateNestedOneWithoutMatch_match_idusuario2TousuarioInput = {
    create?: XOR<usuarioCreateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario2TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutMatch_match_idusuario2TousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutMatch_match_idusuario1TousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario1TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutMatch_match_idusuario1TousuarioInput
    upsert?: usuarioUpsertWithoutMatch_match_idusuario1TousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutMatch_match_idusuario1TousuarioInput, usuarioUpdateWithoutMatch_match_idusuario1TousuarioInput>, usuarioUncheckedUpdateWithoutMatch_match_idusuario1TousuarioInput>
  }

  export type usuarioUpdateOneRequiredWithoutMatch_match_idusuario2TousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario2TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutMatch_match_idusuario2TousuarioInput
    upsert?: usuarioUpsertWithoutMatch_match_idusuario2TousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutMatch_match_idusuario2TousuarioInput, usuarioUpdateWithoutMatch_match_idusuario2TousuarioInput>, usuarioUncheckedUpdateWithoutMatch_match_idusuario2TousuarioInput>
  }

  export type participaCreateNestedOneWithoutMensajeInput = {
    create?: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: participaCreateOrConnectWithoutMensajeInput
    connect?: participaWhereUniqueInput
  }

  export type multimediaCreateNestedOneWithoutMensajeInput = {
    create?: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutMensajeInput
    connect?: multimediaWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type participaUpdateOneRequiredWithoutMensajeNestedInput = {
    create?: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: participaCreateOrConnectWithoutMensajeInput
    upsert?: participaUpsertWithoutMensajeInput
    connect?: participaWhereUniqueInput
    update?: XOR<XOR<participaUpdateToOneWithWhereWithoutMensajeInput, participaUpdateWithoutMensajeInput>, participaUncheckedUpdateWithoutMensajeInput>
  }

  export type multimediaUpdateOneWithoutMensajeNestedInput = {
    create?: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutMensajeInput
    upsert?: multimediaUpsertWithoutMensajeInput
    disconnect?: multimediaWhereInput | boolean
    delete?: multimediaWhereInput | boolean
    connect?: multimediaWhereUniqueInput
    update?: XOR<XOR<multimediaUpdateToOneWithWhereWithoutMensajeInput, multimediaUpdateWithoutMensajeInput>, multimediaUncheckedUpdateWithoutMensajeInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type fotousuarioCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput> | fotousuarioCreateWithoutMultimediaInput[] | fotousuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutMultimediaInput | fotousuarioCreateOrConnectWithoutMultimediaInput[]
    createMany?: fotousuarioCreateManyMultimediaInputEnvelope
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
  }

  export type mensajeCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type usuarioCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput> | usuarioCreateWithoutMultimediaInput[] | usuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutMultimediaInput | usuarioCreateOrConnectWithoutMultimediaInput[]
    createMany?: usuarioCreateManyMultimediaInputEnvelope
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type fotousuarioUncheckedCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput> | fotousuarioCreateWithoutMultimediaInput[] | fotousuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutMultimediaInput | fotousuarioCreateOrConnectWithoutMultimediaInput[]
    createMany?: fotousuarioCreateManyMultimediaInputEnvelope
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
  }

  export type mensajeUncheckedCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type usuarioUncheckedCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput> | usuarioCreateWithoutMultimediaInput[] | usuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutMultimediaInput | usuarioCreateOrConnectWithoutMultimediaInput[]
    createMany?: usuarioCreateManyMultimediaInputEnvelope
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
  }

  export type fotousuarioUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput> | fotousuarioCreateWithoutMultimediaInput[] | fotousuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutMultimediaInput | fotousuarioCreateOrConnectWithoutMultimediaInput[]
    upsert?: fotousuarioUpsertWithWhereUniqueWithoutMultimediaInput | fotousuarioUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: fotousuarioCreateManyMultimediaInputEnvelope
    set?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    disconnect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    delete?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    update?: fotousuarioUpdateWithWhereUniqueWithoutMultimediaInput | fotousuarioUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: fotousuarioUpdateManyWithWhereWithoutMultimediaInput | fotousuarioUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
  }

  export type mensajeUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutMultimediaInput | mensajeUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutMultimediaInput | mensajeUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutMultimediaInput | mensajeUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type usuarioUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput> | usuarioCreateWithoutMultimediaInput[] | usuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutMultimediaInput | usuarioCreateOrConnectWithoutMultimediaInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutMultimediaInput | usuarioUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: usuarioCreateManyMultimediaInputEnvelope
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutMultimediaInput | usuarioUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutMultimediaInput | usuarioUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type fotousuarioUncheckedUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput> | fotousuarioCreateWithoutMultimediaInput[] | fotousuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutMultimediaInput | fotousuarioCreateOrConnectWithoutMultimediaInput[]
    upsert?: fotousuarioUpsertWithWhereUniqueWithoutMultimediaInput | fotousuarioUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: fotousuarioCreateManyMultimediaInputEnvelope
    set?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    disconnect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    delete?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    update?: fotousuarioUpdateWithWhereUniqueWithoutMultimediaInput | fotousuarioUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: fotousuarioUpdateManyWithWhereWithoutMultimediaInput | fotousuarioUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
  }

  export type mensajeUncheckedUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutMultimediaInput | mensajeUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutMultimediaInput | mensajeUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutMultimediaInput | mensajeUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type usuarioUncheckedUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput> | usuarioCreateWithoutMultimediaInput[] | usuarioUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: usuarioCreateOrConnectWithoutMultimediaInput | usuarioCreateOrConnectWithoutMultimediaInput[]
    upsert?: usuarioUpsertWithWhereUniqueWithoutMultimediaInput | usuarioUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: usuarioCreateManyMultimediaInputEnvelope
    set?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    disconnect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    delete?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    connect?: usuarioWhereUniqueInput | usuarioWhereUniqueInput[]
    update?: usuarioUpdateWithWhereUniqueWithoutMultimediaInput | usuarioUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: usuarioUpdateManyWithWhereWithoutMultimediaInput | usuarioUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
  }

  export type mensajeCreateNestedManyWithoutParticipaInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type salaCreateNestedOneWithoutParticipaInput = {
    create?: XOR<salaCreateWithoutParticipaInput, salaUncheckedCreateWithoutParticipaInput>
    connectOrCreate?: salaCreateOrConnectWithoutParticipaInput
    connect?: salaWhereUniqueInput
  }

  export type usuarioCreateNestedOneWithoutParticipaInput = {
    create?: XOR<usuarioCreateWithoutParticipaInput, usuarioUncheckedCreateWithoutParticipaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipaInput
    connect?: usuarioWhereUniqueInput
  }

  export type mensajeUncheckedCreateNestedManyWithoutParticipaInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type mensajeUpdateManyWithoutParticipaNestedInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutParticipaInput | mensajeUpsertWithWhereUniqueWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutParticipaInput | mensajeUpdateWithWhereUniqueWithoutParticipaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutParticipaInput | mensajeUpdateManyWithWhereWithoutParticipaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type salaUpdateOneRequiredWithoutParticipaNestedInput = {
    create?: XOR<salaCreateWithoutParticipaInput, salaUncheckedCreateWithoutParticipaInput>
    connectOrCreate?: salaCreateOrConnectWithoutParticipaInput
    upsert?: salaUpsertWithoutParticipaInput
    connect?: salaWhereUniqueInput
    update?: XOR<XOR<salaUpdateToOneWithWhereWithoutParticipaInput, salaUpdateWithoutParticipaInput>, salaUncheckedUpdateWithoutParticipaInput>
  }

  export type usuarioUpdateOneRequiredWithoutParticipaNestedInput = {
    create?: XOR<usuarioCreateWithoutParticipaInput, usuarioUncheckedCreateWithoutParticipaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipaInput
    upsert?: usuarioUpsertWithoutParticipaInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutParticipaInput, usuarioUpdateWithoutParticipaInput>, usuarioUncheckedUpdateWithoutParticipaInput>
  }

  export type mensajeUncheckedUpdateManyWithoutParticipaNestedInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutParticipaInput | mensajeUpsertWithWhereUniqueWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutParticipaInput | mensajeUpdateWithWhereUniqueWithoutParticipaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutParticipaInput | mensajeUpdateManyWithWhereWithoutParticipaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type participaCreateNestedManyWithoutSalaInput = {
    create?: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput> | participaCreateWithoutSalaInput[] | participaUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSalaInput | participaCreateOrConnectWithoutSalaInput[]
    createMany?: participaCreateManySalaInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type participaUncheckedCreateNestedManyWithoutSalaInput = {
    create?: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput> | participaCreateWithoutSalaInput[] | participaUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSalaInput | participaCreateOrConnectWithoutSalaInput[]
    createMany?: participaCreateManySalaInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type participaUpdateManyWithoutSalaNestedInput = {
    create?: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput> | participaCreateWithoutSalaInput[] | participaUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSalaInput | participaCreateOrConnectWithoutSalaInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutSalaInput | participaUpsertWithWhereUniqueWithoutSalaInput[]
    createMany?: participaCreateManySalaInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutSalaInput | participaUpdateWithWhereUniqueWithoutSalaInput[]
    updateMany?: participaUpdateManyWithWhereWithoutSalaInput | participaUpdateManyWithWhereWithoutSalaInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type participaUncheckedUpdateManyWithoutSalaNestedInput = {
    create?: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput> | participaCreateWithoutSalaInput[] | participaUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSalaInput | participaCreateOrConnectWithoutSalaInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutSalaInput | participaUpsertWithWhereUniqueWithoutSalaInput[]
    createMany?: participaCreateManySalaInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutSalaInput | participaUpdateWithWhereUniqueWithoutSalaInput[]
    updateMany?: participaUpdateManyWithWhereWithoutSalaInput | participaUpdateManyWithWhereWithoutSalaInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type fotousuarioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput> | fotousuarioCreateWithoutUsuarioInput[] | fotousuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutUsuarioInput | fotousuarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: fotousuarioCreateManyUsuarioInputEnvelope
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
  }

  export type matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput> | matchCreateWithoutUsuario_match_idusuario1TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario1TousuarioInputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput> | matchCreateWithoutUsuario_match_idusuario2TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario2TousuarioInputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type participaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput> | participaCreateWithoutUsuarioInput[] | participaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuarioInput | participaCreateOrConnectWithoutUsuarioInput[]
    createMany?: participaCreateManyUsuarioInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type multimediaCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<multimediaCreateWithoutUsuarioInput, multimediaUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutUsuarioInput
    connect?: multimediaWhereUniqueInput
  }

  export type localidadCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<localidadCreateWithoutUsuarioInput, localidadUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: localidadCreateOrConnectWithoutUsuarioInput
    connect?: localidadWhereUniqueInput
  }

  export type videoviewerCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput> | videoviewerCreateWithoutUsuarioInput[] | videoviewerUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoviewerCreateOrConnectWithoutUsuarioInput | videoviewerCreateOrConnectWithoutUsuarioInput[]
    createMany?: videoviewerCreateManyUsuarioInputEnvelope
    connect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
  }

  export type fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput> | fotousuarioCreateWithoutUsuarioInput[] | fotousuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutUsuarioInput | fotousuarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: fotousuarioCreateManyUsuarioInputEnvelope
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
  }

  export type matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput> | matchCreateWithoutUsuario_match_idusuario1TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario1TousuarioInputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput> | matchCreateWithoutUsuario_match_idusuario2TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario2TousuarioInputEnvelope
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
  }

  export type participaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput> | participaCreateWithoutUsuarioInput[] | participaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuarioInput | participaCreateOrConnectWithoutUsuarioInput[]
    createMany?: participaCreateManyUsuarioInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type videoviewerUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput> | videoviewerCreateWithoutUsuarioInput[] | videoviewerUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoviewerCreateOrConnectWithoutUsuarioInput | videoviewerCreateOrConnectWithoutUsuarioInput[]
    createMany?: videoviewerCreateManyUsuarioInputEnvelope
    connect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type fotousuarioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput> | fotousuarioCreateWithoutUsuarioInput[] | fotousuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutUsuarioInput | fotousuarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: fotousuarioUpsertWithWhereUniqueWithoutUsuarioInput | fotousuarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: fotousuarioCreateManyUsuarioInputEnvelope
    set?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    disconnect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    delete?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    update?: fotousuarioUpdateWithWhereUniqueWithoutUsuarioInput | fotousuarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: fotousuarioUpdateManyWithWhereWithoutUsuarioInput | fotousuarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
  }

  export type matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput> | matchCreateWithoutUsuario_match_idusuario1TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput[]
    upsert?: matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput | matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario1TousuarioInputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput | matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput[]
    updateMany?: matchUpdateManyWithWhereWithoutUsuario_match_idusuario1TousuarioInput | matchUpdateManyWithWhereWithoutUsuario_match_idusuario1TousuarioInput[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput> | matchCreateWithoutUsuario_match_idusuario2TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput[]
    upsert?: matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput | matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario2TousuarioInputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput | matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput[]
    updateMany?: matchUpdateManyWithWhereWithoutUsuario_match_idusuario2TousuarioInput | matchUpdateManyWithWhereWithoutUsuario_match_idusuario2TousuarioInput[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type participaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput> | participaCreateWithoutUsuarioInput[] | participaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuarioInput | participaCreateOrConnectWithoutUsuarioInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutUsuarioInput | participaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: participaCreateManyUsuarioInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutUsuarioInput | participaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: participaUpdateManyWithWhereWithoutUsuarioInput | participaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type multimediaUpdateOneRequiredWithoutUsuarioNestedInput = {
    create?: XOR<multimediaCreateWithoutUsuarioInput, multimediaUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutUsuarioInput
    upsert?: multimediaUpsertWithoutUsuarioInput
    connect?: multimediaWhereUniqueInput
    update?: XOR<XOR<multimediaUpdateToOneWithWhereWithoutUsuarioInput, multimediaUpdateWithoutUsuarioInput>, multimediaUncheckedUpdateWithoutUsuarioInput>
  }

  export type localidadUpdateOneRequiredWithoutUsuarioNestedInput = {
    create?: XOR<localidadCreateWithoutUsuarioInput, localidadUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: localidadCreateOrConnectWithoutUsuarioInput
    upsert?: localidadUpsertWithoutUsuarioInput
    connect?: localidadWhereUniqueInput
    update?: XOR<XOR<localidadUpdateToOneWithWhereWithoutUsuarioInput, localidadUpdateWithoutUsuarioInput>, localidadUncheckedUpdateWithoutUsuarioInput>
  }

  export type videoviewerUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput> | videoviewerCreateWithoutUsuarioInput[] | videoviewerUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoviewerCreateOrConnectWithoutUsuarioInput | videoviewerCreateOrConnectWithoutUsuarioInput[]
    upsert?: videoviewerUpsertWithWhereUniqueWithoutUsuarioInput | videoviewerUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: videoviewerCreateManyUsuarioInputEnvelope
    set?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    disconnect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    delete?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    connect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    update?: videoviewerUpdateWithWhereUniqueWithoutUsuarioInput | videoviewerUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: videoviewerUpdateManyWithWhereWithoutUsuarioInput | videoviewerUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: videoviewerScalarWhereInput | videoviewerScalarWhereInput[]
  }

  export type fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput> | fotousuarioCreateWithoutUsuarioInput[] | fotousuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: fotousuarioCreateOrConnectWithoutUsuarioInput | fotousuarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: fotousuarioUpsertWithWhereUniqueWithoutUsuarioInput | fotousuarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: fotousuarioCreateManyUsuarioInputEnvelope
    set?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    disconnect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    delete?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    connect?: fotousuarioWhereUniqueInput | fotousuarioWhereUniqueInput[]
    update?: fotousuarioUpdateWithWhereUniqueWithoutUsuarioInput | fotousuarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: fotousuarioUpdateManyWithWhereWithoutUsuarioInput | fotousuarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
  }

  export type matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput> | matchCreateWithoutUsuario_match_idusuario1TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput[]
    upsert?: matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput | matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario1TousuarioInputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput | matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput[]
    updateMany?: matchUpdateManyWithWhereWithoutUsuario_match_idusuario1TousuarioInput | matchUpdateManyWithWhereWithoutUsuario_match_idusuario1TousuarioInput[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput = {
    create?: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput> | matchCreateWithoutUsuario_match_idusuario2TousuarioInput[] | matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput[]
    connectOrCreate?: matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput | matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput[]
    upsert?: matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput | matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput[]
    createMany?: matchCreateManyUsuario_match_idusuario2TousuarioInputEnvelope
    set?: matchWhereUniqueInput | matchWhereUniqueInput[]
    disconnect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    delete?: matchWhereUniqueInput | matchWhereUniqueInput[]
    connect?: matchWhereUniqueInput | matchWhereUniqueInput[]
    update?: matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput | matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput[]
    updateMany?: matchUpdateManyWithWhereWithoutUsuario_match_idusuario2TousuarioInput | matchUpdateManyWithWhereWithoutUsuario_match_idusuario2TousuarioInput[]
    deleteMany?: matchScalarWhereInput | matchScalarWhereInput[]
  }

  export type participaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput> | participaCreateWithoutUsuarioInput[] | participaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuarioInput | participaCreateOrConnectWithoutUsuarioInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutUsuarioInput | participaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: participaCreateManyUsuarioInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutUsuarioInput | participaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: participaUpdateManyWithWhereWithoutUsuarioInput | participaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput> | videoviewerCreateWithoutUsuarioInput[] | videoviewerUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoviewerCreateOrConnectWithoutUsuarioInput | videoviewerCreateOrConnectWithoutUsuarioInput[]
    upsert?: videoviewerUpsertWithWhereUniqueWithoutUsuarioInput | videoviewerUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: videoviewerCreateManyUsuarioInputEnvelope
    set?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    disconnect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    delete?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    connect?: videoviewerWhereUniqueInput | videoviewerWhereUniqueInput[]
    update?: videoviewerUpdateWithWhereUniqueWithoutUsuarioInput | videoviewerUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: videoviewerUpdateManyWithWhereWithoutUsuarioInput | videoviewerUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: videoviewerScalarWhereInput | videoviewerScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutVideoviewerInput = {
    create?: XOR<usuarioCreateWithoutVideoviewerInput, usuarioUncheckedCreateWithoutVideoviewerInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVideoviewerInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutVideoviewerNestedInput = {
    create?: XOR<usuarioCreateWithoutVideoviewerInput, usuarioUncheckedCreateWithoutVideoviewerInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVideoviewerInput
    upsert?: usuarioUpsertWithoutVideoviewerInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutVideoviewerInput, usuarioUpdateWithoutVideoviewerInput>, usuarioUncheckedUpdateWithoutVideoviewerInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type usuarioCreateWithoutFotousuarioInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutFotousuarioInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutFotousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutFotousuarioInput, usuarioUncheckedCreateWithoutFotousuarioInput>
  }

  export type multimediaCreateWithoutFotousuarioInput = {
    ruta: string
    tipomultimedia: string
    mensaje?: mensajeCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUncheckedCreateWithoutFotousuarioInput = {
    ruta: string
    tipomultimedia: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioUncheckedCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaCreateOrConnectWithoutFotousuarioInput = {
    where: multimediaWhereUniqueInput
    create: XOR<multimediaCreateWithoutFotousuarioInput, multimediaUncheckedCreateWithoutFotousuarioInput>
  }

  export type usuarioUpsertWithoutFotousuarioInput = {
    update: XOR<usuarioUpdateWithoutFotousuarioInput, usuarioUncheckedUpdateWithoutFotousuarioInput>
    create: XOR<usuarioCreateWithoutFotousuarioInput, usuarioUncheckedCreateWithoutFotousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutFotousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutFotousuarioInput, usuarioUncheckedUpdateWithoutFotousuarioInput>
  }

  export type usuarioUpdateWithoutFotousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutFotousuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type multimediaUpsertWithoutFotousuarioInput = {
    update: XOR<multimediaUpdateWithoutFotousuarioInput, multimediaUncheckedUpdateWithoutFotousuarioInput>
    create: XOR<multimediaCreateWithoutFotousuarioInput, multimediaUncheckedCreateWithoutFotousuarioInput>
    where?: multimediaWhereInput
  }

  export type multimediaUpdateToOneWithWhereWithoutFotousuarioInput = {
    where?: multimediaWhereInput
    data: XOR<multimediaUpdateWithoutFotousuarioInput, multimediaUncheckedUpdateWithoutFotousuarioInput>
  }

  export type multimediaUpdateWithoutFotousuarioInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaUncheckedUpdateWithoutFotousuarioInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUncheckedUpdateManyWithoutMultimediaNestedInput
  }

  export type usuarioCreateWithoutLocalidadInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutLocalidadInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutLocalidadInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput>
  }

  export type usuarioCreateManyLocalidadInputEnvelope = {
    data: usuarioCreateManyLocalidadInput | usuarioCreateManyLocalidadInput[]
    skipDuplicates?: boolean
  }

  export type usuarioUpsertWithWhereUniqueWithoutLocalidadInput = {
    where: usuarioWhereUniqueInput
    update: XOR<usuarioUpdateWithoutLocalidadInput, usuarioUncheckedUpdateWithoutLocalidadInput>
    create: XOR<usuarioCreateWithoutLocalidadInput, usuarioUncheckedCreateWithoutLocalidadInput>
  }

  export type usuarioUpdateWithWhereUniqueWithoutLocalidadInput = {
    where: usuarioWhereUniqueInput
    data: XOR<usuarioUpdateWithoutLocalidadInput, usuarioUncheckedUpdateWithoutLocalidadInput>
  }

  export type usuarioUpdateManyWithWhereWithoutLocalidadInput = {
    where: usuarioScalarWhereInput
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyWithoutLocalidadInput>
  }

  export type usuarioScalarWhereInput = {
    AND?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
    OR?: usuarioScalarWhereInput[]
    NOT?: usuarioScalarWhereInput | usuarioScalarWhereInput[]
    id?: IntFilter<"usuario"> | number
    correo?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    nombre?: StringFilter<"usuario"> | string
    sexo?: StringFilter<"usuario"> | string
    edad?: IntFilter<"usuario"> | number
    idlocalidad?: IntFilter<"usuario"> | number
    buscaedadmin?: IntFilter<"usuario"> | number
    buscaedadmax?: IntFilter<"usuario"> | number
    buscasexo?: StringFilter<"usuario"> | string
    fotoperfil?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    tipousuario?: StringFilter<"usuario"> | string
    baneado?: BoolFilter<"usuario"> | boolean
  }

  export type usuarioCreateWithoutMatch_match_idusuario1TousuarioInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutMatch_match_idusuario1TousuarioInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutMatch_match_idusuario1TousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario1TousuarioInput>
  }

  export type usuarioCreateWithoutMatch_match_idusuario2TousuarioInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutMatch_match_idusuario2TousuarioInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutMatch_match_idusuario2TousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario2TousuarioInput>
  }

  export type usuarioUpsertWithoutMatch_match_idusuario1TousuarioInput = {
    update: XOR<usuarioUpdateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedUpdateWithoutMatch_match_idusuario1TousuarioInput>
    create: XOR<usuarioCreateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario1TousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutMatch_match_idusuario1TousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutMatch_match_idusuario1TousuarioInput, usuarioUncheckedUpdateWithoutMatch_match_idusuario1TousuarioInput>
  }

  export type usuarioUpdateWithoutMatch_match_idusuario1TousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutMatch_match_idusuario1TousuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUpsertWithoutMatch_match_idusuario2TousuarioInput = {
    update: XOR<usuarioUpdateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedUpdateWithoutMatch_match_idusuario2TousuarioInput>
    create: XOR<usuarioCreateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutMatch_match_idusuario2TousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutMatch_match_idusuario2TousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutMatch_match_idusuario2TousuarioInput, usuarioUncheckedUpdateWithoutMatch_match_idusuario2TousuarioInput>
  }

  export type usuarioUpdateWithoutMatch_match_idusuario2TousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutMatch_match_idusuario2TousuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type participaCreateWithoutMensajeInput = {
    estado: string
    sala: salaCreateNestedOneWithoutParticipaInput
    usuario: usuarioCreateNestedOneWithoutParticipaInput
  }

  export type participaUncheckedCreateWithoutMensajeInput = {
    idsala: number
    idusuario: number
    estado: string
  }

  export type participaCreateOrConnectWithoutMensajeInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
  }

  export type multimediaCreateWithoutMensajeInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUncheckedCreateWithoutMensajeInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutMultimediaInput
    usuario?: usuarioUncheckedCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaCreateOrConnectWithoutMensajeInput = {
    where: multimediaWhereUniqueInput
    create: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
  }

  export type participaUpsertWithoutMensajeInput = {
    update: XOR<participaUpdateWithoutMensajeInput, participaUncheckedUpdateWithoutMensajeInput>
    create: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    where?: participaWhereInput
  }

  export type participaUpdateToOneWithWhereWithoutMensajeInput = {
    where?: participaWhereInput
    data: XOR<participaUpdateWithoutMensajeInput, participaUncheckedUpdateWithoutMensajeInput>
  }

  export type participaUpdateWithoutMensajeInput = {
    estado?: StringFieldUpdateOperationsInput | string
    sala?: salaUpdateOneRequiredWithoutParticipaNestedInput
    usuario?: usuarioUpdateOneRequiredWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateWithoutMensajeInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type multimediaUpsertWithoutMensajeInput = {
    update: XOR<multimediaUpdateWithoutMensajeInput, multimediaUncheckedUpdateWithoutMensajeInput>
    create: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    where?: multimediaWhereInput
  }

  export type multimediaUpdateToOneWithWhereWithoutMensajeInput = {
    where?: multimediaWhereInput
    data: XOR<multimediaUpdateWithoutMensajeInput, multimediaUncheckedUpdateWithoutMensajeInput>
  }

  export type multimediaUpdateWithoutMensajeInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaUncheckedUpdateWithoutMensajeInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutMultimediaNestedInput
    usuario?: usuarioUncheckedUpdateManyWithoutMultimediaNestedInput
  }

  export type fotousuarioCreateWithoutMultimediaInput = {
    usuario: usuarioCreateNestedOneWithoutFotousuarioInput
  }

  export type fotousuarioUncheckedCreateWithoutMultimediaInput = {
    idusuario: number
  }

  export type fotousuarioCreateOrConnectWithoutMultimediaInput = {
    where: fotousuarioWhereUniqueInput
    create: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput>
  }

  export type fotousuarioCreateManyMultimediaInputEnvelope = {
    data: fotousuarioCreateManyMultimediaInput | fotousuarioCreateManyMultimediaInput[]
    skipDuplicates?: boolean
  }

  export type mensajeCreateWithoutMultimediaInput = {
    texto: string
    fechahora: Date | string
    participa: participaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateWithoutMultimediaInput = {
    id?: number
    idsala: number
    idusuario: number
    texto: string
    fechahora: Date | string
  }

  export type mensajeCreateOrConnectWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    create: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput>
  }

  export type mensajeCreateManyMultimediaInputEnvelope = {
    data: mensajeCreateManyMultimediaInput | mensajeCreateManyMultimediaInput[]
    skipDuplicates?: boolean
  }

  export type usuarioCreateWithoutMultimediaInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutMultimediaInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutMultimediaInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput>
  }

  export type usuarioCreateManyMultimediaInputEnvelope = {
    data: usuarioCreateManyMultimediaInput | usuarioCreateManyMultimediaInput[]
    skipDuplicates?: boolean
  }

  export type fotousuarioUpsertWithWhereUniqueWithoutMultimediaInput = {
    where: fotousuarioWhereUniqueInput
    update: XOR<fotousuarioUpdateWithoutMultimediaInput, fotousuarioUncheckedUpdateWithoutMultimediaInput>
    create: XOR<fotousuarioCreateWithoutMultimediaInput, fotousuarioUncheckedCreateWithoutMultimediaInput>
  }

  export type fotousuarioUpdateWithWhereUniqueWithoutMultimediaInput = {
    where: fotousuarioWhereUniqueInput
    data: XOR<fotousuarioUpdateWithoutMultimediaInput, fotousuarioUncheckedUpdateWithoutMultimediaInput>
  }

  export type fotousuarioUpdateManyWithWhereWithoutMultimediaInput = {
    where: fotousuarioScalarWhereInput
    data: XOR<fotousuarioUpdateManyMutationInput, fotousuarioUncheckedUpdateManyWithoutMultimediaInput>
  }

  export type fotousuarioScalarWhereInput = {
    AND?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
    OR?: fotousuarioScalarWhereInput[]
    NOT?: fotousuarioScalarWhereInput | fotousuarioScalarWhereInput[]
    rutafoto?: StringFilter<"fotousuario"> | string
    idusuario?: IntFilter<"fotousuario"> | number
  }

  export type mensajeUpsertWithWhereUniqueWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    update: XOR<mensajeUpdateWithoutMultimediaInput, mensajeUncheckedUpdateWithoutMultimediaInput>
    create: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput>
  }

  export type mensajeUpdateWithWhereUniqueWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    data: XOR<mensajeUpdateWithoutMultimediaInput, mensajeUncheckedUpdateWithoutMultimediaInput>
  }

  export type mensajeUpdateManyWithWhereWithoutMultimediaInput = {
    where: mensajeScalarWhereInput
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyWithoutMultimediaInput>
  }

  export type mensajeScalarWhereInput = {
    AND?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
    OR?: mensajeScalarWhereInput[]
    NOT?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
    id?: IntFilter<"mensaje"> | number
    idsala?: IntFilter<"mensaje"> | number
    idusuario?: IntFilter<"mensaje"> | number
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeFilter<"mensaje"> | Date | string
    rutamultimedia?: StringNullableFilter<"mensaje"> | string | null
  }

  export type usuarioUpsertWithWhereUniqueWithoutMultimediaInput = {
    where: usuarioWhereUniqueInput
    update: XOR<usuarioUpdateWithoutMultimediaInput, usuarioUncheckedUpdateWithoutMultimediaInput>
    create: XOR<usuarioCreateWithoutMultimediaInput, usuarioUncheckedCreateWithoutMultimediaInput>
  }

  export type usuarioUpdateWithWhereUniqueWithoutMultimediaInput = {
    where: usuarioWhereUniqueInput
    data: XOR<usuarioUpdateWithoutMultimediaInput, usuarioUncheckedUpdateWithoutMultimediaInput>
  }

  export type usuarioUpdateManyWithWhereWithoutMultimediaInput = {
    where: usuarioScalarWhereInput
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyWithoutMultimediaInput>
  }

  export type mensajeCreateWithoutParticipaInput = {
    texto: string
    fechahora: Date | string
    multimedia?: multimediaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateWithoutParticipaInput = {
    id?: number
    texto: string
    fechahora: Date | string
    rutamultimedia?: string | null
  }

  export type mensajeCreateOrConnectWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    create: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput>
  }

  export type mensajeCreateManyParticipaInputEnvelope = {
    data: mensajeCreateManyParticipaInput | mensajeCreateManyParticipaInput[]
    skipDuplicates?: boolean
  }

  export type salaCreateWithoutParticipaInput = {
    idvideo: string
  }

  export type salaUncheckedCreateWithoutParticipaInput = {
    id?: number
    idvideo: string
  }

  export type salaCreateOrConnectWithoutParticipaInput = {
    where: salaWhereUniqueInput
    create: XOR<salaCreateWithoutParticipaInput, salaUncheckedCreateWithoutParticipaInput>
  }

  export type usuarioCreateWithoutParticipaInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
    videoviewer?: videoviewerCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutParticipaInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    videoviewer?: videoviewerUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutParticipaInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutParticipaInput, usuarioUncheckedCreateWithoutParticipaInput>
  }

  export type mensajeUpsertWithWhereUniqueWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    update: XOR<mensajeUpdateWithoutParticipaInput, mensajeUncheckedUpdateWithoutParticipaInput>
    create: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput>
  }

  export type mensajeUpdateWithWhereUniqueWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    data: XOR<mensajeUpdateWithoutParticipaInput, mensajeUncheckedUpdateWithoutParticipaInput>
  }

  export type mensajeUpdateManyWithWhereWithoutParticipaInput = {
    where: mensajeScalarWhereInput
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyWithoutParticipaInput>
  }

  export type salaUpsertWithoutParticipaInput = {
    update: XOR<salaUpdateWithoutParticipaInput, salaUncheckedUpdateWithoutParticipaInput>
    create: XOR<salaCreateWithoutParticipaInput, salaUncheckedCreateWithoutParticipaInput>
    where?: salaWhereInput
  }

  export type salaUpdateToOneWithWhereWithoutParticipaInput = {
    where?: salaWhereInput
    data: XOR<salaUpdateWithoutParticipaInput, salaUncheckedUpdateWithoutParticipaInput>
  }

  export type salaUpdateWithoutParticipaInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type salaUncheckedUpdateWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUpsertWithoutParticipaInput = {
    update: XOR<usuarioUpdateWithoutParticipaInput, usuarioUncheckedUpdateWithoutParticipaInput>
    create: XOR<usuarioCreateWithoutParticipaInput, usuarioUncheckedCreateWithoutParticipaInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutParticipaInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutParticipaInput, usuarioUncheckedUpdateWithoutParticipaInput>
  }

  export type usuarioUpdateWithoutParticipaInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type participaCreateWithoutSalaInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    usuario: usuarioCreateNestedOneWithoutParticipaInput
  }

  export type participaUncheckedCreateWithoutSalaInput = {
    idusuario: number
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaCreateOrConnectWithoutSalaInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput>
  }

  export type participaCreateManySalaInputEnvelope = {
    data: participaCreateManySalaInput | participaCreateManySalaInput[]
    skipDuplicates?: boolean
  }

  export type participaUpsertWithWhereUniqueWithoutSalaInput = {
    where: participaWhereUniqueInput
    update: XOR<participaUpdateWithoutSalaInput, participaUncheckedUpdateWithoutSalaInput>
    create: XOR<participaCreateWithoutSalaInput, participaUncheckedCreateWithoutSalaInput>
  }

  export type participaUpdateWithWhereUniqueWithoutSalaInput = {
    where: participaWhereUniqueInput
    data: XOR<participaUpdateWithoutSalaInput, participaUncheckedUpdateWithoutSalaInput>
  }

  export type participaUpdateManyWithWhereWithoutSalaInput = {
    where: participaScalarWhereInput
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyWithoutSalaInput>
  }

  export type participaScalarWhereInput = {
    AND?: participaScalarWhereInput | participaScalarWhereInput[]
    OR?: participaScalarWhereInput[]
    NOT?: participaScalarWhereInput | participaScalarWhereInput[]
    idsala?: IntFilter<"participa"> | number
    idusuario?: IntFilter<"participa"> | number
    estado?: StringFilter<"participa"> | string
  }

  export type fotousuarioCreateWithoutUsuarioInput = {
    multimedia: multimediaCreateNestedOneWithoutFotousuarioInput
  }

  export type fotousuarioUncheckedCreateWithoutUsuarioInput = {
    rutafoto: string
  }

  export type fotousuarioCreateOrConnectWithoutUsuarioInput = {
    where: fotousuarioWhereUniqueInput
    create: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type fotousuarioCreateManyUsuarioInputEnvelope = {
    data: fotousuarioCreateManyUsuarioInput | fotousuarioCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type matchCreateWithoutUsuario_match_idusuario1TousuarioInput = {
    usuario_match_idusuario2Tousuario: usuarioCreateNestedOneWithoutMatch_match_idusuario2TousuarioInput
  }

  export type matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput = {
    idusuario2: number
  }

  export type matchCreateOrConnectWithoutUsuario_match_idusuario1TousuarioInput = {
    where: matchWhereUniqueInput
    create: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput>
  }

  export type matchCreateManyUsuario_match_idusuario1TousuarioInputEnvelope = {
    data: matchCreateManyUsuario_match_idusuario1TousuarioInput | matchCreateManyUsuario_match_idusuario1TousuarioInput[]
    skipDuplicates?: boolean
  }

  export type matchCreateWithoutUsuario_match_idusuario2TousuarioInput = {
    usuario_match_idusuario1Tousuario: usuarioCreateNestedOneWithoutMatch_match_idusuario1TousuarioInput
  }

  export type matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput = {
    idusuario1: number
  }

  export type matchCreateOrConnectWithoutUsuario_match_idusuario2TousuarioInput = {
    where: matchWhereUniqueInput
    create: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput>
  }

  export type matchCreateManyUsuario_match_idusuario2TousuarioInputEnvelope = {
    data: matchCreateManyUsuario_match_idusuario2TousuarioInput | matchCreateManyUsuario_match_idusuario2TousuarioInput[]
    skipDuplicates?: boolean
  }

  export type participaCreateWithoutUsuarioInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    sala: salaCreateNestedOneWithoutParticipaInput
  }

  export type participaUncheckedCreateWithoutUsuarioInput = {
    idsala: number
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaCreateOrConnectWithoutUsuarioInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput>
  }

  export type participaCreateManyUsuarioInputEnvelope = {
    data: participaCreateManyUsuarioInput | participaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type multimediaCreateWithoutUsuarioInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioCreateNestedManyWithoutMultimediaInput
    mensaje?: mensajeCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUncheckedCreateWithoutUsuarioInput = {
    ruta: string
    tipomultimedia: string
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutMultimediaInput
    mensaje?: mensajeUncheckedCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaCreateOrConnectWithoutUsuarioInput = {
    where: multimediaWhereUniqueInput
    create: XOR<multimediaCreateWithoutUsuarioInput, multimediaUncheckedCreateWithoutUsuarioInput>
  }

  export type localidadCreateWithoutUsuarioInput = {
    nombre: string
  }

  export type localidadUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nombre: string
  }

  export type localidadCreateOrConnectWithoutUsuarioInput = {
    where: localidadWhereUniqueInput
    create: XOR<localidadCreateWithoutUsuarioInput, localidadUncheckedCreateWithoutUsuarioInput>
  }

  export type videoviewerCreateWithoutUsuarioInput = {
    idvideo: string
  }

  export type videoviewerUncheckedCreateWithoutUsuarioInput = {
    idvideo: string
  }

  export type videoviewerCreateOrConnectWithoutUsuarioInput = {
    where: videoviewerWhereUniqueInput
    create: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput>
  }

  export type videoviewerCreateManyUsuarioInputEnvelope = {
    data: videoviewerCreateManyUsuarioInput | videoviewerCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type fotousuarioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: fotousuarioWhereUniqueInput
    update: XOR<fotousuarioUpdateWithoutUsuarioInput, fotousuarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<fotousuarioCreateWithoutUsuarioInput, fotousuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type fotousuarioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: fotousuarioWhereUniqueInput
    data: XOR<fotousuarioUpdateWithoutUsuarioInput, fotousuarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type fotousuarioUpdateManyWithWhereWithoutUsuarioInput = {
    where: fotousuarioScalarWhereInput
    data: XOR<fotousuarioUpdateManyMutationInput, fotousuarioUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput = {
    where: matchWhereUniqueInput
    update: XOR<matchUpdateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedUpdateWithoutUsuario_match_idusuario1TousuarioInput>
    create: XOR<matchCreateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario1TousuarioInput>
  }

  export type matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario1TousuarioInput = {
    where: matchWhereUniqueInput
    data: XOR<matchUpdateWithoutUsuario_match_idusuario1TousuarioInput, matchUncheckedUpdateWithoutUsuario_match_idusuario1TousuarioInput>
  }

  export type matchUpdateManyWithWhereWithoutUsuario_match_idusuario1TousuarioInput = {
    where: matchScalarWhereInput
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioInput>
  }

  export type matchScalarWhereInput = {
    AND?: matchScalarWhereInput | matchScalarWhereInput[]
    OR?: matchScalarWhereInput[]
    NOT?: matchScalarWhereInput | matchScalarWhereInput[]
    idusuario1?: IntFilter<"match"> | number
    idusuario2?: IntFilter<"match"> | number
  }

  export type matchUpsertWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput = {
    where: matchWhereUniqueInput
    update: XOR<matchUpdateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedUpdateWithoutUsuario_match_idusuario2TousuarioInput>
    create: XOR<matchCreateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedCreateWithoutUsuario_match_idusuario2TousuarioInput>
  }

  export type matchUpdateWithWhereUniqueWithoutUsuario_match_idusuario2TousuarioInput = {
    where: matchWhereUniqueInput
    data: XOR<matchUpdateWithoutUsuario_match_idusuario2TousuarioInput, matchUncheckedUpdateWithoutUsuario_match_idusuario2TousuarioInput>
  }

  export type matchUpdateManyWithWhereWithoutUsuario_match_idusuario2TousuarioInput = {
    where: matchScalarWhereInput
    data: XOR<matchUpdateManyMutationInput, matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioInput>
  }

  export type participaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: participaWhereUniqueInput
    update: XOR<participaUpdateWithoutUsuarioInput, participaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<participaCreateWithoutUsuarioInput, participaUncheckedCreateWithoutUsuarioInput>
  }

  export type participaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: participaWhereUniqueInput
    data: XOR<participaUpdateWithoutUsuarioInput, participaUncheckedUpdateWithoutUsuarioInput>
  }

  export type participaUpdateManyWithWhereWithoutUsuarioInput = {
    where: participaScalarWhereInput
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type multimediaUpsertWithoutUsuarioInput = {
    update: XOR<multimediaUpdateWithoutUsuarioInput, multimediaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<multimediaCreateWithoutUsuarioInput, multimediaUncheckedCreateWithoutUsuarioInput>
    where?: multimediaWhereInput
  }

  export type multimediaUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: multimediaWhereInput
    data: XOR<multimediaUpdateWithoutUsuarioInput, multimediaUncheckedUpdateWithoutUsuarioInput>
  }

  export type multimediaUpdateWithoutUsuarioInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUpdateManyWithoutMultimediaNestedInput
    mensaje?: mensajeUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaUncheckedUpdateWithoutUsuarioInput = {
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutMultimediaNestedInput
    mensaje?: mensajeUncheckedUpdateManyWithoutMultimediaNestedInput
  }

  export type localidadUpsertWithoutUsuarioInput = {
    update: XOR<localidadUpdateWithoutUsuarioInput, localidadUncheckedUpdateWithoutUsuarioInput>
    create: XOR<localidadCreateWithoutUsuarioInput, localidadUncheckedCreateWithoutUsuarioInput>
    where?: localidadWhereInput
  }

  export type localidadUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: localidadWhereInput
    data: XOR<localidadUpdateWithoutUsuarioInput, localidadUncheckedUpdateWithoutUsuarioInput>
  }

  export type localidadUpdateWithoutUsuarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type localidadUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type videoviewerUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: videoviewerWhereUniqueInput
    update: XOR<videoviewerUpdateWithoutUsuarioInput, videoviewerUncheckedUpdateWithoutUsuarioInput>
    create: XOR<videoviewerCreateWithoutUsuarioInput, videoviewerUncheckedCreateWithoutUsuarioInput>
  }

  export type videoviewerUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: videoviewerWhereUniqueInput
    data: XOR<videoviewerUpdateWithoutUsuarioInput, videoviewerUncheckedUpdateWithoutUsuarioInput>
  }

  export type videoviewerUpdateManyWithWhereWithoutUsuarioInput = {
    where: videoviewerScalarWhereInput
    data: XOR<videoviewerUpdateManyMutationInput, videoviewerUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type videoviewerScalarWhereInput = {
    AND?: videoviewerScalarWhereInput | videoviewerScalarWhereInput[]
    OR?: videoviewerScalarWhereInput[]
    NOT?: videoviewerScalarWhereInput | videoviewerScalarWhereInput[]
    idvideo?: StringFilter<"videoviewer"> | string
    idusuario?: IntFilter<"videoviewer"> | number
  }

  export type usuarioCreateWithoutVideoviewerInput = {
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaCreateNestedManyWithoutUsuarioInput
    multimedia: multimediaCreateNestedOneWithoutUsuarioInput
    localidad: localidadCreateNestedOneWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutVideoviewerInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
    fotousuario?: fotousuarioUncheckedCreateNestedManyWithoutUsuarioInput
    match_match_idusuario1Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario1TousuarioInput
    match_match_idusuario2Tousuario?: matchUncheckedCreateNestedManyWithoutUsuario_match_idusuario2TousuarioInput
    participa?: participaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutVideoviewerInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutVideoviewerInput, usuarioUncheckedCreateWithoutVideoviewerInput>
  }

  export type usuarioUpsertWithoutVideoviewerInput = {
    update: XOR<usuarioUpdateWithoutVideoviewerInput, usuarioUncheckedUpdateWithoutVideoviewerInput>
    create: XOR<usuarioCreateWithoutVideoviewerInput, usuarioUncheckedCreateWithoutVideoviewerInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutVideoviewerInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutVideoviewerInput, usuarioUncheckedUpdateWithoutVideoviewerInput>
  }

  export type usuarioUpdateWithoutVideoviewerInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutVideoviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyLocalidadInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    fotoperfil: string
    descripcion: string
    tipousuario: string
    baneado: boolean
  }

  export type usuarioUpdateWithoutLocalidadInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    multimedia?: multimediaUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutLocalidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateManyWithoutLocalidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    fotoperfil?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type fotousuarioCreateManyMultimediaInput = {
    idusuario: number
  }

  export type mensajeCreateManyMultimediaInput = {
    id?: number
    idsala: number
    idusuario: number
    texto: string
    fechahora: Date | string
  }

  export type usuarioCreateManyMultimediaInput = {
    id?: number
    correo: string
    contrasena: string
    nombre: string
    sexo: string
    edad: number
    idlocalidad: number
    buscaedadmin: number
    buscaedadmax: number
    buscasexo: string
    descripcion: string
    tipousuario: string
    baneado: boolean
  }

  export type fotousuarioUpdateWithoutMultimediaInput = {
    usuario?: usuarioUpdateOneRequiredWithoutFotousuarioNestedInput
  }

  export type fotousuarioUncheckedUpdateWithoutMultimediaInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type fotousuarioUncheckedUpdateManyWithoutMultimediaInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
  }

  export type mensajeUpdateWithoutMultimediaInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    participa?: participaUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mensajeUncheckedUpdateManyWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    idsala?: IntFieldUpdateOperationsInput | number
    idusuario?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuarioUpdateWithoutMultimediaInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUpdateManyWithoutUsuarioNestedInput
    localidad?: localidadUpdateOneRequiredWithoutUsuarioNestedInput
    videoviewer?: videoviewerUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
    fotousuario?: fotousuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    match_match_idusuario1Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioNestedInput
    match_match_idusuario2Tousuario?: matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioNestedInput
    participa?: participaUncheckedUpdateManyWithoutUsuarioNestedInput
    videoviewer?: videoviewerUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateManyWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    sexo?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    idlocalidad?: IntFieldUpdateOperationsInput | number
    buscaedadmin?: IntFieldUpdateOperationsInput | number
    buscaedadmax?: IntFieldUpdateOperationsInput | number
    buscasexo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    baneado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type mensajeCreateManyParticipaInput = {
    id?: number
    texto: string
    fechahora: Date | string
    rutamultimedia?: string | null
  }

  export type mensajeUpdateWithoutParticipaInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    multimedia?: multimediaUpdateOneWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    rutamultimedia?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type mensajeUncheckedUpdateManyWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: DateTimeFieldUpdateOperationsInput | Date | string
    rutamultimedia?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type participaCreateManySalaInput = {
    idusuario: number
    estado: string
  }

  export type participaUpdateWithoutSalaInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    usuario?: usuarioUpdateOneRequiredWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateWithoutSalaInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateManyWithoutSalaInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type fotousuarioCreateManyUsuarioInput = {
    rutafoto: string
  }

  export type matchCreateManyUsuario_match_idusuario1TousuarioInput = {
    idusuario2: number
  }

  export type matchCreateManyUsuario_match_idusuario2TousuarioInput = {
    idusuario1: number
  }

  export type participaCreateManyUsuarioInput = {
    idsala: number
    estado: string
  }

  export type videoviewerCreateManyUsuarioInput = {
    idvideo: string
  }

  export type fotousuarioUpdateWithoutUsuarioInput = {
    multimedia?: multimediaUpdateOneRequiredWithoutFotousuarioNestedInput
  }

  export type fotousuarioUncheckedUpdateWithoutUsuarioInput = {
    rutafoto?: StringFieldUpdateOperationsInput | string
  }

  export type fotousuarioUncheckedUpdateManyWithoutUsuarioInput = {
    rutafoto?: StringFieldUpdateOperationsInput | string
  }

  export type matchUpdateWithoutUsuario_match_idusuario1TousuarioInput = {
    usuario_match_idusuario2Tousuario?: usuarioUpdateOneRequiredWithoutMatch_match_idusuario2TousuarioNestedInput
  }

  export type matchUncheckedUpdateWithoutUsuario_match_idusuario1TousuarioInput = {
    idusuario2?: IntFieldUpdateOperationsInput | number
  }

  export type matchUncheckedUpdateManyWithoutUsuario_match_idusuario1TousuarioInput = {
    idusuario2?: IntFieldUpdateOperationsInput | number
  }

  export type matchUpdateWithoutUsuario_match_idusuario2TousuarioInput = {
    usuario_match_idusuario1Tousuario?: usuarioUpdateOneRequiredWithoutMatch_match_idusuario1TousuarioNestedInput
  }

  export type matchUncheckedUpdateWithoutUsuario_match_idusuario2TousuarioInput = {
    idusuario1?: IntFieldUpdateOperationsInput | number
  }

  export type matchUncheckedUpdateManyWithoutUsuario_match_idusuario2TousuarioInput = {
    idusuario1?: IntFieldUpdateOperationsInput | number
  }

  export type participaUpdateWithoutUsuarioInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    sala?: salaUpdateOneRequiredWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateWithoutUsuarioInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateManyWithoutUsuarioInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type videoviewerUpdateWithoutUsuarioInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoviewerUncheckedUpdateWithoutUsuarioInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoviewerUncheckedUpdateManyWithoutUsuarioInput = {
    idvideo?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LocalidadCountOutputTypeDefaultArgs instead
     */
    export type LocalidadCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocalidadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MultimediaCountOutputTypeDefaultArgs instead
     */
    export type MultimediaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MultimediaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParticipaCountOutputTypeDefaultArgs instead
     */
    export type ParticipaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParticipaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalaCountOutputTypeDefaultArgs instead
     */
    export type SalaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use fotousuarioDefaultArgs instead
     */
    export type fotousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = fotousuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use localidadDefaultArgs instead
     */
    export type localidadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = localidadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use matchDefaultArgs instead
     */
    export type matchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = matchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use mensajeDefaultArgs instead
     */
    export type mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = mensajeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use multimediaDefaultArgs instead
     */
    export type multimediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = multimediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use participaDefaultArgs instead
     */
    export type participaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = participaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use salaDefaultArgs instead
     */
    export type salaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = salaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use spatial_ref_sysDefaultArgs instead
     */
    export type spatial_ref_sysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = spatial_ref_sysDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use videoviewerDefaultArgs instead
     */
    export type videoviewerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = videoviewerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}