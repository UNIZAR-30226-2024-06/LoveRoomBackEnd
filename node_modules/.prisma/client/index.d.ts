
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model hacenmatch
 * 
 */
export type hacenmatch = $Result.DefaultSelection<Prisma.$hacenmatchPayload>
/**
 * Model mensaje
 * 
 */
export type mensaje = $Result.DefaultSelection<Prisma.$mensajePayload>
/**
 * Model multimedia
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type multimedia = $Result.DefaultSelection<Prisma.$multimediaPayload>
/**
 * Model participa
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type participa = $Result.DefaultSelection<Prisma.$participaPayload>
/**
 * Model sala
 * 
 */
export type sala = $Result.DefaultSelection<Prisma.$salaPayload>
/**
 * Model usuario
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model videoyoutube
 * 
 */
export type videoyoutube = $Result.DefaultSelection<Prisma.$videoyoutubePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Hacenmatches
 * const hacenmatches = await prisma.hacenmatch.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Hacenmatches
   * const hacenmatches = await prisma.hacenmatch.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.hacenmatch`: Exposes CRUD operations for the **hacenmatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hacenmatches
    * const hacenmatches = await prisma.hacenmatch.findMany()
    * ```
    */
  get hacenmatch(): Prisma.hacenmatchDelegate<ExtArgs>;

  /**
   * `prisma.mensaje`: Exposes CRUD operations for the **mensaje** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensajes
    * const mensajes = await prisma.mensaje.findMany()
    * ```
    */
  get mensaje(): Prisma.mensajeDelegate<ExtArgs>;

  /**
   * `prisma.multimedia`: Exposes CRUD operations for the **multimedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Multimedias
    * const multimedias = await prisma.multimedia.findMany()
    * ```
    */
  get multimedia(): Prisma.multimediaDelegate<ExtArgs>;

  /**
   * `prisma.participa`: Exposes CRUD operations for the **participa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participas
    * const participas = await prisma.participa.findMany()
    * ```
    */
  get participa(): Prisma.participaDelegate<ExtArgs>;

  /**
   * `prisma.sala`: Exposes CRUD operations for the **sala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salas
    * const salas = await prisma.sala.findMany()
    * ```
    */
  get sala(): Prisma.salaDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.videoyoutube`: Exposes CRUD operations for the **videoyoutube** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videoyoutubes
    * const videoyoutubes = await prisma.videoyoutube.findMany()
    * ```
    */
  get videoyoutube(): Prisma.videoyoutubeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    hacenmatch: 'hacenmatch',
    mensaje: 'mensaje',
    multimedia: 'multimedia',
    participa: 'participa',
    sala: 'sala',
    usuario: 'usuario',
    videoyoutube: 'videoyoutube'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'hacenmatch' | 'mensaje' | 'multimedia' | 'participa' | 'sala' | 'usuario' | 'videoyoutube'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      hacenmatch: {
        payload: Prisma.$hacenmatchPayload<ExtArgs>
        fields: Prisma.hacenmatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.hacenmatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.hacenmatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          findFirst: {
            args: Prisma.hacenmatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.hacenmatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          findMany: {
            args: Prisma.hacenmatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>[]
          }
          create: {
            args: Prisma.hacenmatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          createMany: {
            args: Prisma.hacenmatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.hacenmatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          update: {
            args: Prisma.hacenmatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          deleteMany: {
            args: Prisma.hacenmatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.hacenmatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.hacenmatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hacenmatchPayload>
          }
          aggregate: {
            args: Prisma.HacenmatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHacenmatch>
          }
          groupBy: {
            args: Prisma.hacenmatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HacenmatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.hacenmatchCountArgs<ExtArgs>,
            result: $Utils.Optional<HacenmatchCountAggregateOutputType> | number
          }
        }
      }
      mensaje: {
        payload: Prisma.$mensajePayload<ExtArgs>
        fields: Prisma.mensajeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mensajeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mensajeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          findFirst: {
            args: Prisma.mensajeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mensajeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          findMany: {
            args: Prisma.mensajeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>[]
          }
          create: {
            args: Prisma.mensajeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          createMany: {
            args: Prisma.mensajeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.mensajeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          update: {
            args: Prisma.mensajeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          deleteMany: {
            args: Prisma.mensajeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.mensajeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.mensajeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mensajePayload>
          }
          aggregate: {
            args: Prisma.MensajeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMensaje>
          }
          groupBy: {
            args: Prisma.mensajeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MensajeGroupByOutputType>[]
          }
          count: {
            args: Prisma.mensajeCountArgs<ExtArgs>,
            result: $Utils.Optional<MensajeCountAggregateOutputType> | number
          }
        }
      }
      multimedia: {
        payload: Prisma.$multimediaPayload<ExtArgs>
        fields: Prisma.multimediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.multimediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.multimediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          findFirst: {
            args: Prisma.multimediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.multimediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          findMany: {
            args: Prisma.multimediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>[]
          }
          create: {
            args: Prisma.multimediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          createMany: {
            args: Prisma.multimediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.multimediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          update: {
            args: Prisma.multimediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          deleteMany: {
            args: Prisma.multimediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.multimediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.multimediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$multimediaPayload>
          }
          aggregate: {
            args: Prisma.MultimediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMultimedia>
          }
          groupBy: {
            args: Prisma.multimediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MultimediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.multimediaCountArgs<ExtArgs>,
            result: $Utils.Optional<MultimediaCountAggregateOutputType> | number
          }
        }
      }
      participa: {
        payload: Prisma.$participaPayload<ExtArgs>
        fields: Prisma.participaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.participaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.participaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          findFirst: {
            args: Prisma.participaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.participaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          findMany: {
            args: Prisma.participaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>[]
          }
          create: {
            args: Prisma.participaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          createMany: {
            args: Prisma.participaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.participaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          update: {
            args: Prisma.participaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          deleteMany: {
            args: Prisma.participaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.participaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.participaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$participaPayload>
          }
          aggregate: {
            args: Prisma.ParticipaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParticipa>
          }
          groupBy: {
            args: Prisma.participaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParticipaGroupByOutputType>[]
          }
          count: {
            args: Prisma.participaCountArgs<ExtArgs>,
            result: $Utils.Optional<ParticipaCountAggregateOutputType> | number
          }
        }
      }
      sala: {
        payload: Prisma.$salaPayload<ExtArgs>
        fields: Prisma.salaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.salaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.salaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          findFirst: {
            args: Prisma.salaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.salaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          findMany: {
            args: Prisma.salaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>[]
          }
          create: {
            args: Prisma.salaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          createMany: {
            args: Prisma.salaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.salaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          update: {
            args: Prisma.salaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          deleteMany: {
            args: Prisma.salaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.salaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.salaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salaPayload>
          }
          aggregate: {
            args: Prisma.SalaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSala>
          }
          groupBy: {
            args: Prisma.salaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalaGroupByOutputType>[]
          }
          count: {
            args: Prisma.salaCountArgs<ExtArgs>,
            result: $Utils.Optional<SalaCountAggregateOutputType> | number
          }
        }
      }
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      videoyoutube: {
        payload: Prisma.$videoyoutubePayload<ExtArgs>
        fields: Prisma.videoyoutubeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.videoyoutubeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.videoyoutubeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          findFirst: {
            args: Prisma.videoyoutubeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.videoyoutubeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          findMany: {
            args: Prisma.videoyoutubeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>[]
          }
          create: {
            args: Prisma.videoyoutubeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          createMany: {
            args: Prisma.videoyoutubeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.videoyoutubeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          update: {
            args: Prisma.videoyoutubeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          deleteMany: {
            args: Prisma.videoyoutubeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.videoyoutubeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.videoyoutubeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videoyoutubePayload>
          }
          aggregate: {
            args: Prisma.VideoyoutubeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideoyoutube>
          }
          groupBy: {
            args: Prisma.videoyoutubeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideoyoutubeGroupByOutputType>[]
          }
          count: {
            args: Prisma.videoyoutubeCountArgs<ExtArgs>,
            result: $Utils.Optional<VideoyoutubeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MultimediaCountOutputType
   */

  export type MultimediaCountOutputType = {
    mensaje: number
  }

  export type MultimediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | MultimediaCountOutputTypeCountMensajeArgs
  }

  // Custom InputTypes

  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MultimediaCountOutputType
     */
    select?: MultimediaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MultimediaCountOutputType without action
   */
  export type MultimediaCountOutputTypeCountMensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
  }



  /**
   * Count Type ParticipaCountOutputType
   */

  export type ParticipaCountOutputType = {
    mensaje: number
  }

  export type ParticipaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | ParticipaCountOutputTypeCountMensajeArgs
  }

  // Custom InputTypes

  /**
   * ParticipaCountOutputType without action
   */
  export type ParticipaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipaCountOutputType
     */
    select?: ParticipaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParticipaCountOutputType without action
   */
  export type ParticipaCountOutputTypeCountMensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
  }



  /**
   * Count Type SalaCountOutputType
   */

  export type SalaCountOutputType = {
    participa_participa_salaTosala: number
  }

  export type SalaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participa_participa_salaTosala?: boolean | SalaCountOutputTypeCountParticipa_participa_salaTosalaArgs
  }

  // Custom InputTypes

  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaCountOutputType
     */
    select?: SalaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeCountParticipa_participa_salaTosalaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
  }



  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    hacenmatch_hacenmatch_idusuario2Tousuario: number
    hacenmatch_hacenmatch_idusuarioTousuario: number
    participa_participa_usuarioTousuario: number
    videoyoutube: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hacenmatch_hacenmatch_idusuario2Tousuario?: boolean | UsuarioCountOutputTypeCountHacenmatch_hacenmatch_idusuario2TousuarioArgs
    hacenmatch_hacenmatch_idusuarioTousuario?: boolean | UsuarioCountOutputTypeCountHacenmatch_hacenmatch_idusuarioTousuarioArgs
    participa_participa_usuarioTousuario?: boolean | UsuarioCountOutputTypeCountParticipa_participa_usuarioTousuarioArgs
    videoyoutube?: boolean | UsuarioCountOutputTypeCountVideoyoutubeArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountHacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hacenmatchWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountHacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hacenmatchWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountParticipa_participa_usuarioTousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountVideoyoutubeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videoyoutubeWhereInput
  }



  /**
   * Models
   */

  /**
   * Model hacenmatch
   */

  export type AggregateHacenmatch = {
    _count: HacenmatchCountAggregateOutputType | null
    _min: HacenmatchMinAggregateOutputType | null
    _max: HacenmatchMaxAggregateOutputType | null
  }

  export type HacenmatchMinAggregateOutputType = {
    idusuario: string | null
    idusuario2: string | null
  }

  export type HacenmatchMaxAggregateOutputType = {
    idusuario: string | null
    idusuario2: string | null
  }

  export type HacenmatchCountAggregateOutputType = {
    idusuario: number
    idusuario2: number
    _all: number
  }


  export type HacenmatchMinAggregateInputType = {
    idusuario?: true
    idusuario2?: true
  }

  export type HacenmatchMaxAggregateInputType = {
    idusuario?: true
    idusuario2?: true
  }

  export type HacenmatchCountAggregateInputType = {
    idusuario?: true
    idusuario2?: true
    _all?: true
  }

  export type HacenmatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hacenmatch to aggregate.
     */
    where?: hacenmatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hacenmatches to fetch.
     */
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hacenmatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hacenmatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hacenmatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hacenmatches
    **/
    _count?: true | HacenmatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HacenmatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HacenmatchMaxAggregateInputType
  }

  export type GetHacenmatchAggregateType<T extends HacenmatchAggregateArgs> = {
        [P in keyof T & keyof AggregateHacenmatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHacenmatch[P]>
      : GetScalarType<T[P], AggregateHacenmatch[P]>
  }




  export type hacenmatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hacenmatchWhereInput
    orderBy?: hacenmatchOrderByWithAggregationInput | hacenmatchOrderByWithAggregationInput[]
    by: HacenmatchScalarFieldEnum[] | HacenmatchScalarFieldEnum
    having?: hacenmatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HacenmatchCountAggregateInputType | true
    _min?: HacenmatchMinAggregateInputType
    _max?: HacenmatchMaxAggregateInputType
  }

  export type HacenmatchGroupByOutputType = {
    idusuario: string
    idusuario2: string
    _count: HacenmatchCountAggregateOutputType | null
    _min: HacenmatchMinAggregateOutputType | null
    _max: HacenmatchMaxAggregateOutputType | null
  }

  type GetHacenmatchGroupByPayload<T extends hacenmatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HacenmatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HacenmatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HacenmatchGroupByOutputType[P]>
            : GetScalarType<T[P], HacenmatchGroupByOutputType[P]>
        }
      >
    >


  export type hacenmatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idusuario?: boolean
    idusuario2?: boolean
    usuario_hacenmatch_idusuario2Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    usuario_hacenmatch_idusuarioTousuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hacenmatch"]>

  export type hacenmatchSelectScalar = {
    idusuario?: boolean
    idusuario2?: boolean
  }

  export type hacenmatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario_hacenmatch_idusuario2Tousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    usuario_hacenmatch_idusuarioTousuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $hacenmatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "hacenmatch"
    objects: {
      usuario_hacenmatch_idusuario2Tousuario: Prisma.$usuarioPayload<ExtArgs>
      usuario_hacenmatch_idusuarioTousuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idusuario: string
      idusuario2: string
    }, ExtArgs["result"]["hacenmatch"]>
    composites: {}
  }


  type hacenmatchGetPayload<S extends boolean | null | undefined | hacenmatchDefaultArgs> = $Result.GetResult<Prisma.$hacenmatchPayload, S>

  type hacenmatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<hacenmatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HacenmatchCountAggregateInputType | true
    }

  export interface hacenmatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hacenmatch'], meta: { name: 'hacenmatch' } }
    /**
     * Find zero or one Hacenmatch that matches the filter.
     * @param {hacenmatchFindUniqueArgs} args - Arguments to find a Hacenmatch
     * @example
     * // Get one Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends hacenmatchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchFindUniqueArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Hacenmatch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {hacenmatchFindUniqueOrThrowArgs} args - Arguments to find a Hacenmatch
     * @example
     * // Get one Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends hacenmatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Hacenmatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchFindFirstArgs} args - Arguments to find a Hacenmatch
     * @example
     * // Get one Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends hacenmatchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchFindFirstArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Hacenmatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchFindFirstOrThrowArgs} args - Arguments to find a Hacenmatch
     * @example
     * // Get one Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends hacenmatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Hacenmatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hacenmatches
     * const hacenmatches = await prisma.hacenmatch.findMany()
     * 
     * // Get first 10 Hacenmatches
     * const hacenmatches = await prisma.hacenmatch.findMany({ take: 10 })
     * 
     * // Only select the `idusuario`
     * const hacenmatchWithIdusuarioOnly = await prisma.hacenmatch.findMany({ select: { idusuario: true } })
     * 
    **/
    findMany<T extends hacenmatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Hacenmatch.
     * @param {hacenmatchCreateArgs} args - Arguments to create a Hacenmatch.
     * @example
     * // Create one Hacenmatch
     * const Hacenmatch = await prisma.hacenmatch.create({
     *   data: {
     *     // ... data to create a Hacenmatch
     *   }
     * })
     * 
    **/
    create<T extends hacenmatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchCreateArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Hacenmatches.
     *     @param {hacenmatchCreateManyArgs} args - Arguments to create many Hacenmatches.
     *     @example
     *     // Create many Hacenmatches
     *     const hacenmatch = await prisma.hacenmatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends hacenmatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hacenmatch.
     * @param {hacenmatchDeleteArgs} args - Arguments to delete one Hacenmatch.
     * @example
     * // Delete one Hacenmatch
     * const Hacenmatch = await prisma.hacenmatch.delete({
     *   where: {
     *     // ... filter to delete one Hacenmatch
     *   }
     * })
     * 
    **/
    delete<T extends hacenmatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchDeleteArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Hacenmatch.
     * @param {hacenmatchUpdateArgs} args - Arguments to update one Hacenmatch.
     * @example
     * // Update one Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends hacenmatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchUpdateArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Hacenmatches.
     * @param {hacenmatchDeleteManyArgs} args - Arguments to filter Hacenmatches to delete.
     * @example
     * // Delete a few Hacenmatches
     * const { count } = await prisma.hacenmatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends hacenmatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hacenmatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hacenmatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hacenmatches
     * const hacenmatch = await prisma.hacenmatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends hacenmatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hacenmatch.
     * @param {hacenmatchUpsertArgs} args - Arguments to update or create a Hacenmatch.
     * @example
     * // Update or create a Hacenmatch
     * const hacenmatch = await prisma.hacenmatch.upsert({
     *   create: {
     *     // ... data to create a Hacenmatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hacenmatch we want to update
     *   }
     * })
    **/
    upsert<T extends hacenmatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, hacenmatchUpsertArgs<ExtArgs>>
    ): Prisma__hacenmatchClient<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Hacenmatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchCountArgs} args - Arguments to filter Hacenmatches to count.
     * @example
     * // Count the number of Hacenmatches
     * const count = await prisma.hacenmatch.count({
     *   where: {
     *     // ... the filter for the Hacenmatches we want to count
     *   }
     * })
    **/
    count<T extends hacenmatchCountArgs>(
      args?: Subset<T, hacenmatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HacenmatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hacenmatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HacenmatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HacenmatchAggregateArgs>(args: Subset<T, HacenmatchAggregateArgs>): Prisma.PrismaPromise<GetHacenmatchAggregateType<T>>

    /**
     * Group by Hacenmatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hacenmatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends hacenmatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: hacenmatchGroupByArgs['orderBy'] }
        : { orderBy?: hacenmatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, hacenmatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHacenmatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the hacenmatch model
   */
  readonly fields: hacenmatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for hacenmatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__hacenmatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario_hacenmatch_idusuario2Tousuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuario_hacenmatch_idusuarioTousuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the hacenmatch model
   */ 
  interface hacenmatchFieldRefs {
    readonly idusuario: FieldRef<"hacenmatch", 'String'>
    readonly idusuario2: FieldRef<"hacenmatch", 'String'>
  }
    

  // Custom InputTypes

  /**
   * hacenmatch findUnique
   */
  export type hacenmatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter, which hacenmatch to fetch.
     */
    where: hacenmatchWhereUniqueInput
  }


  /**
   * hacenmatch findUniqueOrThrow
   */
  export type hacenmatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter, which hacenmatch to fetch.
     */
    where: hacenmatchWhereUniqueInput
  }


  /**
   * hacenmatch findFirst
   */
  export type hacenmatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter, which hacenmatch to fetch.
     */
    where?: hacenmatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hacenmatches to fetch.
     */
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hacenmatches.
     */
    cursor?: hacenmatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hacenmatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hacenmatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hacenmatches.
     */
    distinct?: HacenmatchScalarFieldEnum | HacenmatchScalarFieldEnum[]
  }


  /**
   * hacenmatch findFirstOrThrow
   */
  export type hacenmatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter, which hacenmatch to fetch.
     */
    where?: hacenmatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hacenmatches to fetch.
     */
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hacenmatches.
     */
    cursor?: hacenmatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hacenmatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hacenmatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hacenmatches.
     */
    distinct?: HacenmatchScalarFieldEnum | HacenmatchScalarFieldEnum[]
  }


  /**
   * hacenmatch findMany
   */
  export type hacenmatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter, which hacenmatches to fetch.
     */
    where?: hacenmatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hacenmatches to fetch.
     */
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hacenmatches.
     */
    cursor?: hacenmatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hacenmatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hacenmatches.
     */
    skip?: number
    distinct?: HacenmatchScalarFieldEnum | HacenmatchScalarFieldEnum[]
  }


  /**
   * hacenmatch create
   */
  export type hacenmatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * The data needed to create a hacenmatch.
     */
    data: XOR<hacenmatchCreateInput, hacenmatchUncheckedCreateInput>
  }


  /**
   * hacenmatch createMany
   */
  export type hacenmatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many hacenmatches.
     */
    data: hacenmatchCreateManyInput | hacenmatchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * hacenmatch update
   */
  export type hacenmatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * The data needed to update a hacenmatch.
     */
    data: XOR<hacenmatchUpdateInput, hacenmatchUncheckedUpdateInput>
    /**
     * Choose, which hacenmatch to update.
     */
    where: hacenmatchWhereUniqueInput
  }


  /**
   * hacenmatch updateMany
   */
  export type hacenmatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update hacenmatches.
     */
    data: XOR<hacenmatchUpdateManyMutationInput, hacenmatchUncheckedUpdateManyInput>
    /**
     * Filter which hacenmatches to update
     */
    where?: hacenmatchWhereInput
  }


  /**
   * hacenmatch upsert
   */
  export type hacenmatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * The filter to search for the hacenmatch to update in case it exists.
     */
    where: hacenmatchWhereUniqueInput
    /**
     * In case the hacenmatch found by the `where` argument doesn't exist, create a new hacenmatch with this data.
     */
    create: XOR<hacenmatchCreateInput, hacenmatchUncheckedCreateInput>
    /**
     * In case the hacenmatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hacenmatchUpdateInput, hacenmatchUncheckedUpdateInput>
  }


  /**
   * hacenmatch delete
   */
  export type hacenmatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    /**
     * Filter which hacenmatch to delete.
     */
    where: hacenmatchWhereUniqueInput
  }


  /**
   * hacenmatch deleteMany
   */
  export type hacenmatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hacenmatches to delete
     */
    where?: hacenmatchWhereInput
  }


  /**
   * hacenmatch without action
   */
  export type hacenmatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
  }



  /**
   * Model mensaje
   */

  export type AggregateMensaje = {
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  export type MensajeAvgAggregateOutputType = {
    id: number | null
    sala: number | null
    idmultimedia: number | null
  }

  export type MensajeSumAggregateOutputType = {
    id: number | null
    sala: number | null
    idmultimedia: number | null
  }

  export type MensajeMinAggregateOutputType = {
    id: number | null
    sala: number | null
    usuario: string | null
    texto: string | null
    fechahora: Date | null
    idmultimedia: number | null
  }

  export type MensajeMaxAggregateOutputType = {
    id: number | null
    sala: number | null
    usuario: string | null
    texto: string | null
    fechahora: Date | null
    idmultimedia: number | null
  }

  export type MensajeCountAggregateOutputType = {
    id: number
    sala: number
    usuario: number
    texto: number
    fechahora: number
    idmultimedia: number
    _all: number
  }


  export type MensajeAvgAggregateInputType = {
    id?: true
    sala?: true
    idmultimedia?: true
  }

  export type MensajeSumAggregateInputType = {
    id?: true
    sala?: true
    idmultimedia?: true
  }

  export type MensajeMinAggregateInputType = {
    id?: true
    sala?: true
    usuario?: true
    texto?: true
    fechahora?: true
    idmultimedia?: true
  }

  export type MensajeMaxAggregateInputType = {
    id?: true
    sala?: true
    usuario?: true
    texto?: true
    fechahora?: true
    idmultimedia?: true
  }

  export type MensajeCountAggregateInputType = {
    id?: true
    sala?: true
    usuario?: true
    texto?: true
    fechahora?: true
    idmultimedia?: true
    _all?: true
  }

  export type MensajeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensaje to aggregate.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mensajes
    **/
    _count?: true | MensajeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensajeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensajeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensajeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensajeMaxAggregateInputType
  }

  export type GetMensajeAggregateType<T extends MensajeAggregateArgs> = {
        [P in keyof T & keyof AggregateMensaje]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensaje[P]>
      : GetScalarType<T[P], AggregateMensaje[P]>
  }




  export type mensajeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithAggregationInput | mensajeOrderByWithAggregationInput[]
    by: MensajeScalarFieldEnum[] | MensajeScalarFieldEnum
    having?: mensajeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensajeCountAggregateInputType | true
    _avg?: MensajeAvgAggregateInputType
    _sum?: MensajeSumAggregateInputType
    _min?: MensajeMinAggregateInputType
    _max?: MensajeMaxAggregateInputType
  }

  export type MensajeGroupByOutputType = {
    id: number
    sala: number
    usuario: string
    texto: string
    fechahora: Date | null
    idmultimedia: number
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  type GetMensajeGroupByPayload<T extends mensajeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensajeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensajeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensajeGroupByOutputType[P]>
            : GetScalarType<T[P], MensajeGroupByOutputType[P]>
        }
      >
    >


  export type mensajeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sala?: boolean
    usuario?: boolean
    texto?: boolean
    fechahora?: boolean
    idmultimedia?: boolean
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
    participa?: boolean | participaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensaje"]>

  export type mensajeSelectScalar = {
    id?: boolean
    sala?: boolean
    usuario?: boolean
    texto?: boolean
    fechahora?: boolean
    idmultimedia?: boolean
  }

  export type mensajeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    multimedia?: boolean | multimediaDefaultArgs<ExtArgs>
    participa?: boolean | participaDefaultArgs<ExtArgs>
  }


  export type $mensajePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mensaje"
    objects: {
      multimedia: Prisma.$multimediaPayload<ExtArgs>
      participa: Prisma.$participaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sala: number
      usuario: string
      texto: string
      fechahora: Date | null
      idmultimedia: number
    }, ExtArgs["result"]["mensaje"]>
    composites: {}
  }


  type mensajeGetPayload<S extends boolean | null | undefined | mensajeDefaultArgs> = $Result.GetResult<Prisma.$mensajePayload, S>

  type mensajeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<mensajeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensajeCountAggregateInputType | true
    }

  export interface mensajeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mensaje'], meta: { name: 'mensaje' } }
    /**
     * Find zero or one Mensaje that matches the filter.
     * @param {mensajeFindUniqueArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mensajeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeFindUniqueArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mensaje that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {mensajeFindUniqueOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends mensajeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mensaje that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindFirstArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mensajeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindFirstArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mensaje that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindFirstOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends mensajeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mensajes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensajes
     * const mensajes = await prisma.mensaje.findMany()
     * 
     * // Get first 10 Mensajes
     * const mensajes = await prisma.mensaje.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensajeWithIdOnly = await prisma.mensaje.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mensajeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mensaje.
     * @param {mensajeCreateArgs} args - Arguments to create a Mensaje.
     * @example
     * // Create one Mensaje
     * const Mensaje = await prisma.mensaje.create({
     *   data: {
     *     // ... data to create a Mensaje
     *   }
     * })
     * 
    **/
    create<T extends mensajeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeCreateArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mensajes.
     *     @param {mensajeCreateManyArgs} args - Arguments to create many Mensajes.
     *     @example
     *     // Create many Mensajes
     *     const mensaje = await prisma.mensaje.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mensajeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mensaje.
     * @param {mensajeDeleteArgs} args - Arguments to delete one Mensaje.
     * @example
     * // Delete one Mensaje
     * const Mensaje = await prisma.mensaje.delete({
     *   where: {
     *     // ... filter to delete one Mensaje
     *   }
     * })
     * 
    **/
    delete<T extends mensajeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeDeleteArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mensaje.
     * @param {mensajeUpdateArgs} args - Arguments to update one Mensaje.
     * @example
     * // Update one Mensaje
     * const mensaje = await prisma.mensaje.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mensajeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpdateArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mensajes.
     * @param {mensajeDeleteManyArgs} args - Arguments to filter Mensajes to delete.
     * @example
     * // Delete a few Mensajes
     * const { count } = await prisma.mensaje.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mensajeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mensajeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensajes
     * const mensaje = await prisma.mensaje.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mensajeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensaje.
     * @param {mensajeUpsertArgs} args - Arguments to update or create a Mensaje.
     * @example
     * // Update or create a Mensaje
     * const mensaje = await prisma.mensaje.upsert({
     *   create: {
     *     // ... data to create a Mensaje
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensaje we want to update
     *   }
     * })
    **/
    upsert<T extends mensajeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, mensajeUpsertArgs<ExtArgs>>
    ): Prisma__mensajeClient<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeCountArgs} args - Arguments to filter Mensajes to count.
     * @example
     * // Count the number of Mensajes
     * const count = await prisma.mensaje.count({
     *   where: {
     *     // ... the filter for the Mensajes we want to count
     *   }
     * })
    **/
    count<T extends mensajeCountArgs>(
      args?: Subset<T, mensajeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensajeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensajeAggregateArgs>(args: Subset<T, MensajeAggregateArgs>): Prisma.PrismaPromise<GetMensajeAggregateType<T>>

    /**
     * Group by Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensajeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mensajeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mensajeGroupByArgs['orderBy'] }
        : { orderBy?: mensajeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mensajeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensajeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mensaje model
   */
  readonly fields: mensajeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mensaje.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mensajeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    multimedia<T extends multimediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, multimediaDefaultArgs<ExtArgs>>): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    participa<T extends participaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, participaDefaultArgs<ExtArgs>>): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the mensaje model
   */ 
  interface mensajeFieldRefs {
    readonly id: FieldRef<"mensaje", 'Int'>
    readonly sala: FieldRef<"mensaje", 'Int'>
    readonly usuario: FieldRef<"mensaje", 'String'>
    readonly texto: FieldRef<"mensaje", 'String'>
    readonly fechahora: FieldRef<"mensaje", 'DateTime'>
    readonly idmultimedia: FieldRef<"mensaje", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * mensaje findUnique
   */
  export type mensajeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje findUniqueOrThrow
   */
  export type mensajeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje findFirst
   */
  export type mensajeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensajes.
     */
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje findFirstOrThrow
   */
  export type mensajeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensaje to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensajes.
     */
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje findMany
   */
  export type mensajeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter, which mensajes to fetch.
     */
    where?: mensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensajes to fetch.
     */
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mensajes.
     */
    cursor?: mensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensajes.
     */
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * mensaje create
   */
  export type mensajeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The data needed to create a mensaje.
     */
    data: XOR<mensajeCreateInput, mensajeUncheckedCreateInput>
  }


  /**
   * mensaje createMany
   */
  export type mensajeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mensajes.
     */
    data: mensajeCreateManyInput | mensajeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * mensaje update
   */
  export type mensajeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The data needed to update a mensaje.
     */
    data: XOR<mensajeUpdateInput, mensajeUncheckedUpdateInput>
    /**
     * Choose, which mensaje to update.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje updateMany
   */
  export type mensajeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mensajes.
     */
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyInput>
    /**
     * Filter which mensajes to update
     */
    where?: mensajeWhereInput
  }


  /**
   * mensaje upsert
   */
  export type mensajeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * The filter to search for the mensaje to update in case it exists.
     */
    where: mensajeWhereUniqueInput
    /**
     * In case the mensaje found by the `where` argument doesn't exist, create a new mensaje with this data.
     */
    create: XOR<mensajeCreateInput, mensajeUncheckedCreateInput>
    /**
     * In case the mensaje was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mensajeUpdateInput, mensajeUncheckedUpdateInput>
  }


  /**
   * mensaje delete
   */
  export type mensajeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    /**
     * Filter which mensaje to delete.
     */
    where: mensajeWhereUniqueInput
  }


  /**
   * mensaje deleteMany
   */
  export type mensajeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensajes to delete
     */
    where?: mensajeWhereInput
  }


  /**
   * mensaje without action
   */
  export type mensajeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
  }



  /**
   * Model multimedia
   */

  export type AggregateMultimedia = {
    _count: MultimediaCountAggregateOutputType | null
    _avg: MultimediaAvgAggregateOutputType | null
    _sum: MultimediaSumAggregateOutputType | null
    _min: MultimediaMinAggregateOutputType | null
    _max: MultimediaMaxAggregateOutputType | null
  }

  export type MultimediaAvgAggregateOutputType = {
    id: number | null
  }

  export type MultimediaSumAggregateOutputType = {
    id: number | null
  }

  export type MultimediaMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    nombre: string | null
    ruta: string | null
    tipomultimedia: string | null
  }

  export type MultimediaMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    nombre: string | null
    ruta: string | null
    tipomultimedia: string | null
  }

  export type MultimediaCountAggregateOutputType = {
    id: number
    fecha: number
    nombre: number
    ruta: number
    tipomultimedia: number
    _all: number
  }


  export type MultimediaAvgAggregateInputType = {
    id?: true
  }

  export type MultimediaSumAggregateInputType = {
    id?: true
  }

  export type MultimediaMinAggregateInputType = {
    id?: true
    fecha?: true
    nombre?: true
    ruta?: true
    tipomultimedia?: true
  }

  export type MultimediaMaxAggregateInputType = {
    id?: true
    fecha?: true
    nombre?: true
    ruta?: true
    tipomultimedia?: true
  }

  export type MultimediaCountAggregateInputType = {
    id?: true
    fecha?: true
    nombre?: true
    ruta?: true
    tipomultimedia?: true
    _all?: true
  }

  export type MultimediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which multimedia to aggregate.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned multimedias
    **/
    _count?: true | MultimediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MultimediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MultimediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MultimediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MultimediaMaxAggregateInputType
  }

  export type GetMultimediaAggregateType<T extends MultimediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMultimedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMultimedia[P]>
      : GetScalarType<T[P], AggregateMultimedia[P]>
  }




  export type multimediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: multimediaWhereInput
    orderBy?: multimediaOrderByWithAggregationInput | multimediaOrderByWithAggregationInput[]
    by: MultimediaScalarFieldEnum[] | MultimediaScalarFieldEnum
    having?: multimediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MultimediaCountAggregateInputType | true
    _avg?: MultimediaAvgAggregateInputType
    _sum?: MultimediaSumAggregateInputType
    _min?: MultimediaMinAggregateInputType
    _max?: MultimediaMaxAggregateInputType
  }

  export type MultimediaGroupByOutputType = {
    id: number
    fecha: Date
    nombre: string
    ruta: string
    tipomultimedia: string
    _count: MultimediaCountAggregateOutputType | null
    _avg: MultimediaAvgAggregateOutputType | null
    _sum: MultimediaSumAggregateOutputType | null
    _min: MultimediaMinAggregateOutputType | null
    _max: MultimediaMaxAggregateOutputType | null
  }

  type GetMultimediaGroupByPayload<T extends multimediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MultimediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MultimediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MultimediaGroupByOutputType[P]>
            : GetScalarType<T[P], MultimediaGroupByOutputType[P]>
        }
      >
    >


  export type multimediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    nombre?: boolean
    ruta?: boolean
    tipomultimedia?: boolean
    mensaje?: boolean | multimedia$mensajeArgs<ExtArgs>
    _count?: boolean | MultimediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["multimedia"]>

  export type multimediaSelectScalar = {
    id?: boolean
    fecha?: boolean
    nombre?: boolean
    ruta?: boolean
    tipomultimedia?: boolean
  }

  export type multimediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | multimedia$mensajeArgs<ExtArgs>
    _count?: boolean | MultimediaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $multimediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "multimedia"
    objects: {
      mensaje: Prisma.$mensajePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha: Date
      nombre: string
      ruta: string
      tipomultimedia: string
    }, ExtArgs["result"]["multimedia"]>
    composites: {}
  }


  type multimediaGetPayload<S extends boolean | null | undefined | multimediaDefaultArgs> = $Result.GetResult<Prisma.$multimediaPayload, S>

  type multimediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<multimediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MultimediaCountAggregateInputType | true
    }

  export interface multimediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['multimedia'], meta: { name: 'multimedia' } }
    /**
     * Find zero or one Multimedia that matches the filter.
     * @param {multimediaFindUniqueArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends multimediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaFindUniqueArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Multimedia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {multimediaFindUniqueOrThrowArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends multimediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Multimedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindFirstArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends multimediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindFirstArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Multimedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindFirstOrThrowArgs} args - Arguments to find a Multimedia
     * @example
     * // Get one Multimedia
     * const multimedia = await prisma.multimedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends multimediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Multimedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Multimedias
     * const multimedias = await prisma.multimedia.findMany()
     * 
     * // Get first 10 Multimedias
     * const multimedias = await prisma.multimedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const multimediaWithIdOnly = await prisma.multimedia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends multimediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Multimedia.
     * @param {multimediaCreateArgs} args - Arguments to create a Multimedia.
     * @example
     * // Create one Multimedia
     * const Multimedia = await prisma.multimedia.create({
     *   data: {
     *     // ... data to create a Multimedia
     *   }
     * })
     * 
    **/
    create<T extends multimediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaCreateArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Multimedias.
     *     @param {multimediaCreateManyArgs} args - Arguments to create many Multimedias.
     *     @example
     *     // Create many Multimedias
     *     const multimedia = await prisma.multimedia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends multimediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Multimedia.
     * @param {multimediaDeleteArgs} args - Arguments to delete one Multimedia.
     * @example
     * // Delete one Multimedia
     * const Multimedia = await prisma.multimedia.delete({
     *   where: {
     *     // ... filter to delete one Multimedia
     *   }
     * })
     * 
    **/
    delete<T extends multimediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaDeleteArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Multimedia.
     * @param {multimediaUpdateArgs} args - Arguments to update one Multimedia.
     * @example
     * // Update one Multimedia
     * const multimedia = await prisma.multimedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends multimediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpdateArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Multimedias.
     * @param {multimediaDeleteManyArgs} args - Arguments to filter Multimedias to delete.
     * @example
     * // Delete a few Multimedias
     * const { count } = await prisma.multimedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends multimediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, multimediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Multimedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Multimedias
     * const multimedia = await prisma.multimedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends multimediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Multimedia.
     * @param {multimediaUpsertArgs} args - Arguments to update or create a Multimedia.
     * @example
     * // Update or create a Multimedia
     * const multimedia = await prisma.multimedia.upsert({
     *   create: {
     *     // ... data to create a Multimedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Multimedia we want to update
     *   }
     * })
    **/
    upsert<T extends multimediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, multimediaUpsertArgs<ExtArgs>>
    ): Prisma__multimediaClient<$Result.GetResult<Prisma.$multimediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Multimedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaCountArgs} args - Arguments to filter Multimedias to count.
     * @example
     * // Count the number of Multimedias
     * const count = await prisma.multimedia.count({
     *   where: {
     *     // ... the filter for the Multimedias we want to count
     *   }
     * })
    **/
    count<T extends multimediaCountArgs>(
      args?: Subset<T, multimediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MultimediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Multimedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MultimediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MultimediaAggregateArgs>(args: Subset<T, MultimediaAggregateArgs>): Prisma.PrismaPromise<GetMultimediaAggregateType<T>>

    /**
     * Group by Multimedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {multimediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends multimediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: multimediaGroupByArgs['orderBy'] }
        : { orderBy?: multimediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, multimediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMultimediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the multimedia model
   */
  readonly fields: multimediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for multimedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__multimediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mensaje<T extends multimedia$mensajeArgs<ExtArgs> = {}>(args?: Subset<T, multimedia$mensajeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the multimedia model
   */ 
  interface multimediaFieldRefs {
    readonly id: FieldRef<"multimedia", 'Int'>
    readonly fecha: FieldRef<"multimedia", 'DateTime'>
    readonly nombre: FieldRef<"multimedia", 'String'>
    readonly ruta: FieldRef<"multimedia", 'String'>
    readonly tipomultimedia: FieldRef<"multimedia", 'String'>
  }
    

  // Custom InputTypes

  /**
   * multimedia findUnique
   */
  export type multimediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia findUniqueOrThrow
   */
  export type multimediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia findFirst
   */
  export type multimediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of multimedias.
     */
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia findFirstOrThrow
   */
  export type multimediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedia to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of multimedias.
     */
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia findMany
   */
  export type multimediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter, which multimedias to fetch.
     */
    where?: multimediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of multimedias to fetch.
     */
    orderBy?: multimediaOrderByWithRelationInput | multimediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing multimedias.
     */
    cursor?: multimediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` multimedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` multimedias.
     */
    skip?: number
    distinct?: MultimediaScalarFieldEnum | MultimediaScalarFieldEnum[]
  }


  /**
   * multimedia create
   */
  export type multimediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The data needed to create a multimedia.
     */
    data: XOR<multimediaCreateInput, multimediaUncheckedCreateInput>
  }


  /**
   * multimedia createMany
   */
  export type multimediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many multimedias.
     */
    data: multimediaCreateManyInput | multimediaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * multimedia update
   */
  export type multimediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The data needed to update a multimedia.
     */
    data: XOR<multimediaUpdateInput, multimediaUncheckedUpdateInput>
    /**
     * Choose, which multimedia to update.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia updateMany
   */
  export type multimediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update multimedias.
     */
    data: XOR<multimediaUpdateManyMutationInput, multimediaUncheckedUpdateManyInput>
    /**
     * Filter which multimedias to update
     */
    where?: multimediaWhereInput
  }


  /**
   * multimedia upsert
   */
  export type multimediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * The filter to search for the multimedia to update in case it exists.
     */
    where: multimediaWhereUniqueInput
    /**
     * In case the multimedia found by the `where` argument doesn't exist, create a new multimedia with this data.
     */
    create: XOR<multimediaCreateInput, multimediaUncheckedCreateInput>
    /**
     * In case the multimedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<multimediaUpdateInput, multimediaUncheckedUpdateInput>
  }


  /**
   * multimedia delete
   */
  export type multimediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
    /**
     * Filter which multimedia to delete.
     */
    where: multimediaWhereUniqueInput
  }


  /**
   * multimedia deleteMany
   */
  export type multimediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which multimedias to delete
     */
    where?: multimediaWhereInput
  }


  /**
   * multimedia.mensaje
   */
  export type multimedia$mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    cursor?: mensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * multimedia without action
   */
  export type multimediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the multimedia
     */
    select?: multimediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: multimediaInclude<ExtArgs> | null
  }



  /**
   * Model participa
   */

  export type AggregateParticipa = {
    _count: ParticipaCountAggregateOutputType | null
    _avg: ParticipaAvgAggregateOutputType | null
    _sum: ParticipaSumAggregateOutputType | null
    _min: ParticipaMinAggregateOutputType | null
    _max: ParticipaMaxAggregateOutputType | null
  }

  export type ParticipaAvgAggregateOutputType = {
    sala: number | null
  }

  export type ParticipaSumAggregateOutputType = {
    sala: number | null
  }

  export type ParticipaMinAggregateOutputType = {
    sala: number | null
    usuario: string | null
    estado: string | null
  }

  export type ParticipaMaxAggregateOutputType = {
    sala: number | null
    usuario: string | null
    estado: string | null
  }

  export type ParticipaCountAggregateOutputType = {
    sala: number
    usuario: number
    estado: number
    _all: number
  }


  export type ParticipaAvgAggregateInputType = {
    sala?: true
  }

  export type ParticipaSumAggregateInputType = {
    sala?: true
  }

  export type ParticipaMinAggregateInputType = {
    sala?: true
    usuario?: true
    estado?: true
  }

  export type ParticipaMaxAggregateInputType = {
    sala?: true
    usuario?: true
    estado?: true
  }

  export type ParticipaCountAggregateInputType = {
    sala?: true
    usuario?: true
    estado?: true
    _all?: true
  }

  export type ParticipaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participa to aggregate.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned participas
    **/
    _count?: true | ParticipaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipaMaxAggregateInputType
  }

  export type GetParticipaAggregateType<T extends ParticipaAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipa[P]>
      : GetScalarType<T[P], AggregateParticipa[P]>
  }




  export type participaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: participaWhereInput
    orderBy?: participaOrderByWithAggregationInput | participaOrderByWithAggregationInput[]
    by: ParticipaScalarFieldEnum[] | ParticipaScalarFieldEnum
    having?: participaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipaCountAggregateInputType | true
    _avg?: ParticipaAvgAggregateInputType
    _sum?: ParticipaSumAggregateInputType
    _min?: ParticipaMinAggregateInputType
    _max?: ParticipaMaxAggregateInputType
  }

  export type ParticipaGroupByOutputType = {
    sala: number
    usuario: string
    estado: string
    _count: ParticipaCountAggregateOutputType | null
    _avg: ParticipaAvgAggregateOutputType | null
    _sum: ParticipaSumAggregateOutputType | null
    _min: ParticipaMinAggregateOutputType | null
    _max: ParticipaMaxAggregateOutputType | null
  }

  type GetParticipaGroupByPayload<T extends participaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParticipaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipaGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipaGroupByOutputType[P]>
        }
      >
    >


  export type participaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sala?: boolean
    usuario?: boolean
    estado?: boolean
    mensaje?: boolean | participa$mensajeArgs<ExtArgs>
    sala_participa_salaTosala?: boolean | salaDefaultArgs<ExtArgs>
    usuario_participa_usuarioTousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    _count?: boolean | ParticipaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participa"]>

  export type participaSelectScalar = {
    sala?: boolean
    usuario?: boolean
    estado?: boolean
  }

  export type participaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensaje?: boolean | participa$mensajeArgs<ExtArgs>
    sala_participa_salaTosala?: boolean | salaDefaultArgs<ExtArgs>
    usuario_participa_usuarioTousuario?: boolean | usuarioDefaultArgs<ExtArgs>
    _count?: boolean | ParticipaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $participaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "participa"
    objects: {
      mensaje: Prisma.$mensajePayload<ExtArgs>[]
      sala_participa_salaTosala: Prisma.$salaPayload<ExtArgs>
      usuario_participa_usuarioTousuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sala: number
      usuario: string
      estado: string
    }, ExtArgs["result"]["participa"]>
    composites: {}
  }


  type participaGetPayload<S extends boolean | null | undefined | participaDefaultArgs> = $Result.GetResult<Prisma.$participaPayload, S>

  type participaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<participaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParticipaCountAggregateInputType | true
    }

  export interface participaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['participa'], meta: { name: 'participa' } }
    /**
     * Find zero or one Participa that matches the filter.
     * @param {participaFindUniqueArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends participaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, participaFindUniqueArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Participa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {participaFindUniqueOrThrowArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends participaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Participa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindFirstArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends participaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindFirstArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Participa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindFirstOrThrowArgs} args - Arguments to find a Participa
     * @example
     * // Get one Participa
     * const participa = await prisma.participa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends participaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Participas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participas
     * const participas = await prisma.participa.findMany()
     * 
     * // Get first 10 Participas
     * const participas = await prisma.participa.findMany({ take: 10 })
     * 
     * // Only select the `sala`
     * const participaWithSalaOnly = await prisma.participa.findMany({ select: { sala: true } })
     * 
    **/
    findMany<T extends participaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Participa.
     * @param {participaCreateArgs} args - Arguments to create a Participa.
     * @example
     * // Create one Participa
     * const Participa = await prisma.participa.create({
     *   data: {
     *     // ... data to create a Participa
     *   }
     * })
     * 
    **/
    create<T extends participaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, participaCreateArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Participas.
     *     @param {participaCreateManyArgs} args - Arguments to create many Participas.
     *     @example
     *     // Create many Participas
     *     const participa = await prisma.participa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends participaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Participa.
     * @param {participaDeleteArgs} args - Arguments to delete one Participa.
     * @example
     * // Delete one Participa
     * const Participa = await prisma.participa.delete({
     *   where: {
     *     // ... filter to delete one Participa
     *   }
     * })
     * 
    **/
    delete<T extends participaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, participaDeleteArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Participa.
     * @param {participaUpdateArgs} args - Arguments to update one Participa.
     * @example
     * // Update one Participa
     * const participa = await prisma.participa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends participaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpdateArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Participas.
     * @param {participaDeleteManyArgs} args - Arguments to filter Participas to delete.
     * @example
     * // Delete a few Participas
     * const { count } = await prisma.participa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends participaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, participaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participas
     * const participa = await prisma.participa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends participaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Participa.
     * @param {participaUpsertArgs} args - Arguments to update or create a Participa.
     * @example
     * // Update or create a Participa
     * const participa = await prisma.participa.upsert({
     *   create: {
     *     // ... data to create a Participa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participa we want to update
     *   }
     * })
    **/
    upsert<T extends participaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, participaUpsertArgs<ExtArgs>>
    ): Prisma__participaClient<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Participas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaCountArgs} args - Arguments to filter Participas to count.
     * @example
     * // Count the number of Participas
     * const count = await prisma.participa.count({
     *   where: {
     *     // ... the filter for the Participas we want to count
     *   }
     * })
    **/
    count<T extends participaCountArgs>(
      args?: Subset<T, participaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipaAggregateArgs>(args: Subset<T, ParticipaAggregateArgs>): Prisma.PrismaPromise<GetParticipaAggregateType<T>>

    /**
     * Group by Participa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends participaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: participaGroupByArgs['orderBy'] }
        : { orderBy?: participaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, participaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the participa model
   */
  readonly fields: participaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for participa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__participaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mensaje<T extends participa$mensajeArgs<ExtArgs> = {}>(args?: Subset<T, participa$mensajeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensajePayload<ExtArgs>, T, 'findMany'> | Null>;

    sala_participa_salaTosala<T extends salaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, salaDefaultArgs<ExtArgs>>): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuario_participa_usuarioTousuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the participa model
   */ 
  interface participaFieldRefs {
    readonly sala: FieldRef<"participa", 'Int'>
    readonly usuario: FieldRef<"participa", 'String'>
    readonly estado: FieldRef<"participa", 'String'>
  }
    

  // Custom InputTypes

  /**
   * participa findUnique
   */
  export type participaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa findUniqueOrThrow
   */
  export type participaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa findFirst
   */
  export type participaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participas.
     */
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa findFirstOrThrow
   */
  export type participaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participa to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participas.
     */
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa findMany
   */
  export type participaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter, which participas to fetch.
     */
    where?: participaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participas to fetch.
     */
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing participas.
     */
    cursor?: participaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participas.
     */
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * participa create
   */
  export type participaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The data needed to create a participa.
     */
    data: XOR<participaCreateInput, participaUncheckedCreateInput>
  }


  /**
   * participa createMany
   */
  export type participaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many participas.
     */
    data: participaCreateManyInput | participaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * participa update
   */
  export type participaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The data needed to update a participa.
     */
    data: XOR<participaUpdateInput, participaUncheckedUpdateInput>
    /**
     * Choose, which participa to update.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa updateMany
   */
  export type participaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update participas.
     */
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyInput>
    /**
     * Filter which participas to update
     */
    where?: participaWhereInput
  }


  /**
   * participa upsert
   */
  export type participaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * The filter to search for the participa to update in case it exists.
     */
    where: participaWhereUniqueInput
    /**
     * In case the participa found by the `where` argument doesn't exist, create a new participa with this data.
     */
    create: XOR<participaCreateInput, participaUncheckedCreateInput>
    /**
     * In case the participa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<participaUpdateInput, participaUncheckedUpdateInput>
  }


  /**
   * participa delete
   */
  export type participaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    /**
     * Filter which participa to delete.
     */
    where: participaWhereUniqueInput
  }


  /**
   * participa deleteMany
   */
  export type participaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which participas to delete
     */
    where?: participaWhereInput
  }


  /**
   * participa.mensaje
   */
  export type participa$mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensaje
     */
    select?: mensajeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: mensajeInclude<ExtArgs> | null
    where?: mensajeWhereInput
    orderBy?: mensajeOrderByWithRelationInput | mensajeOrderByWithRelationInput[]
    cursor?: mensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensajeScalarFieldEnum | MensajeScalarFieldEnum[]
  }


  /**
   * participa without action
   */
  export type participaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
  }



  /**
   * Model sala
   */

  export type AggregateSala = {
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  export type SalaAvgAggregateOutputType = {
    idsala: number | null
  }

  export type SalaSumAggregateOutputType = {
    idsala: number | null
  }

  export type SalaMinAggregateOutputType = {
    idsala: number | null
    urlvideo: string | null
  }

  export type SalaMaxAggregateOutputType = {
    idsala: number | null
    urlvideo: string | null
  }

  export type SalaCountAggregateOutputType = {
    idsala: number
    urlvideo: number
    _all: number
  }


  export type SalaAvgAggregateInputType = {
    idsala?: true
  }

  export type SalaSumAggregateInputType = {
    idsala?: true
  }

  export type SalaMinAggregateInputType = {
    idsala?: true
    urlvideo?: true
  }

  export type SalaMaxAggregateInputType = {
    idsala?: true
    urlvideo?: true
  }

  export type SalaCountAggregateInputType = {
    idsala?: true
    urlvideo?: true
    _all?: true
  }

  export type SalaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sala to aggregate.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned salas
    **/
    _count?: true | SalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaMaxAggregateInputType
  }

  export type GetSalaAggregateType<T extends SalaAggregateArgs> = {
        [P in keyof T & keyof AggregateSala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSala[P]>
      : GetScalarType<T[P], AggregateSala[P]>
  }




  export type salaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: salaWhereInput
    orderBy?: salaOrderByWithAggregationInput | salaOrderByWithAggregationInput[]
    by: SalaScalarFieldEnum[] | SalaScalarFieldEnum
    having?: salaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaCountAggregateInputType | true
    _avg?: SalaAvgAggregateInputType
    _sum?: SalaSumAggregateInputType
    _min?: SalaMinAggregateInputType
    _max?: SalaMaxAggregateInputType
  }

  export type SalaGroupByOutputType = {
    idsala: number
    urlvideo: string
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  type GetSalaGroupByPayload<T extends salaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaGroupByOutputType[P]>
            : GetScalarType<T[P], SalaGroupByOutputType[P]>
        }
      >
    >


  export type salaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idsala?: boolean
    urlvideo?: boolean
    participa_participa_salaTosala?: boolean | sala$participa_participa_salaTosalaArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sala"]>

  export type salaSelectScalar = {
    idsala?: boolean
    urlvideo?: boolean
  }

  export type salaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participa_participa_salaTosala?: boolean | sala$participa_participa_salaTosalaArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $salaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sala"
    objects: {
      participa_participa_salaTosala: Prisma.$participaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idsala: number
      urlvideo: string
    }, ExtArgs["result"]["sala"]>
    composites: {}
  }


  type salaGetPayload<S extends boolean | null | undefined | salaDefaultArgs> = $Result.GetResult<Prisma.$salaPayload, S>

  type salaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<salaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalaCountAggregateInputType | true
    }

  export interface salaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sala'], meta: { name: 'sala' } }
    /**
     * Find zero or one Sala that matches the filter.
     * @param {salaFindUniqueArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, salaFindUniqueArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sala that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {salaFindUniqueOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends salaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindFirstArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sala that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends salaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Salas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salas
     * const salas = await prisma.sala.findMany()
     * 
     * // Get first 10 Salas
     * const salas = await prisma.sala.findMany({ take: 10 })
     * 
     * // Only select the `idsala`
     * const salaWithIdsalaOnly = await prisma.sala.findMany({ select: { idsala: true } })
     * 
    **/
    findMany<T extends salaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sala.
     * @param {salaCreateArgs} args - Arguments to create a Sala.
     * @example
     * // Create one Sala
     * const Sala = await prisma.sala.create({
     *   data: {
     *     // ... data to create a Sala
     *   }
     * })
     * 
    **/
    create<T extends salaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, salaCreateArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Salas.
     *     @param {salaCreateManyArgs} args - Arguments to create many Salas.
     *     @example
     *     // Create many Salas
     *     const sala = await prisma.sala.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sala.
     * @param {salaDeleteArgs} args - Arguments to delete one Sala.
     * @example
     * // Delete one Sala
     * const Sala = await prisma.sala.delete({
     *   where: {
     *     // ... filter to delete one Sala
     *   }
     * })
     * 
    **/
    delete<T extends salaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, salaDeleteArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sala.
     * @param {salaUpdateArgs} args - Arguments to update one Sala.
     * @example
     * // Update one Sala
     * const sala = await prisma.sala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpdateArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Salas.
     * @param {salaDeleteManyArgs} args - Arguments to filter Salas to delete.
     * @example
     * // Delete a few Salas
     * const { count } = await prisma.sala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salas
     * const sala = await prisma.sala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sala.
     * @param {salaUpsertArgs} args - Arguments to update or create a Sala.
     * @example
     * // Update or create a Sala
     * const sala = await prisma.sala.upsert({
     *   create: {
     *     // ... data to create a Sala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sala we want to update
     *   }
     * })
    **/
    upsert<T extends salaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, salaUpsertArgs<ExtArgs>>
    ): Prisma__salaClient<$Result.GetResult<Prisma.$salaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaCountArgs} args - Arguments to filter Salas to count.
     * @example
     * // Count the number of Salas
     * const count = await prisma.sala.count({
     *   where: {
     *     // ... the filter for the Salas we want to count
     *   }
     * })
    **/
    count<T extends salaCountArgs>(
      args?: Subset<T, salaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaAggregateArgs>(args: Subset<T, SalaAggregateArgs>): Prisma.PrismaPromise<GetSalaAggregateType<T>>

    /**
     * Group by Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends salaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: salaGroupByArgs['orderBy'] }
        : { orderBy?: salaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, salaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sala model
   */
  readonly fields: salaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__salaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    participa_participa_salaTosala<T extends sala$participa_participa_salaTosalaArgs<ExtArgs> = {}>(args?: Subset<T, sala$participa_participa_salaTosalaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sala model
   */ 
  interface salaFieldRefs {
    readonly idsala: FieldRef<"sala", 'Int'>
    readonly urlvideo: FieldRef<"sala", 'String'>
  }
    

  // Custom InputTypes

  /**
   * sala findUnique
   */
  export type salaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala findUniqueOrThrow
   */
  export type salaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala findFirst
   */
  export type salaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala findFirstOrThrow
   */
  export type salaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which sala to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala findMany
   */
  export type salaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter, which salas to fetch.
     */
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     */
    orderBy?: salaOrderByWithRelationInput | salaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing salas.
     */
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     */
    skip?: number
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }


  /**
   * sala create
   */
  export type salaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The data needed to create a sala.
     */
    data: XOR<salaCreateInput, salaUncheckedCreateInput>
  }


  /**
   * sala createMany
   */
  export type salaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many salas.
     */
    data: salaCreateManyInput | salaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sala update
   */
  export type salaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The data needed to update a sala.
     */
    data: XOR<salaUpdateInput, salaUncheckedUpdateInput>
    /**
     * Choose, which sala to update.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala updateMany
   */
  export type salaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update salas.
     */
    data: XOR<salaUpdateManyMutationInput, salaUncheckedUpdateManyInput>
    /**
     * Filter which salas to update
     */
    where?: salaWhereInput
  }


  /**
   * sala upsert
   */
  export type salaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * The filter to search for the sala to update in case it exists.
     */
    where: salaWhereUniqueInput
    /**
     * In case the sala found by the `where` argument doesn't exist, create a new sala with this data.
     */
    create: XOR<salaCreateInput, salaUncheckedCreateInput>
    /**
     * In case the sala was found with the provided `where` argument, update it with this data.
     */
    update: XOR<salaUpdateInput, salaUncheckedUpdateInput>
  }


  /**
   * sala delete
   */
  export type salaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
    /**
     * Filter which sala to delete.
     */
    where: salaWhereUniqueInput
  }


  /**
   * sala deleteMany
   */
  export type salaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which salas to delete
     */
    where?: salaWhereInput
  }


  /**
   * sala.participa_participa_salaTosala
   */
  export type sala$participa_participa_salaTosalaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    where?: participaWhereInput
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    cursor?: participaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * sala without action
   */
  export type salaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sala
     */
    select?: salaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salaInclude<ExtArgs> | null
  }



  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    edad: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    edad: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    correo: string | null
    nombre: string | null
    descripcion: string | null
    contrasena: string | null
    edad: number | null
    sexo: string | null
    preferencias: string | null
    tipousuario: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    correo: string | null
    nombre: string | null
    descripcion: string | null
    contrasena: string | null
    edad: number | null
    sexo: string | null
    preferencias: string | null
    tipousuario: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    correo: number
    nombre: number
    descripcion: number
    contrasena: number
    edad: number
    sexo: number
    preferencias: number
    tipousuario: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    edad?: true
  }

  export type UsuarioSumAggregateInputType = {
    edad?: true
  }

  export type UsuarioMinAggregateInputType = {
    correo?: true
    nombre?: true
    descripcion?: true
    contrasena?: true
    edad?: true
    sexo?: true
    preferencias?: true
    tipousuario?: true
  }

  export type UsuarioMaxAggregateInputType = {
    correo?: true
    nombre?: true
    descripcion?: true
    contrasena?: true
    edad?: true
    sexo?: true
    preferencias?: true
    tipousuario?: true
  }

  export type UsuarioCountAggregateInputType = {
    correo?: true
    nombre?: true
    descripcion?: true
    contrasena?: true
    edad?: true
    sexo?: true
    preferencias?: true
    tipousuario?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    correo?: boolean
    nombre?: boolean
    descripcion?: boolean
    contrasena?: boolean
    edad?: boolean
    sexo?: boolean
    preferencias?: boolean
    tipousuario?: boolean
    hacenmatch_hacenmatch_idusuario2Tousuario?: boolean | usuario$hacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs>
    hacenmatch_hacenmatch_idusuarioTousuario?: boolean | usuario$hacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs>
    participa_participa_usuarioTousuario?: boolean | usuario$participa_participa_usuarioTousuarioArgs<ExtArgs>
    videoyoutube?: boolean | usuario$videoyoutubeArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    correo?: boolean
    nombre?: boolean
    descripcion?: boolean
    contrasena?: boolean
    edad?: boolean
    sexo?: boolean
    preferencias?: boolean
    tipousuario?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hacenmatch_hacenmatch_idusuario2Tousuario?: boolean | usuario$hacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs>
    hacenmatch_hacenmatch_idusuarioTousuario?: boolean | usuario$hacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs>
    participa_participa_usuarioTousuario?: boolean | usuario$participa_participa_usuarioTousuarioArgs<ExtArgs>
    videoyoutube?: boolean | usuario$videoyoutubeArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      hacenmatch_hacenmatch_idusuario2Tousuario: Prisma.$hacenmatchPayload<ExtArgs>[]
      hacenmatch_hacenmatch_idusuarioTousuario: Prisma.$hacenmatchPayload<ExtArgs>[]
      participa_participa_usuarioTousuario: Prisma.$participaPayload<ExtArgs>[]
      videoyoutube: Prisma.$videoyoutubePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      correo: string
      nombre: string
      descripcion: string
      contrasena: string
      edad: number
      sexo: string
      preferencias: string
      tipousuario: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `correo`
     * const usuarioWithCorreoOnly = await prisma.usuario.findMany({ select: { correo: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hacenmatch_hacenmatch_idusuario2Tousuario<T extends usuario$hacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$hacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    hacenmatch_hacenmatch_idusuarioTousuario<T extends usuario$hacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$hacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hacenmatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    participa_participa_usuarioTousuario<T extends usuario$participa_participa_usuarioTousuarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$participa_participa_usuarioTousuarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$participaPayload<ExtArgs>, T, 'findMany'> | Null>;

    videoyoutube<T extends usuario$videoyoutubeArgs<ExtArgs> = {}>(args?: Subset<T, usuario$videoyoutubeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly correo: FieldRef<"usuario", 'String'>
    readonly nombre: FieldRef<"usuario", 'String'>
    readonly descripcion: FieldRef<"usuario", 'String'>
    readonly contrasena: FieldRef<"usuario", 'String'>
    readonly edad: FieldRef<"usuario", 'Int'>
    readonly sexo: FieldRef<"usuario", 'String'>
    readonly preferencias: FieldRef<"usuario", 'String'>
    readonly tipousuario: FieldRef<"usuario", 'String'>
  }
    

  // Custom InputTypes

  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario.hacenmatch_hacenmatch_idusuario2Tousuario
   */
  export type usuario$hacenmatch_hacenmatch_idusuario2TousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    where?: hacenmatchWhereInput
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    cursor?: hacenmatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HacenmatchScalarFieldEnum | HacenmatchScalarFieldEnum[]
  }


  /**
   * usuario.hacenmatch_hacenmatch_idusuarioTousuario
   */
  export type usuario$hacenmatch_hacenmatch_idusuarioTousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hacenmatch
     */
    select?: hacenmatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hacenmatchInclude<ExtArgs> | null
    where?: hacenmatchWhereInput
    orderBy?: hacenmatchOrderByWithRelationInput | hacenmatchOrderByWithRelationInput[]
    cursor?: hacenmatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HacenmatchScalarFieldEnum | HacenmatchScalarFieldEnum[]
  }


  /**
   * usuario.participa_participa_usuarioTousuario
   */
  export type usuario$participa_participa_usuarioTousuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the participa
     */
    select?: participaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: participaInclude<ExtArgs> | null
    where?: participaWhereInput
    orderBy?: participaOrderByWithRelationInput | participaOrderByWithRelationInput[]
    cursor?: participaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipaScalarFieldEnum | ParticipaScalarFieldEnum[]
  }


  /**
   * usuario.videoyoutube
   */
  export type usuario$videoyoutubeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    where?: videoyoutubeWhereInput
    orderBy?: videoyoutubeOrderByWithRelationInput | videoyoutubeOrderByWithRelationInput[]
    cursor?: videoyoutubeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoyoutubeScalarFieldEnum | VideoyoutubeScalarFieldEnum[]
  }


  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
  }



  /**
   * Model videoyoutube
   */

  export type AggregateVideoyoutube = {
    _count: VideoyoutubeCountAggregateOutputType | null
    _min: VideoyoutubeMinAggregateOutputType | null
    _max: VideoyoutubeMaxAggregateOutputType | null
  }

  export type VideoyoutubeMinAggregateOutputType = {
    urlvideo: string | null
    idusuario: string | null
  }

  export type VideoyoutubeMaxAggregateOutputType = {
    urlvideo: string | null
    idusuario: string | null
  }

  export type VideoyoutubeCountAggregateOutputType = {
    urlvideo: number
    idusuario: number
    _all: number
  }


  export type VideoyoutubeMinAggregateInputType = {
    urlvideo?: true
    idusuario?: true
  }

  export type VideoyoutubeMaxAggregateInputType = {
    urlvideo?: true
    idusuario?: true
  }

  export type VideoyoutubeCountAggregateInputType = {
    urlvideo?: true
    idusuario?: true
    _all?: true
  }

  export type VideoyoutubeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videoyoutube to aggregate.
     */
    where?: videoyoutubeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoyoutubes to fetch.
     */
    orderBy?: videoyoutubeOrderByWithRelationInput | videoyoutubeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: videoyoutubeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoyoutubes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoyoutubes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned videoyoutubes
    **/
    _count?: true | VideoyoutubeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoyoutubeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoyoutubeMaxAggregateInputType
  }

  export type GetVideoyoutubeAggregateType<T extends VideoyoutubeAggregateArgs> = {
        [P in keyof T & keyof AggregateVideoyoutube]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideoyoutube[P]>
      : GetScalarType<T[P], AggregateVideoyoutube[P]>
  }




  export type videoyoutubeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videoyoutubeWhereInput
    orderBy?: videoyoutubeOrderByWithAggregationInput | videoyoutubeOrderByWithAggregationInput[]
    by: VideoyoutubeScalarFieldEnum[] | VideoyoutubeScalarFieldEnum
    having?: videoyoutubeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoyoutubeCountAggregateInputType | true
    _min?: VideoyoutubeMinAggregateInputType
    _max?: VideoyoutubeMaxAggregateInputType
  }

  export type VideoyoutubeGroupByOutputType = {
    urlvideo: string
    idusuario: string
    _count: VideoyoutubeCountAggregateOutputType | null
    _min: VideoyoutubeMinAggregateOutputType | null
    _max: VideoyoutubeMaxAggregateOutputType | null
  }

  type GetVideoyoutubeGroupByPayload<T extends videoyoutubeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoyoutubeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoyoutubeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoyoutubeGroupByOutputType[P]>
            : GetScalarType<T[P], VideoyoutubeGroupByOutputType[P]>
        }
      >
    >


  export type videoyoutubeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    urlvideo?: boolean
    idusuario?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoyoutube"]>

  export type videoyoutubeSelectScalar = {
    urlvideo?: boolean
    idusuario?: boolean
  }

  export type videoyoutubeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $videoyoutubePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "videoyoutube"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      urlvideo: string
      idusuario: string
    }, ExtArgs["result"]["videoyoutube"]>
    composites: {}
  }


  type videoyoutubeGetPayload<S extends boolean | null | undefined | videoyoutubeDefaultArgs> = $Result.GetResult<Prisma.$videoyoutubePayload, S>

  type videoyoutubeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<videoyoutubeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VideoyoutubeCountAggregateInputType | true
    }

  export interface videoyoutubeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['videoyoutube'], meta: { name: 'videoyoutube' } }
    /**
     * Find zero or one Videoyoutube that matches the filter.
     * @param {videoyoutubeFindUniqueArgs} args - Arguments to find a Videoyoutube
     * @example
     * // Get one Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends videoyoutubeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeFindUniqueArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Videoyoutube that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {videoyoutubeFindUniqueOrThrowArgs} args - Arguments to find a Videoyoutube
     * @example
     * // Get one Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends videoyoutubeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Videoyoutube that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeFindFirstArgs} args - Arguments to find a Videoyoutube
     * @example
     * // Get one Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends videoyoutubeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeFindFirstArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Videoyoutube that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeFindFirstOrThrowArgs} args - Arguments to find a Videoyoutube
     * @example
     * // Get one Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends videoyoutubeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Videoyoutubes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videoyoutubes
     * const videoyoutubes = await prisma.videoyoutube.findMany()
     * 
     * // Get first 10 Videoyoutubes
     * const videoyoutubes = await prisma.videoyoutube.findMany({ take: 10 })
     * 
     * // Only select the `urlvideo`
     * const videoyoutubeWithUrlvideoOnly = await prisma.videoyoutube.findMany({ select: { urlvideo: true } })
     * 
    **/
    findMany<T extends videoyoutubeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Videoyoutube.
     * @param {videoyoutubeCreateArgs} args - Arguments to create a Videoyoutube.
     * @example
     * // Create one Videoyoutube
     * const Videoyoutube = await prisma.videoyoutube.create({
     *   data: {
     *     // ... data to create a Videoyoutube
     *   }
     * })
     * 
    **/
    create<T extends videoyoutubeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeCreateArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Videoyoutubes.
     *     @param {videoyoutubeCreateManyArgs} args - Arguments to create many Videoyoutubes.
     *     @example
     *     // Create many Videoyoutubes
     *     const videoyoutube = await prisma.videoyoutube.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends videoyoutubeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Videoyoutube.
     * @param {videoyoutubeDeleteArgs} args - Arguments to delete one Videoyoutube.
     * @example
     * // Delete one Videoyoutube
     * const Videoyoutube = await prisma.videoyoutube.delete({
     *   where: {
     *     // ... filter to delete one Videoyoutube
     *   }
     * })
     * 
    **/
    delete<T extends videoyoutubeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeDeleteArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Videoyoutube.
     * @param {videoyoutubeUpdateArgs} args - Arguments to update one Videoyoutube.
     * @example
     * // Update one Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends videoyoutubeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeUpdateArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Videoyoutubes.
     * @param {videoyoutubeDeleteManyArgs} args - Arguments to filter Videoyoutubes to delete.
     * @example
     * // Delete a few Videoyoutubes
     * const { count } = await prisma.videoyoutube.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends videoyoutubeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videoyoutubeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videoyoutubes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videoyoutubes
     * const videoyoutube = await prisma.videoyoutube.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends videoyoutubeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Videoyoutube.
     * @param {videoyoutubeUpsertArgs} args - Arguments to update or create a Videoyoutube.
     * @example
     * // Update or create a Videoyoutube
     * const videoyoutube = await prisma.videoyoutube.upsert({
     *   create: {
     *     // ... data to create a Videoyoutube
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Videoyoutube we want to update
     *   }
     * })
    **/
    upsert<T extends videoyoutubeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, videoyoutubeUpsertArgs<ExtArgs>>
    ): Prisma__videoyoutubeClient<$Result.GetResult<Prisma.$videoyoutubePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Videoyoutubes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeCountArgs} args - Arguments to filter Videoyoutubes to count.
     * @example
     * // Count the number of Videoyoutubes
     * const count = await prisma.videoyoutube.count({
     *   where: {
     *     // ... the filter for the Videoyoutubes we want to count
     *   }
     * })
    **/
    count<T extends videoyoutubeCountArgs>(
      args?: Subset<T, videoyoutubeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoyoutubeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Videoyoutube.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoyoutubeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoyoutubeAggregateArgs>(args: Subset<T, VideoyoutubeAggregateArgs>): Prisma.PrismaPromise<GetVideoyoutubeAggregateType<T>>

    /**
     * Group by Videoyoutube.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videoyoutubeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends videoyoutubeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: videoyoutubeGroupByArgs['orderBy'] }
        : { orderBy?: videoyoutubeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, videoyoutubeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoyoutubeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the videoyoutube model
   */
  readonly fields: videoyoutubeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for videoyoutube.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__videoyoutubeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the videoyoutube model
   */ 
  interface videoyoutubeFieldRefs {
    readonly urlvideo: FieldRef<"videoyoutube", 'String'>
    readonly idusuario: FieldRef<"videoyoutube", 'String'>
  }
    

  // Custom InputTypes

  /**
   * videoyoutube findUnique
   */
  export type videoyoutubeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter, which videoyoutube to fetch.
     */
    where: videoyoutubeWhereUniqueInput
  }


  /**
   * videoyoutube findUniqueOrThrow
   */
  export type videoyoutubeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter, which videoyoutube to fetch.
     */
    where: videoyoutubeWhereUniqueInput
  }


  /**
   * videoyoutube findFirst
   */
  export type videoyoutubeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter, which videoyoutube to fetch.
     */
    where?: videoyoutubeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoyoutubes to fetch.
     */
    orderBy?: videoyoutubeOrderByWithRelationInput | videoyoutubeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videoyoutubes.
     */
    cursor?: videoyoutubeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoyoutubes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoyoutubes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videoyoutubes.
     */
    distinct?: VideoyoutubeScalarFieldEnum | VideoyoutubeScalarFieldEnum[]
  }


  /**
   * videoyoutube findFirstOrThrow
   */
  export type videoyoutubeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter, which videoyoutube to fetch.
     */
    where?: videoyoutubeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoyoutubes to fetch.
     */
    orderBy?: videoyoutubeOrderByWithRelationInput | videoyoutubeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videoyoutubes.
     */
    cursor?: videoyoutubeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoyoutubes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoyoutubes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videoyoutubes.
     */
    distinct?: VideoyoutubeScalarFieldEnum | VideoyoutubeScalarFieldEnum[]
  }


  /**
   * videoyoutube findMany
   */
  export type videoyoutubeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter, which videoyoutubes to fetch.
     */
    where?: videoyoutubeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videoyoutubes to fetch.
     */
    orderBy?: videoyoutubeOrderByWithRelationInput | videoyoutubeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing videoyoutubes.
     */
    cursor?: videoyoutubeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videoyoutubes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videoyoutubes.
     */
    skip?: number
    distinct?: VideoyoutubeScalarFieldEnum | VideoyoutubeScalarFieldEnum[]
  }


  /**
   * videoyoutube create
   */
  export type videoyoutubeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * The data needed to create a videoyoutube.
     */
    data: XOR<videoyoutubeCreateInput, videoyoutubeUncheckedCreateInput>
  }


  /**
   * videoyoutube createMany
   */
  export type videoyoutubeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many videoyoutubes.
     */
    data: videoyoutubeCreateManyInput | videoyoutubeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * videoyoutube update
   */
  export type videoyoutubeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * The data needed to update a videoyoutube.
     */
    data: XOR<videoyoutubeUpdateInput, videoyoutubeUncheckedUpdateInput>
    /**
     * Choose, which videoyoutube to update.
     */
    where: videoyoutubeWhereUniqueInput
  }


  /**
   * videoyoutube updateMany
   */
  export type videoyoutubeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update videoyoutubes.
     */
    data: XOR<videoyoutubeUpdateManyMutationInput, videoyoutubeUncheckedUpdateManyInput>
    /**
     * Filter which videoyoutubes to update
     */
    where?: videoyoutubeWhereInput
  }


  /**
   * videoyoutube upsert
   */
  export type videoyoutubeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * The filter to search for the videoyoutube to update in case it exists.
     */
    where: videoyoutubeWhereUniqueInput
    /**
     * In case the videoyoutube found by the `where` argument doesn't exist, create a new videoyoutube with this data.
     */
    create: XOR<videoyoutubeCreateInput, videoyoutubeUncheckedCreateInput>
    /**
     * In case the videoyoutube was found with the provided `where` argument, update it with this data.
     */
    update: XOR<videoyoutubeUpdateInput, videoyoutubeUncheckedUpdateInput>
  }


  /**
   * videoyoutube delete
   */
  export type videoyoutubeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
    /**
     * Filter which videoyoutube to delete.
     */
    where: videoyoutubeWhereUniqueInput
  }


  /**
   * videoyoutube deleteMany
   */
  export type videoyoutubeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videoyoutubes to delete
     */
    where?: videoyoutubeWhereInput
  }


  /**
   * videoyoutube without action
   */
  export type videoyoutubeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videoyoutube
     */
    select?: videoyoutubeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videoyoutubeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const HacenmatchScalarFieldEnum: {
    idusuario: 'idusuario',
    idusuario2: 'idusuario2'
  };

  export type HacenmatchScalarFieldEnum = (typeof HacenmatchScalarFieldEnum)[keyof typeof HacenmatchScalarFieldEnum]


  export const MensajeScalarFieldEnum: {
    id: 'id',
    sala: 'sala',
    usuario: 'usuario',
    texto: 'texto',
    fechahora: 'fechahora',
    idmultimedia: 'idmultimedia'
  };

  export type MensajeScalarFieldEnum = (typeof MensajeScalarFieldEnum)[keyof typeof MensajeScalarFieldEnum]


  export const MultimediaScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    nombre: 'nombre',
    ruta: 'ruta',
    tipomultimedia: 'tipomultimedia'
  };

  export type MultimediaScalarFieldEnum = (typeof MultimediaScalarFieldEnum)[keyof typeof MultimediaScalarFieldEnum]


  export const ParticipaScalarFieldEnum: {
    sala: 'sala',
    usuario: 'usuario',
    estado: 'estado'
  };

  export type ParticipaScalarFieldEnum = (typeof ParticipaScalarFieldEnum)[keyof typeof ParticipaScalarFieldEnum]


  export const SalaScalarFieldEnum: {
    idsala: 'idsala',
    urlvideo: 'urlvideo'
  };

  export type SalaScalarFieldEnum = (typeof SalaScalarFieldEnum)[keyof typeof SalaScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    correo: 'correo',
    nombre: 'nombre',
    descripcion: 'descripcion',
    contrasena: 'contrasena',
    edad: 'edad',
    sexo: 'sexo',
    preferencias: 'preferencias',
    tipousuario: 'tipousuario'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const VideoyoutubeScalarFieldEnum: {
    urlvideo: 'urlvideo',
    idusuario: 'idusuario'
  };

  export type VideoyoutubeScalarFieldEnum = (typeof VideoyoutubeScalarFieldEnum)[keyof typeof VideoyoutubeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type hacenmatchWhereInput = {
    AND?: hacenmatchWhereInput | hacenmatchWhereInput[]
    OR?: hacenmatchWhereInput[]
    NOT?: hacenmatchWhereInput | hacenmatchWhereInput[]
    idusuario?: StringFilter<"hacenmatch"> | string
    idusuario2?: StringFilter<"hacenmatch"> | string
    usuario_hacenmatch_idusuario2Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    usuario_hacenmatch_idusuarioTousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type hacenmatchOrderByWithRelationInput = {
    idusuario?: SortOrder
    idusuario2?: SortOrder
    usuario_hacenmatch_idusuario2Tousuario?: usuarioOrderByWithRelationInput
    usuario_hacenmatch_idusuarioTousuario?: usuarioOrderByWithRelationInput
  }

  export type hacenmatchWhereUniqueInput = Prisma.AtLeast<{
    idusuario_idusuario2?: hacenmatchIdusuarioIdusuario2CompoundUniqueInput
    AND?: hacenmatchWhereInput | hacenmatchWhereInput[]
    OR?: hacenmatchWhereInput[]
    NOT?: hacenmatchWhereInput | hacenmatchWhereInput[]
    idusuario?: StringFilter<"hacenmatch"> | string
    idusuario2?: StringFilter<"hacenmatch"> | string
    usuario_hacenmatch_idusuario2Tousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    usuario_hacenmatch_idusuarioTousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "idusuario_idusuario2">

  export type hacenmatchOrderByWithAggregationInput = {
    idusuario?: SortOrder
    idusuario2?: SortOrder
    _count?: hacenmatchCountOrderByAggregateInput
    _max?: hacenmatchMaxOrderByAggregateInput
    _min?: hacenmatchMinOrderByAggregateInput
  }

  export type hacenmatchScalarWhereWithAggregatesInput = {
    AND?: hacenmatchScalarWhereWithAggregatesInput | hacenmatchScalarWhereWithAggregatesInput[]
    OR?: hacenmatchScalarWhereWithAggregatesInput[]
    NOT?: hacenmatchScalarWhereWithAggregatesInput | hacenmatchScalarWhereWithAggregatesInput[]
    idusuario?: StringWithAggregatesFilter<"hacenmatch"> | string
    idusuario2?: StringWithAggregatesFilter<"hacenmatch"> | string
  }

  export type mensajeWhereInput = {
    AND?: mensajeWhereInput | mensajeWhereInput[]
    OR?: mensajeWhereInput[]
    NOT?: mensajeWhereInput | mensajeWhereInput[]
    id?: IntFilter<"mensaje"> | number
    sala?: IntFilter<"mensaje"> | number
    usuario?: StringFilter<"mensaje"> | string
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeNullableFilter<"mensaje"> | Date | string | null
    idmultimedia?: IntFilter<"mensaje"> | number
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
    participa?: XOR<ParticipaRelationFilter, participaWhereInput>
  }

  export type mensajeOrderByWithRelationInput = {
    id?: SortOrder
    sala?: SortOrder
    usuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrderInput | SortOrder
    idmultimedia?: SortOrder
    multimedia?: multimediaOrderByWithRelationInput
    participa?: participaOrderByWithRelationInput
  }

  export type mensajeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: mensajeWhereInput | mensajeWhereInput[]
    OR?: mensajeWhereInput[]
    NOT?: mensajeWhereInput | mensajeWhereInput[]
    sala?: IntFilter<"mensaje"> | number
    usuario?: StringFilter<"mensaje"> | string
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeNullableFilter<"mensaje"> | Date | string | null
    idmultimedia?: IntFilter<"mensaje"> | number
    multimedia?: XOR<MultimediaRelationFilter, multimediaWhereInput>
    participa?: XOR<ParticipaRelationFilter, participaWhereInput>
  }, "id">

  export type mensajeOrderByWithAggregationInput = {
    id?: SortOrder
    sala?: SortOrder
    usuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrderInput | SortOrder
    idmultimedia?: SortOrder
    _count?: mensajeCountOrderByAggregateInput
    _avg?: mensajeAvgOrderByAggregateInput
    _max?: mensajeMaxOrderByAggregateInput
    _min?: mensajeMinOrderByAggregateInput
    _sum?: mensajeSumOrderByAggregateInput
  }

  export type mensajeScalarWhereWithAggregatesInput = {
    AND?: mensajeScalarWhereWithAggregatesInput | mensajeScalarWhereWithAggregatesInput[]
    OR?: mensajeScalarWhereWithAggregatesInput[]
    NOT?: mensajeScalarWhereWithAggregatesInput | mensajeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"mensaje"> | number
    sala?: IntWithAggregatesFilter<"mensaje"> | number
    usuario?: StringWithAggregatesFilter<"mensaje"> | string
    texto?: StringWithAggregatesFilter<"mensaje"> | string
    fechahora?: DateTimeNullableWithAggregatesFilter<"mensaje"> | Date | string | null
    idmultimedia?: IntWithAggregatesFilter<"mensaje"> | number
  }

  export type multimediaWhereInput = {
    AND?: multimediaWhereInput | multimediaWhereInput[]
    OR?: multimediaWhereInput[]
    NOT?: multimediaWhereInput | multimediaWhereInput[]
    id?: IntFilter<"multimedia"> | number
    fecha?: DateTimeFilter<"multimedia"> | Date | string
    nombre?: StringFilter<"multimedia"> | string
    ruta?: StringFilter<"multimedia"> | string
    tipomultimedia?: StringFilter<"multimedia"> | string
    mensaje?: MensajeListRelationFilter
  }

  export type multimediaOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    ruta?: SortOrder
    tipomultimedia?: SortOrder
    mensaje?: mensajeOrderByRelationAggregateInput
  }

  export type multimediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: multimediaWhereInput | multimediaWhereInput[]
    OR?: multimediaWhereInput[]
    NOT?: multimediaWhereInput | multimediaWhereInput[]
    fecha?: DateTimeFilter<"multimedia"> | Date | string
    nombre?: StringFilter<"multimedia"> | string
    ruta?: StringFilter<"multimedia"> | string
    tipomultimedia?: StringFilter<"multimedia"> | string
    mensaje?: MensajeListRelationFilter
  }, "id">

  export type multimediaOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    ruta?: SortOrder
    tipomultimedia?: SortOrder
    _count?: multimediaCountOrderByAggregateInput
    _avg?: multimediaAvgOrderByAggregateInput
    _max?: multimediaMaxOrderByAggregateInput
    _min?: multimediaMinOrderByAggregateInput
    _sum?: multimediaSumOrderByAggregateInput
  }

  export type multimediaScalarWhereWithAggregatesInput = {
    AND?: multimediaScalarWhereWithAggregatesInput | multimediaScalarWhereWithAggregatesInput[]
    OR?: multimediaScalarWhereWithAggregatesInput[]
    NOT?: multimediaScalarWhereWithAggregatesInput | multimediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"multimedia"> | number
    fecha?: DateTimeWithAggregatesFilter<"multimedia"> | Date | string
    nombre?: StringWithAggregatesFilter<"multimedia"> | string
    ruta?: StringWithAggregatesFilter<"multimedia"> | string
    tipomultimedia?: StringWithAggregatesFilter<"multimedia"> | string
  }

  export type participaWhereInput = {
    AND?: participaWhereInput | participaWhereInput[]
    OR?: participaWhereInput[]
    NOT?: participaWhereInput | participaWhereInput[]
    sala?: IntFilter<"participa"> | number
    usuario?: StringFilter<"participa"> | string
    estado?: StringFilter<"participa"> | string
    mensaje?: MensajeListRelationFilter
    sala_participa_salaTosala?: XOR<SalaRelationFilter, salaWhereInput>
    usuario_participa_usuarioTousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type participaOrderByWithRelationInput = {
    sala?: SortOrder
    usuario?: SortOrder
    estado?: SortOrder
    mensaje?: mensajeOrderByRelationAggregateInput
    sala_participa_salaTosala?: salaOrderByWithRelationInput
    usuario_participa_usuarioTousuario?: usuarioOrderByWithRelationInput
  }

  export type participaWhereUniqueInput = Prisma.AtLeast<{
    sala_usuario?: participaSalaUsuarioCompoundUniqueInput
    AND?: participaWhereInput | participaWhereInput[]
    OR?: participaWhereInput[]
    NOT?: participaWhereInput | participaWhereInput[]
    sala?: IntFilter<"participa"> | number
    usuario?: StringFilter<"participa"> | string
    estado?: StringFilter<"participa"> | string
    mensaje?: MensajeListRelationFilter
    sala_participa_salaTosala?: XOR<SalaRelationFilter, salaWhereInput>
    usuario_participa_usuarioTousuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "sala_usuario">

  export type participaOrderByWithAggregationInput = {
    sala?: SortOrder
    usuario?: SortOrder
    estado?: SortOrder
    _count?: participaCountOrderByAggregateInput
    _avg?: participaAvgOrderByAggregateInput
    _max?: participaMaxOrderByAggregateInput
    _min?: participaMinOrderByAggregateInput
    _sum?: participaSumOrderByAggregateInput
  }

  export type participaScalarWhereWithAggregatesInput = {
    AND?: participaScalarWhereWithAggregatesInput | participaScalarWhereWithAggregatesInput[]
    OR?: participaScalarWhereWithAggregatesInput[]
    NOT?: participaScalarWhereWithAggregatesInput | participaScalarWhereWithAggregatesInput[]
    sala?: IntWithAggregatesFilter<"participa"> | number
    usuario?: StringWithAggregatesFilter<"participa"> | string
    estado?: StringWithAggregatesFilter<"participa"> | string
  }

  export type salaWhereInput = {
    AND?: salaWhereInput | salaWhereInput[]
    OR?: salaWhereInput[]
    NOT?: salaWhereInput | salaWhereInput[]
    idsala?: IntFilter<"sala"> | number
    urlvideo?: StringFilter<"sala"> | string
    participa_participa_salaTosala?: ParticipaListRelationFilter
  }

  export type salaOrderByWithRelationInput = {
    idsala?: SortOrder
    urlvideo?: SortOrder
    participa_participa_salaTosala?: participaOrderByRelationAggregateInput
  }

  export type salaWhereUniqueInput = Prisma.AtLeast<{
    idsala?: number
    AND?: salaWhereInput | salaWhereInput[]
    OR?: salaWhereInput[]
    NOT?: salaWhereInput | salaWhereInput[]
    urlvideo?: StringFilter<"sala"> | string
    participa_participa_salaTosala?: ParticipaListRelationFilter
  }, "idsala">

  export type salaOrderByWithAggregationInput = {
    idsala?: SortOrder
    urlvideo?: SortOrder
    _count?: salaCountOrderByAggregateInput
    _avg?: salaAvgOrderByAggregateInput
    _max?: salaMaxOrderByAggregateInput
    _min?: salaMinOrderByAggregateInput
    _sum?: salaSumOrderByAggregateInput
  }

  export type salaScalarWhereWithAggregatesInput = {
    AND?: salaScalarWhereWithAggregatesInput | salaScalarWhereWithAggregatesInput[]
    OR?: salaScalarWhereWithAggregatesInput[]
    NOT?: salaScalarWhereWithAggregatesInput | salaScalarWhereWithAggregatesInput[]
    idsala?: IntWithAggregatesFilter<"sala"> | number
    urlvideo?: StringWithAggregatesFilter<"sala"> | string
  }

  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    correo?: StringFilter<"usuario"> | string
    nombre?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    edad?: IntFilter<"usuario"> | number
    sexo?: StringFilter<"usuario"> | string
    preferencias?: StringFilter<"usuario"> | string
    tipousuario?: StringFilter<"usuario"> | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: HacenmatchListRelationFilter
    hacenmatch_hacenmatch_idusuarioTousuario?: HacenmatchListRelationFilter
    participa_participa_usuarioTousuario?: ParticipaListRelationFilter
    videoyoutube?: VideoyoutubeListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    correo?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    contrasena?: SortOrder
    edad?: SortOrder
    sexo?: SortOrder
    preferencias?: SortOrder
    tipousuario?: SortOrder
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchOrderByRelationAggregateInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchOrderByRelationAggregateInput
    participa_participa_usuarioTousuario?: participaOrderByRelationAggregateInput
    videoyoutube?: videoyoutubeOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    correo?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    nombre?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    edad?: IntFilter<"usuario"> | number
    sexo?: StringFilter<"usuario"> | string
    preferencias?: StringFilter<"usuario"> | string
    tipousuario?: StringFilter<"usuario"> | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: HacenmatchListRelationFilter
    hacenmatch_hacenmatch_idusuarioTousuario?: HacenmatchListRelationFilter
    participa_participa_usuarioTousuario?: ParticipaListRelationFilter
    videoyoutube?: VideoyoutubeListRelationFilter
  }, "correo">

  export type usuarioOrderByWithAggregationInput = {
    correo?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    contrasena?: SortOrder
    edad?: SortOrder
    sexo?: SortOrder
    preferencias?: SortOrder
    tipousuario?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    correo?: StringWithAggregatesFilter<"usuario"> | string
    nombre?: StringWithAggregatesFilter<"usuario"> | string
    descripcion?: StringWithAggregatesFilter<"usuario"> | string
    contrasena?: StringWithAggregatesFilter<"usuario"> | string
    edad?: IntWithAggregatesFilter<"usuario"> | number
    sexo?: StringWithAggregatesFilter<"usuario"> | string
    preferencias?: StringWithAggregatesFilter<"usuario"> | string
    tipousuario?: StringWithAggregatesFilter<"usuario"> | string
  }

  export type videoyoutubeWhereInput = {
    AND?: videoyoutubeWhereInput | videoyoutubeWhereInput[]
    OR?: videoyoutubeWhereInput[]
    NOT?: videoyoutubeWhereInput | videoyoutubeWhereInput[]
    urlvideo?: StringFilter<"videoyoutube"> | string
    idusuario?: StringFilter<"videoyoutube"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type videoyoutubeOrderByWithRelationInput = {
    urlvideo?: SortOrder
    idusuario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type videoyoutubeWhereUniqueInput = Prisma.AtLeast<{
    urlvideo_idusuario?: videoyoutubeUrlvideoIdusuarioCompoundUniqueInput
    AND?: videoyoutubeWhereInput | videoyoutubeWhereInput[]
    OR?: videoyoutubeWhereInput[]
    NOT?: videoyoutubeWhereInput | videoyoutubeWhereInput[]
    urlvideo?: StringFilter<"videoyoutube"> | string
    idusuario?: StringFilter<"videoyoutube"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "urlvideo_idusuario">

  export type videoyoutubeOrderByWithAggregationInput = {
    urlvideo?: SortOrder
    idusuario?: SortOrder
    _count?: videoyoutubeCountOrderByAggregateInput
    _max?: videoyoutubeMaxOrderByAggregateInput
    _min?: videoyoutubeMinOrderByAggregateInput
  }

  export type videoyoutubeScalarWhereWithAggregatesInput = {
    AND?: videoyoutubeScalarWhereWithAggregatesInput | videoyoutubeScalarWhereWithAggregatesInput[]
    OR?: videoyoutubeScalarWhereWithAggregatesInput[]
    NOT?: videoyoutubeScalarWhereWithAggregatesInput | videoyoutubeScalarWhereWithAggregatesInput[]
    urlvideo?: StringWithAggregatesFilter<"videoyoutube"> | string
    idusuario?: StringWithAggregatesFilter<"videoyoutube"> | string
  }

  export type hacenmatchCreateInput = {
    usuario_hacenmatch_idusuario2Tousuario: usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput
    usuario_hacenmatch_idusuarioTousuario: usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput
  }

  export type hacenmatchUncheckedCreateInput = {
    idusuario: string
    idusuario2: string
  }

  export type hacenmatchUpdateInput = {
    usuario_hacenmatch_idusuario2Tousuario?: usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuario2TousuarioNestedInput
    usuario_hacenmatch_idusuarioTousuario?: usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuarioTousuarioNestedInput
  }

  export type hacenmatchUncheckedUpdateInput = {
    idusuario?: StringFieldUpdateOperationsInput | string
    idusuario2?: StringFieldUpdateOperationsInput | string
  }

  export type hacenmatchCreateManyInput = {
    idusuario: string
    idusuario2: string
  }

  export type hacenmatchUpdateManyMutationInput = {

  }

  export type hacenmatchUncheckedUpdateManyInput = {
    idusuario?: StringFieldUpdateOperationsInput | string
    idusuario2?: StringFieldUpdateOperationsInput | string
  }

  export type mensajeCreateInput = {
    texto: string
    fechahora?: Date | string | null
    multimedia: multimediaCreateNestedOneWithoutMensajeInput
    participa: participaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateInput = {
    id?: number
    sala: number
    usuario: string
    texto: string
    fechahora?: Date | string | null
    idmultimedia: number
  }

  export type mensajeUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    multimedia?: multimediaUpdateOneRequiredWithoutMensajeNestedInput
    participa?: participaUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idmultimedia?: IntFieldUpdateOperationsInput | number
  }

  export type mensajeCreateManyInput = {
    id?: number
    sala: number
    usuario: string
    texto: string
    fechahora?: Date | string | null
    idmultimedia: number
  }

  export type mensajeUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mensajeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idmultimedia?: IntFieldUpdateOperationsInput | number
  }

  export type multimediaCreateInput = {
    fecha: Date | string
    nombre: string
    ruta: string
    tipomultimedia: string
    mensaje?: mensajeCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    nombre: string
    ruta: string
    tipomultimedia: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutMultimediaInput
  }

  export type multimediaUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutMultimediaNestedInput
  }

  export type multimediaCreateManyInput = {
    id?: number
    fecha: Date | string
    nombre: string
    ruta: string
    tipomultimedia: string
  }

  export type multimediaUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type multimediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type participaCreateInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    sala_participa_salaTosala: salaCreateNestedOneWithoutParticipa_participa_salaTosalaInput
    usuario_participa_usuarioTousuario: usuarioCreateNestedOneWithoutParticipa_participa_usuarioTousuarioInput
  }

  export type participaUncheckedCreateInput = {
    sala: number
    usuario: string
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaUpdateInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    sala_participa_salaTosala?: salaUpdateOneRequiredWithoutParticipa_participa_salaTosalaNestedInput
    usuario_participa_usuarioTousuario?: usuarioUpdateOneRequiredWithoutParticipa_participa_usuarioTousuarioNestedInput
  }

  export type participaUncheckedUpdateInput = {
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaCreateManyInput = {
    sala: number
    usuario: string
    estado: string
  }

  export type participaUpdateManyMutationInput = {
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type participaUncheckedUpdateManyInput = {
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type salaCreateInput = {
    urlvideo: string
    participa_participa_salaTosala?: participaCreateNestedManyWithoutSala_participa_salaTosalaInput
  }

  export type salaUncheckedCreateInput = {
    idsala?: number
    urlvideo: string
    participa_participa_salaTosala?: participaUncheckedCreateNestedManyWithoutSala_participa_salaTosalaInput
  }

  export type salaUpdateInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
    participa_participa_salaTosala?: participaUpdateManyWithoutSala_participa_salaTosalaNestedInput
  }

  export type salaUncheckedUpdateInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    urlvideo?: StringFieldUpdateOperationsInput | string
    participa_participa_salaTosala?: participaUncheckedUpdateManyWithoutSala_participa_salaTosalaNestedInput
  }

  export type salaCreateManyInput = {
    idsala?: number
    urlvideo: string
  }

  export type salaUpdateManyMutationInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type salaUncheckedUpdateManyInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioCreateInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaUncheckedCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
  }

  export type usuarioUpdateManyMutationInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateManyInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeCreateInput = {
    urlvideo: string
    usuario: usuarioCreateNestedOneWithoutVideoyoutubeInput
  }

  export type videoyoutubeUncheckedCreateInput = {
    urlvideo: string
    idusuario: string
  }

  export type videoyoutubeUpdateInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutVideoyoutubeNestedInput
  }

  export type videoyoutubeUncheckedUpdateInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
    idusuario?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeCreateManyInput = {
    urlvideo: string
    idusuario: string
  }

  export type videoyoutubeUpdateManyMutationInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeUncheckedUpdateManyInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
    idusuario?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type hacenmatchIdusuarioIdusuario2CompoundUniqueInput = {
    idusuario: string
    idusuario2: string
  }

  export type hacenmatchCountOrderByAggregateInput = {
    idusuario?: SortOrder
    idusuario2?: SortOrder
  }

  export type hacenmatchMaxOrderByAggregateInput = {
    idusuario?: SortOrder
    idusuario2?: SortOrder
  }

  export type hacenmatchMinOrderByAggregateInput = {
    idusuario?: SortOrder
    idusuario2?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MultimediaRelationFilter = {
    is?: multimediaWhereInput
    isNot?: multimediaWhereInput
  }

  export type ParticipaRelationFilter = {
    is?: participaWhereInput
    isNot?: participaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type mensajeCountOrderByAggregateInput = {
    id?: SortOrder
    sala?: SortOrder
    usuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    idmultimedia?: SortOrder
  }

  export type mensajeAvgOrderByAggregateInput = {
    id?: SortOrder
    sala?: SortOrder
    idmultimedia?: SortOrder
  }

  export type mensajeMaxOrderByAggregateInput = {
    id?: SortOrder
    sala?: SortOrder
    usuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    idmultimedia?: SortOrder
  }

  export type mensajeMinOrderByAggregateInput = {
    id?: SortOrder
    sala?: SortOrder
    usuario?: SortOrder
    texto?: SortOrder
    fechahora?: SortOrder
    idmultimedia?: SortOrder
  }

  export type mensajeSumOrderByAggregateInput = {
    id?: SortOrder
    sala?: SortOrder
    idmultimedia?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MensajeListRelationFilter = {
    every?: mensajeWhereInput
    some?: mensajeWhereInput
    none?: mensajeWhereInput
  }

  export type mensajeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type multimediaCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type multimediaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type multimediaMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type multimediaMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    ruta?: SortOrder
    tipomultimedia?: SortOrder
  }

  export type multimediaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SalaRelationFilter = {
    is?: salaWhereInput
    isNot?: salaWhereInput
  }

  export type participaSalaUsuarioCompoundUniqueInput = {
    sala: number
    usuario: string
  }

  export type participaCountOrderByAggregateInput = {
    sala?: SortOrder
    usuario?: SortOrder
    estado?: SortOrder
  }

  export type participaAvgOrderByAggregateInput = {
    sala?: SortOrder
  }

  export type participaMaxOrderByAggregateInput = {
    sala?: SortOrder
    usuario?: SortOrder
    estado?: SortOrder
  }

  export type participaMinOrderByAggregateInput = {
    sala?: SortOrder
    usuario?: SortOrder
    estado?: SortOrder
  }

  export type participaSumOrderByAggregateInput = {
    sala?: SortOrder
  }

  export type ParticipaListRelationFilter = {
    every?: participaWhereInput
    some?: participaWhereInput
    none?: participaWhereInput
  }

  export type participaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type salaCountOrderByAggregateInput = {
    idsala?: SortOrder
    urlvideo?: SortOrder
  }

  export type salaAvgOrderByAggregateInput = {
    idsala?: SortOrder
  }

  export type salaMaxOrderByAggregateInput = {
    idsala?: SortOrder
    urlvideo?: SortOrder
  }

  export type salaMinOrderByAggregateInput = {
    idsala?: SortOrder
    urlvideo?: SortOrder
  }

  export type salaSumOrderByAggregateInput = {
    idsala?: SortOrder
  }

  export type HacenmatchListRelationFilter = {
    every?: hacenmatchWhereInput
    some?: hacenmatchWhereInput
    none?: hacenmatchWhereInput
  }

  export type VideoyoutubeListRelationFilter = {
    every?: videoyoutubeWhereInput
    some?: videoyoutubeWhereInput
    none?: videoyoutubeWhereInput
  }

  export type hacenmatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type videoyoutubeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    correo?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    contrasena?: SortOrder
    edad?: SortOrder
    sexo?: SortOrder
    preferencias?: SortOrder
    tipousuario?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    edad?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    correo?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    contrasena?: SortOrder
    edad?: SortOrder
    sexo?: SortOrder
    preferencias?: SortOrder
    tipousuario?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    correo?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    contrasena?: SortOrder
    edad?: SortOrder
    sexo?: SortOrder
    preferencias?: SortOrder
    tipousuario?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    edad?: SortOrder
  }

  export type videoyoutubeUrlvideoIdusuarioCompoundUniqueInput = {
    urlvideo: string
    idusuario: string
  }

  export type videoyoutubeCountOrderByAggregateInput = {
    urlvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type videoyoutubeMaxOrderByAggregateInput = {
    urlvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type videoyoutubeMinOrderByAggregateInput = {
    urlvideo?: SortOrder
    idusuario?: SortOrder
  }

  export type usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    create?: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    create?: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuario2TousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput
    upsert?: usuarioUpsertWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
  }

  export type usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuarioTousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput
    upsert?: usuarioUpsertWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type multimediaCreateNestedOneWithoutMensajeInput = {
    create?: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutMensajeInput
    connect?: multimediaWhereUniqueInput
  }

  export type participaCreateNestedOneWithoutMensajeInput = {
    create?: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: participaCreateOrConnectWithoutMensajeInput
    connect?: participaWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type multimediaUpdateOneRequiredWithoutMensajeNestedInput = {
    create?: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: multimediaCreateOrConnectWithoutMensajeInput
    upsert?: multimediaUpsertWithoutMensajeInput
    connect?: multimediaWhereUniqueInput
    update?: XOR<XOR<multimediaUpdateToOneWithWhereWithoutMensajeInput, multimediaUpdateWithoutMensajeInput>, multimediaUncheckedUpdateWithoutMensajeInput>
  }

  export type participaUpdateOneRequiredWithoutMensajeNestedInput = {
    create?: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: participaCreateOrConnectWithoutMensajeInput
    upsert?: participaUpsertWithoutMensajeInput
    connect?: participaWhereUniqueInput
    update?: XOR<XOR<participaUpdateToOneWithWhereWithoutMensajeInput, participaUpdateWithoutMensajeInput>, participaUncheckedUpdateWithoutMensajeInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type mensajeCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type mensajeUncheckedCreateNestedManyWithoutMultimediaInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type mensajeUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutMultimediaInput | mensajeUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutMultimediaInput | mensajeUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutMultimediaInput | mensajeUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type mensajeUncheckedUpdateManyWithoutMultimediaNestedInput = {
    create?: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput> | mensajeCreateWithoutMultimediaInput[] | mensajeUncheckedCreateWithoutMultimediaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutMultimediaInput | mensajeCreateOrConnectWithoutMultimediaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutMultimediaInput | mensajeUpsertWithWhereUniqueWithoutMultimediaInput[]
    createMany?: mensajeCreateManyMultimediaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutMultimediaInput | mensajeUpdateWithWhereUniqueWithoutMultimediaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutMultimediaInput | mensajeUpdateManyWithWhereWithoutMultimediaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type mensajeCreateNestedManyWithoutParticipaInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type salaCreateNestedOneWithoutParticipa_participa_salaTosalaInput = {
    create?: XOR<salaCreateWithoutParticipa_participa_salaTosalaInput, salaUncheckedCreateWithoutParticipa_participa_salaTosalaInput>
    connectOrCreate?: salaCreateOrConnectWithoutParticipa_participa_salaTosalaInput
    connect?: salaWhereUniqueInput
  }

  export type usuarioCreateNestedOneWithoutParticipa_participa_usuarioTousuarioInput = {
    create?: XOR<usuarioCreateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedCreateWithoutParticipa_participa_usuarioTousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipa_participa_usuarioTousuarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type mensajeUncheckedCreateNestedManyWithoutParticipaInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
  }

  export type mensajeUpdateManyWithoutParticipaNestedInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutParticipaInput | mensajeUpsertWithWhereUniqueWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutParticipaInput | mensajeUpdateWithWhereUniqueWithoutParticipaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutParticipaInput | mensajeUpdateManyWithWhereWithoutParticipaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type salaUpdateOneRequiredWithoutParticipa_participa_salaTosalaNestedInput = {
    create?: XOR<salaCreateWithoutParticipa_participa_salaTosalaInput, salaUncheckedCreateWithoutParticipa_participa_salaTosalaInput>
    connectOrCreate?: salaCreateOrConnectWithoutParticipa_participa_salaTosalaInput
    upsert?: salaUpsertWithoutParticipa_participa_salaTosalaInput
    connect?: salaWhereUniqueInput
    update?: XOR<XOR<salaUpdateToOneWithWhereWithoutParticipa_participa_salaTosalaInput, salaUpdateWithoutParticipa_participa_salaTosalaInput>, salaUncheckedUpdateWithoutParticipa_participa_salaTosalaInput>
  }

  export type usuarioUpdateOneRequiredWithoutParticipa_participa_usuarioTousuarioNestedInput = {
    create?: XOR<usuarioCreateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedCreateWithoutParticipa_participa_usuarioTousuarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipa_participa_usuarioTousuarioInput
    upsert?: usuarioUpsertWithoutParticipa_participa_usuarioTousuarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutParticipa_participa_usuarioTousuarioInput, usuarioUpdateWithoutParticipa_participa_usuarioTousuarioInput>, usuarioUncheckedUpdateWithoutParticipa_participa_usuarioTousuarioInput>
  }

  export type mensajeUncheckedUpdateManyWithoutParticipaNestedInput = {
    create?: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput> | mensajeCreateWithoutParticipaInput[] | mensajeUncheckedCreateWithoutParticipaInput[]
    connectOrCreate?: mensajeCreateOrConnectWithoutParticipaInput | mensajeCreateOrConnectWithoutParticipaInput[]
    upsert?: mensajeUpsertWithWhereUniqueWithoutParticipaInput | mensajeUpsertWithWhereUniqueWithoutParticipaInput[]
    createMany?: mensajeCreateManyParticipaInputEnvelope
    set?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    disconnect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    delete?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    connect?: mensajeWhereUniqueInput | mensajeWhereUniqueInput[]
    update?: mensajeUpdateWithWhereUniqueWithoutParticipaInput | mensajeUpdateWithWhereUniqueWithoutParticipaInput[]
    updateMany?: mensajeUpdateManyWithWhereWithoutParticipaInput | mensajeUpdateManyWithWhereWithoutParticipaInput[]
    deleteMany?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
  }

  export type participaCreateNestedManyWithoutSala_participa_salaTosalaInput = {
    create?: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput> | participaCreateWithoutSala_participa_salaTosalaInput[] | participaUncheckedCreateWithoutSala_participa_salaTosalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSala_participa_salaTosalaInput | participaCreateOrConnectWithoutSala_participa_salaTosalaInput[]
    createMany?: participaCreateManySala_participa_salaTosalaInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type participaUncheckedCreateNestedManyWithoutSala_participa_salaTosalaInput = {
    create?: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput> | participaCreateWithoutSala_participa_salaTosalaInput[] | participaUncheckedCreateWithoutSala_participa_salaTosalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSala_participa_salaTosalaInput | participaCreateOrConnectWithoutSala_participa_salaTosalaInput[]
    createMany?: participaCreateManySala_participa_salaTosalaInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type participaUpdateManyWithoutSala_participa_salaTosalaNestedInput = {
    create?: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput> | participaCreateWithoutSala_participa_salaTosalaInput[] | participaUncheckedCreateWithoutSala_participa_salaTosalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSala_participa_salaTosalaInput | participaCreateOrConnectWithoutSala_participa_salaTosalaInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutSala_participa_salaTosalaInput | participaUpsertWithWhereUniqueWithoutSala_participa_salaTosalaInput[]
    createMany?: participaCreateManySala_participa_salaTosalaInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutSala_participa_salaTosalaInput | participaUpdateWithWhereUniqueWithoutSala_participa_salaTosalaInput[]
    updateMany?: participaUpdateManyWithWhereWithoutSala_participa_salaTosalaInput | participaUpdateManyWithWhereWithoutSala_participa_salaTosalaInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type participaUncheckedUpdateManyWithoutSala_participa_salaTosalaNestedInput = {
    create?: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput> | participaCreateWithoutSala_participa_salaTosalaInput[] | participaUncheckedCreateWithoutSala_participa_salaTosalaInput[]
    connectOrCreate?: participaCreateOrConnectWithoutSala_participa_salaTosalaInput | participaCreateOrConnectWithoutSala_participa_salaTosalaInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutSala_participa_salaTosalaInput | participaUpsertWithWhereUniqueWithoutSala_participa_salaTosalaInput[]
    createMany?: participaCreateManySala_participa_salaTosalaInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutSala_participa_salaTosalaInput | participaUpdateWithWhereUniqueWithoutSala_participa_salaTosalaInput[]
    updateMany?: participaUpdateManyWithWhereWithoutSala_participa_salaTosalaInput | participaUpdateManyWithWhereWithoutSala_participa_salaTosalaInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInputEnvelope
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
  }

  export type hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInputEnvelope
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
  }

  export type participaCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput = {
    create?: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput> | participaCreateWithoutUsuario_participa_usuarioTousuarioInput[] | participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput | participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput[]
    createMany?: participaCreateManyUsuario_participa_usuarioTousuarioInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type videoyoutubeCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput> | videoyoutubeCreateWithoutUsuarioInput[] | videoyoutubeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoyoutubeCreateOrConnectWithoutUsuarioInput | videoyoutubeCreateOrConnectWithoutUsuarioInput[]
    createMany?: videoyoutubeCreateManyUsuarioInputEnvelope
    connect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
  }

  export type hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInputEnvelope
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
  }

  export type hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInputEnvelope
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
  }

  export type participaUncheckedCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput = {
    create?: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput> | participaCreateWithoutUsuario_participa_usuarioTousuarioInput[] | participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput | participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput[]
    createMany?: participaCreateManyUsuario_participa_usuarioTousuarioInputEnvelope
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
  }

  export type videoyoutubeUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput> | videoyoutubeCreateWithoutUsuarioInput[] | videoyoutubeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoyoutubeCreateOrConnectWithoutUsuarioInput | videoyoutubeCreateOrConnectWithoutUsuarioInput[]
    createMany?: videoyoutubeCreateManyUsuarioInputEnvelope
    connect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
  }

  export type hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    upsert?: hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInputEnvelope
    set?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    disconnect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    delete?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    update?: hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    updateMany?: hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    deleteMany?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
  }

  export type hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    upsert?: hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInputEnvelope
    set?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    disconnect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    delete?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    update?: hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    updateMany?: hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    deleteMany?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
  }

  export type participaUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput = {
    create?: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput> | participaCreateWithoutUsuario_participa_usuarioTousuarioInput[] | participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput | participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput | participaUpsertWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput[]
    createMany?: participaCreateManyUsuario_participa_usuarioTousuarioInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput | participaUpdateWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput[]
    updateMany?: participaUpdateManyWithWhereWithoutUsuario_participa_usuarioTousuarioInput | participaUpdateManyWithWhereWithoutUsuario_participa_usuarioTousuarioInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type videoyoutubeUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput> | videoyoutubeCreateWithoutUsuarioInput[] | videoyoutubeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoyoutubeCreateOrConnectWithoutUsuarioInput | videoyoutubeCreateOrConnectWithoutUsuarioInput[]
    upsert?: videoyoutubeUpsertWithWhereUniqueWithoutUsuarioInput | videoyoutubeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: videoyoutubeCreateManyUsuarioInputEnvelope
    set?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    disconnect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    delete?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    connect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    update?: videoyoutubeUpdateWithWhereUniqueWithoutUsuarioInput | videoyoutubeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: videoyoutubeUpdateManyWithWhereWithoutUsuarioInput | videoyoutubeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: videoyoutubeScalarWhereInput | videoyoutubeScalarWhereInput[]
  }

  export type hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    upsert?: hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInputEnvelope
    set?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    disconnect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    delete?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    update?: hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    updateMany?: hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuario2TousuarioInput[]
    deleteMany?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
  }

  export type hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput = {
    create?: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput> | hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[] | hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    connectOrCreate?: hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    upsert?: hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    createMany?: hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInputEnvelope
    set?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    disconnect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    delete?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    connect?: hacenmatchWhereUniqueInput | hacenmatchWhereUniqueInput[]
    update?: hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    updateMany?: hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuarioTousuarioInput[]
    deleteMany?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
  }

  export type participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput = {
    create?: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput> | participaCreateWithoutUsuario_participa_usuarioTousuarioInput[] | participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput[]
    connectOrCreate?: participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput | participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput[]
    upsert?: participaUpsertWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput | participaUpsertWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput[]
    createMany?: participaCreateManyUsuario_participa_usuarioTousuarioInputEnvelope
    set?: participaWhereUniqueInput | participaWhereUniqueInput[]
    disconnect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    delete?: participaWhereUniqueInput | participaWhereUniqueInput[]
    connect?: participaWhereUniqueInput | participaWhereUniqueInput[]
    update?: participaUpdateWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput | participaUpdateWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput[]
    updateMany?: participaUpdateManyWithWhereWithoutUsuario_participa_usuarioTousuarioInput | participaUpdateManyWithWhereWithoutUsuario_participa_usuarioTousuarioInput[]
    deleteMany?: participaScalarWhereInput | participaScalarWhereInput[]
  }

  export type videoyoutubeUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput> | videoyoutubeCreateWithoutUsuarioInput[] | videoyoutubeUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: videoyoutubeCreateOrConnectWithoutUsuarioInput | videoyoutubeCreateOrConnectWithoutUsuarioInput[]
    upsert?: videoyoutubeUpsertWithWhereUniqueWithoutUsuarioInput | videoyoutubeUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: videoyoutubeCreateManyUsuarioInputEnvelope
    set?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    disconnect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    delete?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    connect?: videoyoutubeWhereUniqueInput | videoyoutubeWhereUniqueInput[]
    update?: videoyoutubeUpdateWithWhereUniqueWithoutUsuarioInput | videoyoutubeUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: videoyoutubeUpdateManyWithWhereWithoutUsuarioInput | videoyoutubeUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: videoyoutubeScalarWhereInput | videoyoutubeScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutVideoyoutubeInput = {
    create?: XOR<usuarioCreateWithoutVideoyoutubeInput, usuarioUncheckedCreateWithoutVideoyoutubeInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVideoyoutubeInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutVideoyoutubeNestedInput = {
    create?: XOR<usuarioCreateWithoutVideoyoutubeInput, usuarioUncheckedCreateWithoutVideoyoutubeInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVideoyoutubeInput
    upsert?: usuarioUpsertWithoutVideoyoutubeInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutVideoyoutubeInput, usuarioUpdateWithoutVideoyoutubeInput>, usuarioUncheckedUpdateWithoutVideoyoutubeInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type usuarioCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaUncheckedCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
  }

  export type usuarioCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    participa_participa_usuarioTousuario?: participaCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    participa_participa_usuarioTousuario?: participaUncheckedCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
    videoyoutube?: videoyoutubeUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
  }

  export type usuarioUpsertWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    update: XOR<usuarioUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
    create: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput>
  }

  export type usuarioUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUpsertWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    update: XOR<usuarioUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
    create: XOR<usuarioCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedCreateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput, usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput>
  }

  export type usuarioUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type multimediaCreateWithoutMensajeInput = {
    fecha: Date | string
    nombre: string
    ruta: string
    tipomultimedia: string
  }

  export type multimediaUncheckedCreateWithoutMensajeInput = {
    id?: number
    fecha: Date | string
    nombre: string
    ruta: string
    tipomultimedia: string
  }

  export type multimediaCreateOrConnectWithoutMensajeInput = {
    where: multimediaWhereUniqueInput
    create: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
  }

  export type participaCreateWithoutMensajeInput = {
    estado: string
    sala_participa_salaTosala: salaCreateNestedOneWithoutParticipa_participa_salaTosalaInput
    usuario_participa_usuarioTousuario: usuarioCreateNestedOneWithoutParticipa_participa_usuarioTousuarioInput
  }

  export type participaUncheckedCreateWithoutMensajeInput = {
    sala: number
    usuario: string
    estado: string
  }

  export type participaCreateOrConnectWithoutMensajeInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
  }

  export type multimediaUpsertWithoutMensajeInput = {
    update: XOR<multimediaUpdateWithoutMensajeInput, multimediaUncheckedUpdateWithoutMensajeInput>
    create: XOR<multimediaCreateWithoutMensajeInput, multimediaUncheckedCreateWithoutMensajeInput>
    where?: multimediaWhereInput
  }

  export type multimediaUpdateToOneWithWhereWithoutMensajeInput = {
    where?: multimediaWhereInput
    data: XOR<multimediaUpdateWithoutMensajeInput, multimediaUncheckedUpdateWithoutMensajeInput>
  }

  export type multimediaUpdateWithoutMensajeInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type multimediaUncheckedUpdateWithoutMensajeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    nombre?: StringFieldUpdateOperationsInput | string
    ruta?: StringFieldUpdateOperationsInput | string
    tipomultimedia?: StringFieldUpdateOperationsInput | string
  }

  export type participaUpsertWithoutMensajeInput = {
    update: XOR<participaUpdateWithoutMensajeInput, participaUncheckedUpdateWithoutMensajeInput>
    create: XOR<participaCreateWithoutMensajeInput, participaUncheckedCreateWithoutMensajeInput>
    where?: participaWhereInput
  }

  export type participaUpdateToOneWithWhereWithoutMensajeInput = {
    where?: participaWhereInput
    data: XOR<participaUpdateWithoutMensajeInput, participaUncheckedUpdateWithoutMensajeInput>
  }

  export type participaUpdateWithoutMensajeInput = {
    estado?: StringFieldUpdateOperationsInput | string
    sala_participa_salaTosala?: salaUpdateOneRequiredWithoutParticipa_participa_salaTosalaNestedInput
    usuario_participa_usuarioTousuario?: usuarioUpdateOneRequiredWithoutParticipa_participa_usuarioTousuarioNestedInput
  }

  export type participaUncheckedUpdateWithoutMensajeInput = {
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type mensajeCreateWithoutMultimediaInput = {
    texto: string
    fechahora?: Date | string | null
    participa: participaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateWithoutMultimediaInput = {
    id?: number
    sala: number
    usuario: string
    texto: string
    fechahora?: Date | string | null
  }

  export type mensajeCreateOrConnectWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    create: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput>
  }

  export type mensajeCreateManyMultimediaInputEnvelope = {
    data: mensajeCreateManyMultimediaInput | mensajeCreateManyMultimediaInput[]
    skipDuplicates?: boolean
  }

  export type mensajeUpsertWithWhereUniqueWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    update: XOR<mensajeUpdateWithoutMultimediaInput, mensajeUncheckedUpdateWithoutMultimediaInput>
    create: XOR<mensajeCreateWithoutMultimediaInput, mensajeUncheckedCreateWithoutMultimediaInput>
  }

  export type mensajeUpdateWithWhereUniqueWithoutMultimediaInput = {
    where: mensajeWhereUniqueInput
    data: XOR<mensajeUpdateWithoutMultimediaInput, mensajeUncheckedUpdateWithoutMultimediaInput>
  }

  export type mensajeUpdateManyWithWhereWithoutMultimediaInput = {
    where: mensajeScalarWhereInput
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyWithoutMultimediaInput>
  }

  export type mensajeScalarWhereInput = {
    AND?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
    OR?: mensajeScalarWhereInput[]
    NOT?: mensajeScalarWhereInput | mensajeScalarWhereInput[]
    id?: IntFilter<"mensaje"> | number
    sala?: IntFilter<"mensaje"> | number
    usuario?: StringFilter<"mensaje"> | string
    texto?: StringFilter<"mensaje"> | string
    fechahora?: DateTimeNullableFilter<"mensaje"> | Date | string | null
    idmultimedia?: IntFilter<"mensaje"> | number
  }

  export type mensajeCreateWithoutParticipaInput = {
    texto: string
    fechahora?: Date | string | null
    multimedia: multimediaCreateNestedOneWithoutMensajeInput
  }

  export type mensajeUncheckedCreateWithoutParticipaInput = {
    id?: number
    texto: string
    fechahora?: Date | string | null
    idmultimedia: number
  }

  export type mensajeCreateOrConnectWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    create: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput>
  }

  export type mensajeCreateManyParticipaInputEnvelope = {
    data: mensajeCreateManyParticipaInput | mensajeCreateManyParticipaInput[]
    skipDuplicates?: boolean
  }

  export type salaCreateWithoutParticipa_participa_salaTosalaInput = {
    urlvideo: string
  }

  export type salaUncheckedCreateWithoutParticipa_participa_salaTosalaInput = {
    idsala?: number
    urlvideo: string
  }

  export type salaCreateOrConnectWithoutParticipa_participa_salaTosalaInput = {
    where: salaWhereUniqueInput
    create: XOR<salaCreateWithoutParticipa_participa_salaTosalaInput, salaUncheckedCreateWithoutParticipa_participa_salaTosalaInput>
  }

  export type usuarioCreateWithoutParticipa_participa_usuarioTousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    videoyoutube?: videoyoutubeCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutParticipa_participa_usuarioTousuarioInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    videoyoutube?: videoyoutubeUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutParticipa_participa_usuarioTousuarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedCreateWithoutParticipa_participa_usuarioTousuarioInput>
  }

  export type mensajeUpsertWithWhereUniqueWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    update: XOR<mensajeUpdateWithoutParticipaInput, mensajeUncheckedUpdateWithoutParticipaInput>
    create: XOR<mensajeCreateWithoutParticipaInput, mensajeUncheckedCreateWithoutParticipaInput>
  }

  export type mensajeUpdateWithWhereUniqueWithoutParticipaInput = {
    where: mensajeWhereUniqueInput
    data: XOR<mensajeUpdateWithoutParticipaInput, mensajeUncheckedUpdateWithoutParticipaInput>
  }

  export type mensajeUpdateManyWithWhereWithoutParticipaInput = {
    where: mensajeScalarWhereInput
    data: XOR<mensajeUpdateManyMutationInput, mensajeUncheckedUpdateManyWithoutParticipaInput>
  }

  export type salaUpsertWithoutParticipa_participa_salaTosalaInput = {
    update: XOR<salaUpdateWithoutParticipa_participa_salaTosalaInput, salaUncheckedUpdateWithoutParticipa_participa_salaTosalaInput>
    create: XOR<salaCreateWithoutParticipa_participa_salaTosalaInput, salaUncheckedCreateWithoutParticipa_participa_salaTosalaInput>
    where?: salaWhereInput
  }

  export type salaUpdateToOneWithWhereWithoutParticipa_participa_salaTosalaInput = {
    where?: salaWhereInput
    data: XOR<salaUpdateWithoutParticipa_participa_salaTosalaInput, salaUncheckedUpdateWithoutParticipa_participa_salaTosalaInput>
  }

  export type salaUpdateWithoutParticipa_participa_salaTosalaInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type salaUncheckedUpdateWithoutParticipa_participa_salaTosalaInput = {
    idsala?: IntFieldUpdateOperationsInput | number
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUpsertWithoutParticipa_participa_usuarioTousuarioInput = {
    update: XOR<usuarioUpdateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedUpdateWithoutParticipa_participa_usuarioTousuarioInput>
    create: XOR<usuarioCreateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedCreateWithoutParticipa_participa_usuarioTousuarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutParticipa_participa_usuarioTousuarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutParticipa_participa_usuarioTousuarioInput, usuarioUncheckedUpdateWithoutParticipa_participa_usuarioTousuarioInput>
  }

  export type usuarioUpdateWithoutParticipa_participa_usuarioTousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutParticipa_participa_usuarioTousuarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    videoyoutube?: videoyoutubeUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type participaCreateWithoutSala_participa_salaTosalaInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    usuario_participa_usuarioTousuario: usuarioCreateNestedOneWithoutParticipa_participa_usuarioTousuarioInput
  }

  export type participaUncheckedCreateWithoutSala_participa_salaTosalaInput = {
    usuario: string
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaCreateOrConnectWithoutSala_participa_salaTosalaInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput>
  }

  export type participaCreateManySala_participa_salaTosalaInputEnvelope = {
    data: participaCreateManySala_participa_salaTosalaInput | participaCreateManySala_participa_salaTosalaInput[]
    skipDuplicates?: boolean
  }

  export type participaUpsertWithWhereUniqueWithoutSala_participa_salaTosalaInput = {
    where: participaWhereUniqueInput
    update: XOR<participaUpdateWithoutSala_participa_salaTosalaInput, participaUncheckedUpdateWithoutSala_participa_salaTosalaInput>
    create: XOR<participaCreateWithoutSala_participa_salaTosalaInput, participaUncheckedCreateWithoutSala_participa_salaTosalaInput>
  }

  export type participaUpdateWithWhereUniqueWithoutSala_participa_salaTosalaInput = {
    where: participaWhereUniqueInput
    data: XOR<participaUpdateWithoutSala_participa_salaTosalaInput, participaUncheckedUpdateWithoutSala_participa_salaTosalaInput>
  }

  export type participaUpdateManyWithWhereWithoutSala_participa_salaTosalaInput = {
    where: participaScalarWhereInput
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyWithoutSala_participa_salaTosalaInput>
  }

  export type participaScalarWhereInput = {
    AND?: participaScalarWhereInput | participaScalarWhereInput[]
    OR?: participaScalarWhereInput[]
    NOT?: participaScalarWhereInput | participaScalarWhereInput[]
    sala?: IntFilter<"participa"> | number
    usuario?: StringFilter<"participa"> | string
    estado?: StringFilter<"participa"> | string
  }

  export type hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    usuario_hacenmatch_idusuarioTousuario: usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuarioTousuarioInput
  }

  export type hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    idusuario: string
  }

  export type hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    where: hacenmatchWhereUniqueInput
    create: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput>
  }

  export type hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInputEnvelope = {
    data: hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInput | hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInput[]
    skipDuplicates?: boolean
  }

  export type hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    usuario_hacenmatch_idusuario2Tousuario: usuarioCreateNestedOneWithoutHacenmatch_hacenmatch_idusuario2TousuarioInput
  }

  export type hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    idusuario2: string
  }

  export type hacenmatchCreateOrConnectWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    where: hacenmatchWhereUniqueInput
    create: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput>
  }

  export type hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInputEnvelope = {
    data: hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInput | hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInput[]
    skipDuplicates?: boolean
  }

  export type participaCreateWithoutUsuario_participa_usuarioTousuarioInput = {
    estado: string
    mensaje?: mensajeCreateNestedManyWithoutParticipaInput
    sala_participa_salaTosala: salaCreateNestedOneWithoutParticipa_participa_salaTosalaInput
  }

  export type participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput = {
    sala: number
    estado: string
    mensaje?: mensajeUncheckedCreateNestedManyWithoutParticipaInput
  }

  export type participaCreateOrConnectWithoutUsuario_participa_usuarioTousuarioInput = {
    where: participaWhereUniqueInput
    create: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput>
  }

  export type participaCreateManyUsuario_participa_usuarioTousuarioInputEnvelope = {
    data: participaCreateManyUsuario_participa_usuarioTousuarioInput | participaCreateManyUsuario_participa_usuarioTousuarioInput[]
    skipDuplicates?: boolean
  }

  export type videoyoutubeCreateWithoutUsuarioInput = {
    urlvideo: string
  }

  export type videoyoutubeUncheckedCreateWithoutUsuarioInput = {
    urlvideo: string
  }

  export type videoyoutubeCreateOrConnectWithoutUsuarioInput = {
    where: videoyoutubeWhereUniqueInput
    create: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput>
  }

  export type videoyoutubeCreateManyUsuarioInputEnvelope = {
    data: videoyoutubeCreateManyUsuarioInput | videoyoutubeCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    where: hacenmatchWhereUniqueInput
    update: XOR<hacenmatchUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput>
    create: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuario2TousuarioInput>
  }

  export type hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    where: hacenmatchWhereUniqueInput
    data: XOR<hacenmatchUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput, hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput>
  }

  export type hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    where: hacenmatchScalarWhereInput
    data: XOR<hacenmatchUpdateManyMutationInput, hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput>
  }

  export type hacenmatchScalarWhereInput = {
    AND?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
    OR?: hacenmatchScalarWhereInput[]
    NOT?: hacenmatchScalarWhereInput | hacenmatchScalarWhereInput[]
    idusuario?: StringFilter<"hacenmatch"> | string
    idusuario2?: StringFilter<"hacenmatch"> | string
  }

  export type hacenmatchUpsertWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    where: hacenmatchWhereUniqueInput
    update: XOR<hacenmatchUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput>
    create: XOR<hacenmatchCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedCreateWithoutUsuario_hacenmatch_idusuarioTousuarioInput>
  }

  export type hacenmatchUpdateWithWhereUniqueWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    where: hacenmatchWhereUniqueInput
    data: XOR<hacenmatchUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput, hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput>
  }

  export type hacenmatchUpdateManyWithWhereWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    where: hacenmatchScalarWhereInput
    data: XOR<hacenmatchUpdateManyMutationInput, hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput>
  }

  export type participaUpsertWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput = {
    where: participaWhereUniqueInput
    update: XOR<participaUpdateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedUpdateWithoutUsuario_participa_usuarioTousuarioInput>
    create: XOR<participaCreateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedCreateWithoutUsuario_participa_usuarioTousuarioInput>
  }

  export type participaUpdateWithWhereUniqueWithoutUsuario_participa_usuarioTousuarioInput = {
    where: participaWhereUniqueInput
    data: XOR<participaUpdateWithoutUsuario_participa_usuarioTousuarioInput, participaUncheckedUpdateWithoutUsuario_participa_usuarioTousuarioInput>
  }

  export type participaUpdateManyWithWhereWithoutUsuario_participa_usuarioTousuarioInput = {
    where: participaScalarWhereInput
    data: XOR<participaUpdateManyMutationInput, participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioInput>
  }

  export type videoyoutubeUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: videoyoutubeWhereUniqueInput
    update: XOR<videoyoutubeUpdateWithoutUsuarioInput, videoyoutubeUncheckedUpdateWithoutUsuarioInput>
    create: XOR<videoyoutubeCreateWithoutUsuarioInput, videoyoutubeUncheckedCreateWithoutUsuarioInput>
  }

  export type videoyoutubeUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: videoyoutubeWhereUniqueInput
    data: XOR<videoyoutubeUpdateWithoutUsuarioInput, videoyoutubeUncheckedUpdateWithoutUsuarioInput>
  }

  export type videoyoutubeUpdateManyWithWhereWithoutUsuarioInput = {
    where: videoyoutubeScalarWhereInput
    data: XOR<videoyoutubeUpdateManyMutationInput, videoyoutubeUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type videoyoutubeScalarWhereInput = {
    AND?: videoyoutubeScalarWhereInput | videoyoutubeScalarWhereInput[]
    OR?: videoyoutubeScalarWhereInput[]
    NOT?: videoyoutubeScalarWhereInput | videoyoutubeScalarWhereInput[]
    urlvideo?: StringFilter<"videoyoutube"> | string
    idusuario?: StringFilter<"videoyoutube"> | string
  }

  export type usuarioCreateWithoutVideoyoutubeInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
  }

  export type usuarioUncheckedCreateWithoutVideoyoutubeInput = {
    correo: string
    nombre: string
    descripcion: string
    contrasena: string
    edad: number
    sexo: string
    preferencias: string
    tipousuario: string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedCreateNestedManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput
    participa_participa_usuarioTousuario?: participaUncheckedCreateNestedManyWithoutUsuario_participa_usuarioTousuarioInput
  }

  export type usuarioCreateOrConnectWithoutVideoyoutubeInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutVideoyoutubeInput, usuarioUncheckedCreateWithoutVideoyoutubeInput>
  }

  export type usuarioUpsertWithoutVideoyoutubeInput = {
    update: XOR<usuarioUpdateWithoutVideoyoutubeInput, usuarioUncheckedUpdateWithoutVideoyoutubeInput>
    create: XOR<usuarioCreateWithoutVideoyoutubeInput, usuarioUncheckedCreateWithoutVideoyoutubeInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutVideoyoutubeInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutVideoyoutubeInput, usuarioUncheckedUpdateWithoutVideoyoutubeInput>
  }

  export type usuarioUpdateWithoutVideoyoutubeInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutVideoyoutubeInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    edad?: IntFieldUpdateOperationsInput | number
    sexo?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    tipousuario?: StringFieldUpdateOperationsInput | string
    hacenmatch_hacenmatch_idusuario2Tousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioNestedInput
    hacenmatch_hacenmatch_idusuarioTousuario?: hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioNestedInput
    participa_participa_usuarioTousuario?: participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioNestedInput
  }

  export type mensajeCreateManyMultimediaInput = {
    id?: number
    sala: number
    usuario: string
    texto: string
    fechahora?: Date | string | null
  }

  export type mensajeUpdateWithoutMultimediaInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    participa?: participaUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mensajeUncheckedUpdateManyWithoutMultimediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sala?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mensajeCreateManyParticipaInput = {
    id?: number
    texto: string
    fechahora?: Date | string | null
    idmultimedia: number
  }

  export type mensajeUpdateWithoutParticipaInput = {
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    multimedia?: multimediaUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type mensajeUncheckedUpdateWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idmultimedia?: IntFieldUpdateOperationsInput | number
  }

  export type mensajeUncheckedUpdateManyWithoutParticipaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    fechahora?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idmultimedia?: IntFieldUpdateOperationsInput | number
  }

  export type participaCreateManySala_participa_salaTosalaInput = {
    usuario: string
    estado: string
  }

  export type participaUpdateWithoutSala_participa_salaTosalaInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    usuario_participa_usuarioTousuario?: usuarioUpdateOneRequiredWithoutParticipa_participa_usuarioTousuarioNestedInput
  }

  export type participaUncheckedUpdateWithoutSala_participa_salaTosalaInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateManyWithoutSala_participa_salaTosalaInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type hacenmatchCreateManyUsuario_hacenmatch_idusuario2TousuarioInput = {
    idusuario: string
  }

  export type hacenmatchCreateManyUsuario_hacenmatch_idusuarioTousuarioInput = {
    idusuario2: string
  }

  export type participaCreateManyUsuario_participa_usuarioTousuarioInput = {
    sala: number
    estado: string
  }

  export type videoyoutubeCreateManyUsuarioInput = {
    urlvideo: string
  }

  export type hacenmatchUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    usuario_hacenmatch_idusuarioTousuario?: usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuarioTousuarioNestedInput
  }

  export type hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    idusuario?: StringFieldUpdateOperationsInput | string
  }

  export type hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuario2TousuarioInput = {
    idusuario?: StringFieldUpdateOperationsInput | string
  }

  export type hacenmatchUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    usuario_hacenmatch_idusuario2Tousuario?: usuarioUpdateOneRequiredWithoutHacenmatch_hacenmatch_idusuario2TousuarioNestedInput
  }

  export type hacenmatchUncheckedUpdateWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    idusuario2?: StringFieldUpdateOperationsInput | string
  }

  export type hacenmatchUncheckedUpdateManyWithoutUsuario_hacenmatch_idusuarioTousuarioInput = {
    idusuario2?: StringFieldUpdateOperationsInput | string
  }

  export type participaUpdateWithoutUsuario_participa_usuarioTousuarioInput = {
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUpdateManyWithoutParticipaNestedInput
    sala_participa_salaTosala?: salaUpdateOneRequiredWithoutParticipa_participa_salaTosalaNestedInput
  }

  export type participaUncheckedUpdateWithoutUsuario_participa_usuarioTousuarioInput = {
    sala?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    mensaje?: mensajeUncheckedUpdateManyWithoutParticipaNestedInput
  }

  export type participaUncheckedUpdateManyWithoutUsuario_participa_usuarioTousuarioInput = {
    sala?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeUpdateWithoutUsuarioInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeUncheckedUpdateWithoutUsuarioInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }

  export type videoyoutubeUncheckedUpdateManyWithoutUsuarioInput = {
    urlvideo?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MultimediaCountOutputTypeDefaultArgs instead
     */
    export type MultimediaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MultimediaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParticipaCountOutputTypeDefaultArgs instead
     */
    export type ParticipaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParticipaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalaCountOutputTypeDefaultArgs instead
     */
    export type SalaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use hacenmatchDefaultArgs instead
     */
    export type hacenmatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = hacenmatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use mensajeDefaultArgs instead
     */
    export type mensajeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = mensajeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use multimediaDefaultArgs instead
     */
    export type multimediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = multimediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use participaDefaultArgs instead
     */
    export type participaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = participaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use salaDefaultArgs instead
     */
    export type salaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = salaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use videoyoutubeDefaultArgs instead
     */
    export type videoyoutubeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = videoyoutubeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}